Now read below section carefully ,

// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';



import TodayIcon  from '@mui/icons-material/Today';  ------------change this con 
import SyncIcon   from '@mui/icons-material/Sync';   -------------change this icon 

import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

// Flags
import CostaRicaFlag  from '../assets/flags/costa-rica.png';
import ArgentinaFlag  from '../assets/flags/argentina.png';
import MexicoFlag     from '../assets/flags/mexico.png';
import PeruFlag       from '../assets/flags/peru.png';
import BrazilFlag     from '../assets/flags/brazil.png';
import PanamaFlag     from '../assets/flags/panama.png';


import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';


export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build and sort partitions
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 1,
          pb: 2,
          px: '20px',        // ← exactly 20px padding both sides
        }}
      >


// make changes now cards look perfect but increase internal components size , it looks card are big but cards display data are small
        {/* Top six summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            {
              title: "Today's Total Headcount",
              value: todayTot,
              // icon: <TodayIcon />,
          icon: <TodayIcon sx={{ color: '#1e8449 ' }} />,


            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
             icon: <PeopleIcon sx={{ color: '#4CAF50' }} />,
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
             icon: <BusinessCenterIcon sx={{ color: '#2196F3' }} />,
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <SyncIcon sx={{ color: '#FF5722' }} />,
            },
            {
              title: "Realtime Employees Count",
             value: realtimeEmp,
               icon: <PeopleIcon sx={{ color: '#00BCD4' }} />,
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
               icon: <BusinessCenterIcon sx={{ color: '#9C27B0' }} />,
            }
          ].map(card => (
            <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={card.title}
                total={card.value}
                stats={[]}
                icon={card.icon}
                sx={{
                  height: 140,
                  border: `2px solid ${card.color}`
                }}
              />
            </Box>
          ))}
        </Box>




