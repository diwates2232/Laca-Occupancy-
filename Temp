// src/services/occupancy.service.js

const { poolPromise, sql } = require('../config/db');

const partitionList = [
  'AR.Cordoba',
  'BR.Sao Paulo',
  'CR.Costa Rica Partition',
  'MX.Mexico City',
  'PA.Panama City',
  'PE.Lima'
];

/**
 * Fetch live occupancy: today’s CardAdmitted in any of the six partitions,
 * adjusted for each record’s MessageLocaleOffset.
 * Includes Text5 and PartitionName2.
 */
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const partitionsSql = partitionList.map(p => `'${p.replace("'", "''")}'`).join(',');

  const query = `
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        t1.ObjectName2               AS Door,           -- your original ObjectName2
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
            THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END                          AS EmployeeID,
        t2.text5                     AS Text5,          -- ADDED
        t1.PartitionName2            AS PartitionName2, -- ADDED
        t1.ObjectIdentity1           AS PersonGUID,
        t3.Name                      AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                             AS CardNumber,
        t5a.value                     AS AdmitCode,
        t5d.value                     AS Direction
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     AS t2 
        ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3 
        ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] AS t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] AS t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${partitionsSql})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8), LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      Door,
      PersonnelType,
      CardNumber,
      Text5,              -- ADDED to final output
      PartitionName2,     -- ADDED to final output
      AdmitCode,
      Direction
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};


/**
 * Fetch historical occupancy: past 30 days for a specific partition/location.
 * Includes Text5 and PartitionName2.
 */
exports.fetchHistoricalOccupancy = async (location) => {
  const pool = await poolPromise;

  const query = `
    SELECT DISTINCT
      t1.ObjectName1,
      CASE
        WHEN t2.Int1 = 0 THEN t2.Text12
        ELSE CAST(t2.Int1 AS NVARCHAR)
      END                      AS EmployeeID,
      t3.Name                  AS PersonnelType,
      t2.text5                 AS Text5,          -- ADDED
      t1.PartitionName2        AS PartitionName2, -- ADDED
      t1.MessageType,
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) AS Date
    FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1
    INNER JOIN [ACVSCore].[Access].[Personnel]     AS t2 
      ON t1.ObjectIdentity1 = t2.GUID
    INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3 
      ON t2.PersonnelTypeId = t3.ObjectID
    WHERE
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
        >= DATEADD(DAY, -30, CONVERT(DATE, GETDATE()))
      AND t1.PartitionName2 = @location
      AND t1.MessageType     = 'CardAdmitted'
    ORDER BY Date ASC;
  `;

  const result = await pool.request()
    .input('location', sql.NVarChar, location)
    .query(query);

  return result.recordset;
};











below is my current file in this file there is no text,5 and partationName2
so refer Query and add this two and give me updated files carefully

refer this query

SELECT 
    t1.[ObjectName1],
    t1.[ObjectName2],
   CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
    END AS EmployeeID,
    t2.[PersonnelTypeID],
    t3.[Name],  -- Adding the PersonnelType from the third table
	t2.text5,
	t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
	t1.MessageType
INTO 
    #CombinedEmployeeData  -- Temporary table
FROM 
    [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1  -- Replace with your actual table name
INNER JOIN 
    [ACVSCore].[Access].[Personnel] AS t2  -- Replace with the actual table name
ON 
    t1.ObjectIdentity1 = t2.GUID
INNER JOIN 
    [ACVSCore].[Access].[PersonnelType] AS t3  -- Replace with the actual table name containing PersonnelType
ON 
    t2.[PersonnelTypeId] = t3.[ObjectID];
	SELECT DISTINCT
    [ObjectName1],
    [Name],
	EmployeeID,
	text5,
	PartitionName2,
	Messagetype,
    CONVERT(DATE, LocaleMessageTime) AS Date
	FROM 
    #CombinedEmployeeData  -- Use the temporary table with combined data
	WHERE 
    CONVERT (DATE, LocaleMessageTime) = '2025-05-27' 
	AND PartitionName2 IN ('AR.Cordoba', 'BR.Sao Paulo', 'CR.Costa Rica Partition', 'MX.Mexico City', 'PA.Panama City', 'PE.Lima') 
	AND MessageType = 'CardAdmitted';

	DROP Table #CombinedEmployeeData;






and update below file carefully


// C:\Users\W0024618\Desktop\laca-occupancy-backend\src\services\occupancy.service.js

const { poolPromise, sql } = require('../config/db');

const partitionList = [
  'AR.Cordoba',
  'BR.Sao Paulo',
  'CR.Costa Rica Partition',
  'MX.Mexico City',
  'PA.Panama City',
  'PE.Lima'
];

/**
 * Fetch live occupancy: today’s CardAdmitted in any of the six partitions,
 * adjusted for each record’s MessageLocaleOffset.
 */
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;

  // Build a properly escaped IN-list for PartitionName2
  const partitionsSql = partitionList.map(p => `'${p.replace("'", "''")}'`).join(',');

  const query = `
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
            THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     AS t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] AS t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] AS t5d
        ON t1.XmlGUID = t5d.GUID 
       AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 IN (${partitionsSql})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};

/**
 * Fetch historical occupancy: past 30 days for a specific partition/location.
 */
exports.fetchHistoricalOccupancy = async (location) => {
  const pool = await poolPromise;

  const query = `
    SELECT
      DISTINCT t1.ObjectName1,
      t3.Name       AS PersonnelType,
      CASE
        WHEN t2.Int1 = 0 THEN t2.Text12
        ELSE CAST(t2.Int1 AS NVARCHAR)
      END           AS EmployeeID,
      t2.text5,
      t1.PartitionName2,
      t1.MessageType,
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) AS Date
    FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1
    INNER JOIN [ACVSCore].[Access].[Personnel]     AS t2 ON t1.ObjectIdentity1 = t2.GUID
    INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3 ON t2.PersonnelTypeId = t3.ObjectID
    WHERE
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
        >= DATEADD(DAY, -30, CONVERT(DATE, GETDATE()))
      AND t1.PartitionName2 = @location
      AND t1.MessageType     = 'CardAdmitted'
    ORDER BY Date ASC
  `;

  const result = await pool.request()
    .input('location', sql.NVarChar, location)
    .query(query);

  return result.recordset;
};

