        {/* Two summary cards */}
        <Box display="flex" alignItems="stretch" gap={2} sx={{ mb:2 }}>
          <SummaryCard
            title={`Today’s ${partition} Headcount`}
            total={partToday.total}
            stats={[
              { label: 'Employees',   value: partToday.Employee },
              { label: 'Contractors', value: partToday.Contractor },
              ...(partToday.TempBadge != null
                ? [{ label: 'Temp Badge', value: partToday.TempBadge }]
                : [])
            ]}
            sx={{ flex:1, height:180 }}
          />

          <SummaryCard
            title={`Live ${partition} Headcount`}
            total={live.total}
            stats={[
              { label: 'Employees',   value: live.Employee },
              { label: 'Contractors', value: live.Contractor },
              ...(live.TempBadge != null
                ? [{ label: 'Temp Badge', value: live.TempBadge }]
                : [])
            ]}
            sx={{ flex:1, height:180 }}
          />
        </Box>







// C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\PartitionDetail.jsx

todayCount is not defined
ReferenceError: todayCount is not defined
    at PartitionDetail (http://localhost:3000/main.9b8df731806c9cc23f30.hot-update.js:244:18)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:63572:18)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:53782:20)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:55475:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:56061:16)
    at runWithFiberInDEV (http://localhost:3000/static/js/bundle.js:51553:68)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:58134:93)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:58027:38)
    at renderRootSync (http://localhost:3000/static/js/bundle.js:58011:7)
    at performWorkOnRoot (http://localhost:3000/static/js/bundle.js:57775:42)



to fetch Today headcount 
http://localhost:3001/api/occupancy/history/CR.Costa%20Rica%20Partition
We can simply change partation anme 

 {
      "date": "2025-06-15",
      "day": "Sunday",
      "region": {
        "name": "CR.Costa Rica Partition",
        "total": 38,
        "Employee": 23,
        "Contractor": 15,
        "TempBadge": 0
      }
    },
    {
      "date": "2025-06-16",
      "day": "Monday",
      "region": {
        "name": "CR.Costa Rica Partition",
        "total": 423,
        "Employee": 386,
        "Contractor": 37,
        "TempBadge": 0
      }
    }
  ],

using this API for today we can render this count as per date






import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Button,
  Grid,
  Link
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import Header from '../components/Header';
import Footer from '../components/Footer';
import { fetchLiveSummary, fetchLiveDetails } from '../api/occupancy.service';

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const [summary, setSummary] = useState(null);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    let timer;
    const load = async () => {
      const json = await fetchLiveSummary();
      setSummary(json);
      setDetails(json.details.filter(r =>
        r.PartitionName2 === partition && r.Direction === 'InDirection'
      ));
      setLastUpdate(new Date().toLocaleTimeString());
    };
    load();
    // refresh every second
    timer = setInterval(load, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  if (!summary) {
    return <Box sx={{ p: 4 }}><Typography>Loading…</Typography></Box>;
  }

//   const todayCount = summary.today;
 // Use the partition's realtime total as its "today" headcount
 const partToday = summary.realtime[partition] || { total:0, Employee:0, Contractor:0, TempBadge:0 };
  const live = summary.realtime[partition] || { total:0, Employee:0, Contractor:0, TempBadge:0, floors:{} };

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px:'10px', pt:1, pb:2 }}>
        {/* Back + Page Title */}
        <Box display="flex" alignItems="center" mb={0}>
          <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
        </Box>

        {/* Two summary cards */}
        <Box display="flex" alignItems="stretch" gap={2} sx={{ mb:2 }}>
          <SummaryCard
            title={`Today’s ${partition} Headcount`}
            total={todayCount.total}
            stats={[
              { label:'Employees', value: todayCount.Employee },
              { label:'Contractors', value: todayCount.Contractor },
              ...(todayCount.TempBadge!=null ? [{ label:'Temp Badge', value:todayCount.TempBadge }] : [])
            ]}
            sx={{ flex:1, height:180 }}
          />
          {/* <SummaryCard
            title={`Live ${partition} Headcount`}
            total={live.total}
            stats={[
              { label:'Employees', value: live.Employee },
              { label:'Contractors', value: live.Contractor },
              ...(live.TempBadge!=null ? [{ label:'Temp Badge', value:live.TempBadge }] : [])
            ]}
            sx={{ flex:1, height:180 }}
          /> */}

         <SummaryCard
           title={`Today’s ${partition} Headcount`}
           total={partToday.total}
           stats={[
             { label:'Employees',   value: partToday.Employee },
             { label:'Contractors', value: partToday.Contractor },
             ...(partToday.TempBadge!=null
               ? [{ label:'Temp Badge', value: partToday.TempBadge }]
               : [])
          ]}
           sx={{ flex:1, height:180 }}
         />


        </Box>

        {/* Floor‐wise chart + last updated */}
        <Box mb={2}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
            <Typography variant="h6">Live Floor Counts</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>
          <ChartCard
            title=""
            data={Object.entries(live.floors).map(([floor, cnt])=>({ name:floor, value:cnt }))}
            dataKey="value"
            chartHeight={260}
          />
        </Box>

        {/* Per‐floor detail boxes */}
        <Typography variant="h6" gutterBottom>Floor Details</Typography>
        <Grid container spacing={2}>
          {Object.entries(live.floors).map(([floor, cnt])=>(
            <Grid key={floor} item xs={12} md={6}>
              <Box sx={{ border:'1px solid #FFC107', borderRadius:2, p:2, height:'100%' }}>
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor} (Total {cnt})
                </Typography>
                {details
                  .filter(r => {
                    /* match floor by lookup you already use; assuming r.floor was injected */
                    return r.floor === floor;
                  })
                  .slice(0,25)
                  .map(r => (
                    <Box key={r.PersonGUID} display="flex" justifyContent="space-between" sx={{ mb:1, fontSize:'0.875rem' }}>
                      <span>{r.ObjectName1}</span>
                      <span>{r.PersonGUID.slice(-4)}</span>
                      <span>{new Date(r.LocaleMessageTime).toLocaleTimeString()}</span>
                      <span>{r.PersonnelType}</span>
                      <span>{r.CardNumber}</span>
                      <span>{r.Door}</span>
                    </Box>
                  ))
                }
                {cnt > 25 && (
                  <Button size="small" onClick={()=>navigate(`/partition/${encodeURIComponent(partition)}/floor/${encodeURIComponent(floor)}`)}>
                    See more…
                  </Button>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Container>
      <Footer />
    </>
  );
}

