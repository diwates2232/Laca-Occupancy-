import React, { useState, useMemo } from 'react';
import './ZoneDetailsTable.css'; // copy over your CSS from Pune

export default function ZoneDetailsTable({ data = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) sort floors by descending count
  const sortedFloors = useMemo(() => {
    return Object.entries(data).sort(([, listA], [, listB]) => listB.length - listA.length);
  }, [data]);

  // 2) filter predicate
  const matches = emp =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  if (sortedFloors.length === 0) {
    return <p>No floor details available.</p>;
  }

  return (
    <div className="zone-cards">
      <div style={{ marginBottom: 16, textAlign: 'right' }}>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          style={{
            padding: '6px 12px',
            fontSize: '0.9rem',
            borderRadius: 4,
            border: '1px solid #ccc'
          }}
        />
      </div>

      {sortedFloors.map(([floor, emps]) => {
        const filtered = emps.filter(matches);
        if (!filtered.length) return null;

        return (
          <div key={floor} className="zone-card">
            <div className="zone-header">
              <h3>{floor.trim()}</h3>
              <span className="zone-badge">Total: {filtered.length}</span>
            </div>
            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Emp ID</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Card #</th>
                  <th>Door</th>
                </tr>
              </thead>
              <tbody>
                {filtered.map((r, i) => (
                  <tr key={`${r.PersonGUID}-${i}`}>
                    <td>{r.ObjectName1}</td>
                    <td>{r.EmployeeID}</td>
                    <td>{new Date(r.LocaleMessageTime).toLocaleTimeString()}</td>
                    <td>{r.PersonnelType}</td>
                    <td>{r.CardNumber}</td>
                    <td>{r.Door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}






// … other imports …
-import {
-  // …
-} from '../api/occupancy.service';
+import {
+  fetchLiveSummary,
+  fetchHistory
+} from '../api/occupancy.service';
+import ZoneDetailsTable from '../components/ZoneDetailsTable';

 export default function PartitionDetail() {
   // … your existing state/effects …

   // derive floors → array-of-records map:
   const floorMap = useMemo(() => {
     const m = {};
     // for each live-record in `details`, assume you've injected `floor` earlier
     details.forEach(r => {
       const f = r.floor?.trim() || 'Unmapped';
       if (!m[f]) m[f] = [];
       m[f].push(r);
     });
     return m;
   }, [details]);

   return (
     <>
       <Header />
       <Container /* … */>
         {/* … summary cards + chart … */}

-        {/* Floor Details */}
-        <Typography variant="h6" gutterBottom>Floor Details</Typography>
-        <Grid container spacing={2}>
-          {Object.entries(live.floors).map(([floor, cnt]) => (
-            <Grid key={floor} item xs={12} md={6}>
-              {/* … manual box … */}
-            </Grid>
-          ))}
-        </Grid>
+        {/* Floor Details */}
+        <Typography variant="h6" gutterBottom>
+          Floor Details
+        </Typography>
+        <ZoneDetailsTable data={floorMap} />
       </Container>
       <Footer />
     </>
   );
 }











Let refer both file carefully and update as per details page as per requirnment 

C:\Users\W0024618\Desktop\swipeData\client\src\pages\ZoneDeatailsPage.jsx

import React, { useState, useMemo } from 'react';
import './ZoneDetailsTable.css';

function ZoneDetailsTable({ data = {}, searchTerm: outerSearch = '' }) {
  const [searchTerm, setSearchTerm] = useState(outerSearch);

  // 1) Sort zones by descending count (memoized)
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  // 3) Handler for search input
  const handleSearchChange = (e) => setSearchTerm(e.target.value);

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      <div style={{ marginBottom: '1rem', textAlign: 'right' }}>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={handleSearchChange}
          style={{ padding: '0.4rem 0.8rem', fontSize: '0.9rem', borderRadius: 4, border: '1px solid #ccc' }}
        />
      </div>

      {sortedEntries.map(([zone, emps]) => {
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) return null;

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>
            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th><th>Swipe Time</th><th>Type</th><th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}

export default React.memo(ZoneDetailsTable);





// src/components/ZoneDetailsTable.jsx


import React, { useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {}, searchTerm = '' }) {
  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate (case‐insensitive)
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }


  return (
    <div className="zone-cards">
      {sortedEntries.map(([zone, emps]) => {
        // 3) Filter employees in this zone by searchTerm
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}




refer above file carefully and update laca pages carefully

C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\PartitionDetail.jsx



// C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\PartitionDetail.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Button,
  Grid,
   CircularProgress
//   Skeleton
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';

import {
  fetchLiveSummary,
  fetchHistory
} from '../api/occupancy.service';

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState('');

  // Live summary every second
  useEffect(() => {
    let timer;
    const loadLive = async () => {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setDetails(
        json.details.filter(
          r => r.PartitionName2 === partition && r.Direction === 'InDirection'
        )
      );
      setLastUpdate(new Date().toLocaleTimeString());
    };
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // Historical (today's) headcount once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then(json => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  // show spinner until both are ready
  if (!liveSummary || !history) {
    return <LoadingSpinner />;
  }

  // === derive counts ===
  const lastDay = history.summaryByDate.slice(-1)[0];
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0, Employee: 0, Contractor: 0, TempBadge: 0, floors: {}
  };

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{ px: '20px', pt: 2, pb: 4 }}
      >
        {/* Back + Title */}
        <Box display="flex" alignItems="center" mb={2}>
          <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
          <Typography variant="h6" sx={{ ml: 2 }}>
            {partition.replace('CR.Costa Rica Partition', 'Costa Rica')}
          </Typography>
        </Box>

      
      
      <Box display="flex" alignItems="stretch" gap={2} mb={4}>
  {/* Today’s headcount card */}
  <SummaryCard
    title={`Today’s ${partition} Headcount`}
    total={historyLoading ? 0 : partToday.total}
    stats={[
      {
        label: 'Employees',
        value: historyLoading
          ? <CircularProgress size={20} />
          : partToday.Employee
      },
      {
        label: 'Contractors',
        value: historyLoading
          ? <CircularProgress size={20} />
          : partToday.Contractor
      },
      {
        label: 'Temp Badge',
        value: historyLoading
          ? <CircularProgress size={20} />
          : partToday.TempBadge
      }
    ]}
    sx={{ flex: 1, height: 180 }}
  />

  {/* Live headcount card */}
  <SummaryCard
    title={`Live ${partition} Headcount`}
    total={live.total}
    stats={[
      { label: 'Employees',   value: live.Employee },
      { label: 'Contractors', value: live.Contractor },
      { label: 'Temp Badge',  value: live.TempBadge }
    ]}
    sx={{ flex: 1, height: 180 }}
  />
</Box>



        {/* Floor‐wise Chart */}
        <Box mb={4}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
            <Typography variant="h6">Live Floor Counts</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>
          <ChartCard
            title=""
            data={Object.entries(live.floors).map(([floor, cnt]) => ({
              name: floor.trim(),
              value: cnt
            }))}
            chartHeight={260}
          />
        </Box>

        {/* Floor Details */}
        <Typography variant="h6" gutterBottom>Floor Details</Typography>
        <Grid container spacing={2}>
          {Object.entries(live.floors).map(([floor, cnt]) => (
            <Grid key={floor} item xs={12} md={6}>
              <Box
                sx={{
                  border: '1px solid #FFC107',
                  borderRadius: 2,
                  p: 2,
                  height: '100%'
                }}
              >
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor.trim()} (Total {cnt})
                </Typography>
                {details
                  .filter(r => r.floor === floor.trim())
                  .slice(0, 25)
                  .map(r => (
                    <Box
                      key={r.PersonGUID}
                      display="flex"
                      justifyContent="space-between"
                      sx={{ mb: 1, fontSize: '0.875rem' }}
                    >
                      <span>{r.ObjectName1}</span>
                      <span>{r.EmployeeID}</span>
                      <span>{new Date(r.LocaleMessageTime).toLocaleTimeString()}</span>
                      <span>{r.PersonnelType}</span>
                      <span>{r.CardNumber}</span>
                      <span>{r.Door}</span>
                    </Box>
                  ))}
                {cnt > 25 && (
                  <Button
                    size="small"
                    onClick={() =>
                      navigate(
                        `/partition/${encodeURIComponent(
                          partition
                        )}/floor/${encodeURIComponent(floor.trim())}`
                      )
                    }
                  >
                    See more…
                  </Button>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Container>

      <Footer />
    </>
  );
}





C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\RealtimeDetails.jsx


// src/pages/RealtimeDetails.jsx

import React, { useEffect, useState } from 'react';
import { Container, Typography, Box, Skeleton } from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import DataTable from '../components/DataTable';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

const columns = [
  { field: 'ObjectName1',  headerName: 'Name' },
  { field: 'Door',         headerName: 'Door' },
  { field: 'Swipe_Time',   headerName: 'Time' },
  { field: 'PersonnelType',headerName: 'Type' },
];

export default function RealtimeDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState(null);

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container sx={{ mt: 4 }}>
        <Typography color="error">Error loading data</Typography>
      </Container>
    );
  }

  const rows = data?.details.filter(r => r.PartitionName2 === partition) || [];

  return (
    <>
      <Header />
      <Container sx={{ mt: 2, mb: 4 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography
            variant="button"
            onClick={() => navigate(-1)}
            sx={{ cursor: 'pointer' }}
          >
            ← Back
          </Typography>
          <Typography variant="h5">{partition}</Typography>
          {loading ? (
            <Skeleton width={100} />
          ) : (
            <Typography variant="body2" color="textSecondary">
              Updated: {lastUpdate}
            </Typography>
          )}
        </Box>

        {loading ? (
          <LoadingSpinner />
        ) : rows.length > 0 ? (
          <DataTable columns={columns} rows={rows} />
        ) : (
          <Typography>No swipes recorded yet for this partition.</Typography>
        )}
      </Container>
      <Footer />
    </>
  );
}








