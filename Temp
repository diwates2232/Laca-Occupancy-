// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Grid,
  Button,
  Skeleton
} from '@mui/material';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import Header from '../components/Header';
import Footer from '../components/Footer';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [selectedPartition, setSelectedPartition] = useState(null);

  // Update timestamp when new data arrives
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container sx={{ mt: 4 }}>
        <Typography color="error">Error loading live data</Typography>
      </Container>
    );
  }

  // Global today stats
  const todayStats = !loading && [
    { label: 'Employees',   value: data.today.Employee },
    { label: 'Contractors', value: data.today.Contractor }
  ];

  // Partition names
  const partitions = !loading ? Object.keys(data.realtime) : [];

  // If one partition is selected, get its floor breakdown
  const floorData = selectedPartition && data?.realtime[selectedPartition]?.floors;

  return (
    <>
      <Header />
      <Container sx={{ mt: 2, mb: 4 }}>

        {/* 1) Title + Last Updated */}
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h5">LACA Headcount</Typography>
          {loading
            ? <Skeleton width={100} />
            : <Typography variant="body2" color="textSecondary">
                Updated: {lastUpdate}
              </Typography>
          }
        </Box>

        {/* 2) Today Headcount Card */}
        {loading
          ? <Skeleton variant="rectangular" height={100} />
          : <SummaryCard title="Today’s Headcount" stats={todayStats} />
        }

        {/* 3) Either Partition List or Floor Chart */}
        {!selectedPartition ? (
          <>
            {/* Partition cards */}
            <Box mt={4}>
              <Typography variant="h6" gutterBottom>Realtime Headcount by Partition</Typography>
              {loading ? (
                <Skeleton variant="rectangular" height={200} />
              ) : (
                <Grid container spacing={2}>
                  {partitions.map(name => {
                    const stats = data.realtime[name];
                    return (
                      <Grid item xs={12} sm={6} md={4} key={name}>
                        <Button
                          fullWidth
                          variant="outlined"
                          onClick={() => setSelectedPartition(name)}
                        >
                          <Box textAlign="left">
                            <Typography variant="subtitle1">
                              {name.replace(/^.*\./, '')}
                            </Typography>
                            <Typography variant="h6">
                              {stats.total} total
                            </Typography>
                          </Box>
                        </Button>
                      </Grid>
                    );
                  })}
                </Grid>
              )}
            </Box>
          </>
        ) : (
          <>
            {/* Floor-wise breakdown for selected partition */}
            <Box mt={4} mb={2} display="flex" justifyContent="space-between">
              <Typography variant="h6">
                {selectedPartition.replace(/^.*\./, '')} – Floor Breakdown
              </Typography>
              <Button onClick={() => setSelectedPartition(null)}>
                ← Back to Partitions
              </Button>
            </Box>

            {loading ? (
              <Skeleton variant="rectangular" height={300} />
            ) : (
              <ChartCard
                title="Floor Counts"
                data={Object.entries(floorData || {}).map(([floor, count]) => ({
                  name: floor,
                  value: count
                }))}
              />
            )}
          </>
        )}

      </Container>
      <Footer />
    </>
  );
}








import React from 'react';
import { AppBar, Toolbar, Box, Typography } from '@mui/material';
import WuLogo from '../assets/wu-logo.png';      // ← put your WU logo here
import LacaFlag from '../assets/laca-flag.png';  // ← put your LACA flag here

export default function Header() {
  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        {/* Left: logos */}
        <Box display="flex" alignItems="center">
          <Box component="img" src={WuLogo} alt="WU Logo"
            sx={{ height: 36, mr: 2 }} />
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            Western Union – LACA Region Headcount
          </Typography>
        </Box>
        {/* Right: flag */}
        <Box component="img" src={LacaFlag} alt="LACA Flag"
          sx={{ height: 30 }} />
      </Toolbar>
    </AppBar>
  );
}




import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Grid,
  Button,
  Skeleton
} from '@mui/material';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import Header from '../components/Header';
import Footer from '../components/Footer';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [selectedPartition, setSelectedPartition] = useState(null);

  // Update timestamp when data arrives
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container sx={{ mt: 4 }}>
        <Typography color="error">Error loading live data</Typography>
      </Container>
    );
  }

  // TODAY totals or skeleton
  const todayTotals = loading
    ? null
    : [
        { label: 'Total',       value: data.today.total },
        { label: 'Employees',   value: data.today.Employee },
        { label: 'Contractors', value: data.today.Contractor }
      ];

  // Partition list for buttons
  const partitions = loading
    ? []
    : Object.keys(data.realtime);

  // If one partition is selected, get its floor data
  const floorStats = selectedPartition && !loading
    ? data.realtime[selectedPartition].floors
    : null;

  return (
    <>
      <Header />
      <Container sx={{ mt: 2, mb: 4 }}>

        {/* 1. Title Row with timestamp */}
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h5">LACA Headcount</Typography>
          {loading
            ? <Skeleton width={100} />
            : <Typography variant="body2" color="textSecondary">
                Updated: {lastUpdate}
              </Typography>
          }
        </Box>

        {/* 2. Today’s headcount */}
        {loading
          ? <Skeleton variant="rectangular" height={100} />
          : <SummaryCard title="Today's Headcount" stats={todayTotals} />
        }

        {/* 3. Partition selector */}
        <Box mt={4} mb={2}>
          <Typography variant="h6" gutterBottom>Partitions</Typography>
          {loading
            ? <Skeleton variant="rectangular" height={40} />
            : (
              <Grid container spacing={1}>
                {partitions.map(name => (
                  <Grid item key={name}>
                    <Button
                      variant={name === selectedPartition ? 'contained' : 'outlined'}
                      onClick={() => setSelectedPartition(name)}
                    >
                      {name.replace(/^.*\./, '') /* show just “Costa Rica”, etc. */}
                    </Button>
                  </Grid>
                ))}
              </Grid>
            )
          }
        </Box>

        {/* 4. If no partition selected yet → show totals bar chart */}
        {!selectedPartition && (
          <Box mt={4}>
            <Typography variant="h6" gutterBottom>Realtime by Partition</Typography>
            {loading
              ? <Skeleton variant="rectangular" height={300} />
              : (
                <ChartCard
                  title="Partition Totals"
                  data={Object.entries(data.realtime).map(([name, stats]) => ({
                    name: name.replace(/^.*\./, ''),
                    value: stats.total
                  }))}
                />
              )
            }
          </Box>
        )}

        {/* 5. If a partition is selected → show its floors chart */}
        {selectedPartition && (
          <Box mt={4}>
            <Box display="flex" justifyContent="space-between" alignItems="center">
              <Typography variant="h6">
                {selectedPartition.replace(/^.*\./, '')} – Floor Breakdown
              </Typography>
              <Button onClick={() => setSelectedPartition(null)}>
                Back to All
              </Button>
            </Box>

            {loading
              ? <Skeleton variant="rectangular" height={300} />
              : floorStats && (
                <ChartCard
                  title="Floor Counts"
                  data={Object.entries(floorStats).map(([floor, count]) => ({
                    name: floor,
                    value: count
                  }))}
                />
              )
            }
          </Box>
        )}

      </Container>
      <Footer />
    </>
  );
}











// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Grid,
  CardActionArea,
  Skeleton,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState(null);
  const navigate = useNavigate();

  // update timestamp on each data change
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container sx={{ mt: 4 }}>
        <Typography color="error">Error loading live data</Typography>
      </Container>
    );
  }

  return (
    <>
      <Header />
      <Container sx={{ mt: 2, mb: 4 }}>
        {/* Header */}
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h5">LACA Headcount</Typography>
          {loading ? (
            <Skeleton variant="text" width={100} />
          ) : (
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          )}
        </Box>

        {/* Today's Totals */}
        {loading ? (
          <Skeleton variant="rectangular" height={100} />
        ) : (
          <SummaryCard
            title="Today's Totals"
            stats={[
              { label: 'Total',       value: data.today.total },
              { label: 'Employees',   value: data.today.Employee },
              { label: 'Contractors', value: data.today.Contractor }
            ]}
          />
        )}

        {/* Bar Chart */}
        <Box mt={4}>
          <Typography variant="h6" gutterBottom>Realtime by Partition</Typography>
      
 {loading
   ? <Skeleton variant="rectangular" height={300} />
   : <ChartCard
       title="Partitions"
       data={Object.entries(data.realtime).map(([name, stats]) => ({
         name,
         value: stats.total
       }))}
     />
 }


        </Box>

        {/* Floor-wise Accordions */}
        <Box mt={4}>
          <Typography variant="h6" gutterBottom>Partition Detail (Floor-wise)</Typography>
          {loading
            ? Array.from({ length: 3 }).map((_, i) => (
                <Skeleton key={i} variant="rectangular" height={80} sx={{ mb: 1 }} />
              ))
            : Object.entries(data.realtime).map(([partName, stats]) => (
                <Accordion key={partName} sx={{ mb: 1 }}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Box flexGrow={1}>
                      <Typography variant="subtitle1">{partName}</Typography>
                      <Typography variant="body2" color="textSecondary">
                        Total: {stats.total} — Emp: {stats.Employee}, Cont: {stats.Contractor}
                      </Typography>
                    </Box>
                    <Typography
                      variant="button"
                      sx={{ cursor: 'pointer', ml: 2 }}
                      onClick={e => {
                        e.stopPropagation();
                        navigate(`/realtime/${encodeURIComponent(partName)}`);
                      }}
                    >
                      View All Swipes
                    </Typography>
                  </AccordionSummary>

                  <AccordionDetails>
                    {stats.floors && Object.entries(stats.floors).length > 0 ? (
                      <Grid container spacing={1}>
                        {Object.entries(stats.floors).map(([floor, count]) => (
                          <Grid item key={floor} xs={6} sm={4} md={3}>
                            <SummaryCard
                              title={floor}
                              stats={[{ label: 'Count', value: count }]}
                            />
                          </Grid>
                        ))}
                      </Grid>
                    ) : (
                      <Typography variant="body2" color="textSecondary">
                        No floor data.
                      </Typography>
                    )}
                  </AccordionDetails>
                </Accordion>
              ))
          }
        </Box>
      </Container>
      <Footer />
    </>
  );
}






// src/pages/RealtimeDetails.jsx

import React, { useEffect, useState } from 'react';
import { Container, Typography, Box, Skeleton } from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import DataTable from '../components/DataTable';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

const columns = [
  { field: 'ObjectName1',  headerName: 'Name' },
  { field: 'Door',         headerName: 'Door' },
  { field: 'Swipe_Time',   headerName: 'Time' },
  { field: 'PersonnelType',headerName: 'Type' },
];

export default function RealtimeDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState(null);

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container sx={{ mt: 4 }}>
        <Typography color="error">Error loading data</Typography>
      </Container>
    );
  }

  const rows = data?.details.filter(r => r.PartitionName2 === partition) || [];

  return (
    <>
      <Header />
      <Container sx={{ mt: 2, mb: 4 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography
            variant="button"
            onClick={() => navigate(-1)}
            sx={{ cursor: 'pointer' }}
          >
            ← Back
          </Typography>
          <Typography variant="h5">{partition}</Typography>
          {loading ? (
            <Skeleton width={100} />
          ) : (
            <Typography variant="body2" color="textSecondary">
              Updated: {lastUpdate}
            </Typography>
          )}
        </Box>

        {loading ? (
          <LoadingSpinner />
        ) : rows.length > 0 ? (
          <DataTable columns={columns} rows={rows} />
        ) : (
          <Typography>No swipes recorded yet for this partition.</Typography>
        )}
      </Container>
      <Footer />
    </>
  );
}





// src/components/ChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer
} from 'recharts';

export default function ChartCard({ title, data, dataKey = 'value' }) {
  return (
    <Card variant="outlined" sx={{ mb: 2, height: 300 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom>{title}</Typography>
        <ResponsiveContainer width="100%" height="90%">
          <BarChart data={data}>
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Bar dataKey={dataKey} fill="#FFC107" />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}



// src/components/DataTable.jsx

import React from 'react';
import {
  Table, TableHead, TableBody, TableRow, TableCell, Paper, TableContainer
} from '@mui/material';

export default function DataTable({ columns, rows }) {
  return (
    <TableContainer component={Paper} sx={{ mt: 2 }}>
      <Table size="small">
        <TableHead>
          <TableRow>
            {columns.map(c => <TableCell key={c.field}>{c.headerName}</TableCell>)}
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((row, i) => (
            <TableRow key={i}>
              {columns.map(c => (
                <TableCell key={c.field}>{row[c.field]}</TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}



// src/components/Footer.jsx

import React from 'react';
import { Box, Typography } from '@mui/material';

export default function Footer() {
  return (
    <Box component="footer" p={2} textAlign="center">
      <Typography variant="body2" color="textSecondary">
        © {new Date().getFullYear()} Western Union. All rights reserved.
      </Typography>
    </Box>
  );
}




// src/components/Header.jsx

import React from 'react';
import { AppBar, Toolbar, Typography } from '@mui/material';

export default function Header() {
  return (
    <AppBar position="static" color="primary">
      <Toolbar>
        <Typography variant="h6" component="div">
          Western Union • LACA Occupancy
        </Typography>
      </Toolbar>
    </AppBar>
  );
}



// src/components/LoadingSpinner.jsx

import React from 'react';
import { CircularProgress, Box } from '@mui/material';

export default function LoadingSpinner() {
  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      height="100%"
    >
      <CircularProgress />
    </Box>
  );
}





// src/components/SummaryCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function SummaryCard({ title, stats }) {
  return (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom>{title}</Typography>
        <Grid container spacing={2}>
          {stats.map(({ label, value }) => (
            <Grid item key={label}>
              <Typography variant="subtitle1">{label}</Typography>
              <Typography variant="h5">{value}</Typography>
            </Grid>
          ))}
        </Grid>
      </CardContent>
    </Card>
  );
}








