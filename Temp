//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\PartitionDetail.jsx


// src/pages/PartitionDetail.jsx
import React, { useEffect, useState, useMemo } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";

import { useParams, useNavigate } from "react-router-dom";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";
import buildingCapacities from '../data/buildingCapacities';  // see below


import GroupIcon from '@mui/icons-material/Group';         // Replaces TodayIcon
import TrackChangesIcon from '@mui/icons-material/TrackChanges'; // Replaces SyncIcon


import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';



export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto-refresh live
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      // we'll still fetch details so partition/details page has data ready
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction)
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // Load history
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then(json => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  // Totals
  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0, Employee: 0, Contractor: 0, TempBadge: 0, floors: {}
  };

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
          </Box>


          {/* Six‐card partition summary */}
          <Box display="flex" flexWrap="wrap" gap={1} mb={2} sx={{ px: "20px" }}>
            {[
              {
                title: `Todays Total Headcount`,
                value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
                icon: <GroupIcon sx={{ color: '#E57373', fontSize: 36 }} />,
                border: '#FFD666'
              },
              {
                title: `Todays Employees Count`,
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
                icon: <PeopleIcon sx={{ color: '#81C784', fontSize: 36 }} />,
                border: '#81C784'
              },
              {
                title: `Todays Contractors Count`,
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
                icon: <BusinessCenterIcon sx={{ color: '#64B5F6', fontSize: 36 }} />,
                border: '#FFE599'
              },
              {
                title: `Realtime Headcount`,
                value: live.total,
                icon: <TrackChangesIcon sx={{ color: '#BA68C8', fontSize: 36 }} />,
                border: '#FFF2CC'
              },
              {
                title: `Realtime Employees Count`,
                value: live.Employee,
                icon: <PeopleIcon sx={{ color: '#FFB74D', fontSize: 36 }} />,
                border: '#FFD666'
              },
              {
                title: `Realtime Contractors Count`,
                value: live.Contractor,
                icon: <BusinessCenterIcon sx={{ color: '#4DB6AC', fontSize: 36 }} />,
                border: '#FFE599'
              }
            ].map(card => (
              <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={card.title}
                  total={card.value}
                  stats={[]}
                  icon={card.icon}
                  sx={{
                    height: 140,
                    border: `1px solid ${card.border}`
                  }}
                />
              </Box>
            ))}
          </Box>




          {/* Chart + See Details */}
          <Box mb={4} sx={{ px: "20px",p:2, border: '2px solid #FFC107'  }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6">Live Floor Counts</Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>
            <ChartCard
              title=""
              data={Object.entries(live.floors).map(([floor, cnt]) => ({ name: floor.trim(), value: cnt }))}
              chartHeight={320}
            />
            <Box display="flex" justifyContent="flex-end" mt={1}>  
  <Button
  variant="contained"
  size="small"
  onClick={() =>
    navigate(`/partition/${encodeURIComponent(partition)}/details`)
  }
>
  See Details
</Button>

            </Box>
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}




Updated snippet you shared


export default function PartitionDetail() {
  // … state, effects, summary cards …

  // After computing `live.floors`:
  const floorEntries = Object.entries(live.floors).map(([floor, cnt]) => {
    const name     = floor.trim();
-   const Capacity = buildingCapacities[name] ?? 0;
+   const capacity = buildingCapacities[name] ?? 0;
    const pct      = capacity ? Math.round(cnt / capacity * 100) : 0;
    return {
      name,
-     Headcount: cnt,
-     Capacity:  Capacity,
+     Headcount: cnt,
+     Capacity:  capacity,
      percentage: pct,
      breakdown: {
        Headcount: cnt,
-       Capacity:  Capacity,
+       Capacity:  capacity,
        'Load %':  pct + '%'
      }
    };
  });

  return (
    <>
      <Header />
      <Container disableGutters>
        {/* … summary cards … */}

        {/* Floor‐capacity chart */}
        <Box mt={4} sx={{ p:2, border:'2px solid #FFC107' }}>
          <Typography variant="h6" gutterBottom>
            Live Floor Counts vs Capacity
          </Typography>
          <ChartCard
            data={floorEntries}
            dataKey="Headcount"
            chartHeight={320}
            colors={{ head: '#28B463', cap: '#CB4335' }}
            axisProps={{
              xAxis: { angle: -45, textAnchor: 'end', tick: { fill: '#000' } },
              yAxis: { tick: { fill: '#000' } }
            }}
          />
        </Box>
      </Container>
      <Footer />
    </>
  );
}






