import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer,
  CartesianGrid, Legend, Brush, Cell
} from 'recharts';

export default function ChartCard({
  data = [],
  dataKey = 'value',
  colors = { head: '#FFC107' },
  chartHeight = 300,
  title = ''
}) {
  const [hidden, setHidden] = useState({});

  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card>
        <CardContent>
          <Typography>No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const handleLegend = o => {
    const key = o.dataKey;
    setHidden(h => ({ ...h, [key]: !h[key] }));
  };

  return (
    <Card>
      <CardContent>
        {title && <Typography variant="h6" gutterBottom>{title}</Typography>}
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <BarChart
              data={data}
              margin={{ top: 20, right: 30, left: 0, bottom: 40 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="name"
                angle={-45}
                textAnchor="end"
                interval={0}
                height={60}
              />
              <YAxis />
              <Tooltip />
              <Legend onClick={handleLegend} />
              <Bar
                dataKey={dataKey}
                name="Total"
                fill={colors.head}
                hide={hidden[dataKey]}
              >
                {data.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={colors.head} />
                ))}
              </Bar>
              <Brush dataKey="name" height={20} stroke={colors.head} />
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}







Now Read both file carefully and help me to improve only Chart section carefully

// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton } from '@mui/material';
import GroupIcon          from '@mui/icons-material/Group';
import TrackChangesIcon   from '@mui/icons-material/TrackChanges';
import PeopleIcon         from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import SummaryCard    from '../components/SummaryCard';
import ChartCard      from '../components/ChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import doorMapRaw from '../utils/doorMap'; // has partition, door, inDirectionFloor
import { summaryPartitionGroup } from '../utils/partitionGroups';

// Flags
import austriaFlag    from '../assets/flags/austria.png';
import uaeFlag        from '../assets/flags/uae.png';
import irelandFlag    from '../assets/flags/ireland.png';
import italyFlag      from '../assets/flags/italy.png';
import lithuaniaFlag  from '../assets/flags/lithuania.png';
import moroccoFlag    from '../assets/flags/morocco.png';
import russiaFlag     from '../assets/flags/russia.png';
import ukFlag         from '../assets/flags/uk.png';
import spainFlag      from '../assets/flags/spain.png';

// Your EMEA partitions
const partitionList = [
  'AUT.Vienna','DU.Abu Dhab','IE.Dublin','IT.Rome',
  'LT.Vilnius','MA.Casablanca','RU.Moscow','UK.London','ES.Madrid'
];

// Display names
const displayName = {
  'AUT.Vienna':    'Vienna',
  'DU.Abu Dhab':   'Abu Dhabi',
  'IE.Dublin':     'Dublin',
  'IT.Rome':       'Rome',
  'LT.Vilnius':    'Vilnius',
  'MA.Casablanca': 'Casablanca',
  'RU.Moscow':     'Moscow',
  'UK.London':     'London',
  'ES.Madrid':     'Madrid'
};

// Flags per partition
const flagMap = {
  'AUT.Vienna':    austriaFlag,
  'DU.Abu Dhab':   uaeFlag,
  'IE.Dublin':     irelandFlag,
  'IT.Rome':       italyFlag,
  'LT.Vilnius':    lithuaniaFlag,
  'MA.Casablanca': moroccoFlag,
  'RU.Moscow':     russiaFlag,
  'UK.London':     ukFlag,
  'ES.Madrid':     spainFlag
};

// Colors per partition ([title, total, stat1, stat2])
const colorsMap = {
  'AUT.Vienna':    ['#FFD666','#fcf3cf','#2ecc71','#ec7063'],
  'DU.Abu Dhab':   ['#FFE599','#fcf3cf','#2ecc71','#ec7063'],
  'IE.Dublin':     ['#FFF2CC','#fcf3cf','#2ecc71','#ec7063'],
  'IT.Rome':       ['#FFD666','#fcf3cf','#2ecc71','#ec7063'],
  'LT.Vilnius':    ['#FFE599','#fcf3cf','#2ecc71','#ec7063'],
  'MA.Casablanca': ['#FFF2CC','#fcf3cf','#2ecc71','#ec7063'],
  'RU.Moscow':     ['#FFD666','#fcf3cf','#2ecc71','#ec7063'],
  'UK.London':     ['#FFE599','#fcf3cf','#2ecc71','#ec7063'],
  'ES.Madrid':     ['#FFC0CB','#fcf3cf','#2ecc71','#ec7063']
};

/**
 * Build a quick lookup for Vilnius doors → either "GAMA" or "Delta".
 * We ignore the floor here because chart is aggregated by building only.
 */
const vilniusDoorToBuilding = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  // update last‐updated timestamp
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // 1) Count GAMA vs Delta for Vilnius from raw swipe details
  const rawDetails = data?.details || [];
  const vilniusCounts = { GAMA: 0, Delta: 0 };
  rawDetails.forEach(r => {
    if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
      const b = vilniusDoorToBuilding[r.Door];
      if (b) vilniusCounts[b]++;
    }
  });

  // 2) Build the bar‐chart data
  const chartData = [
    { name: 'Vilnius Gama',  value: vilniusCounts.GAMA,  breakdown: {} },
    { name: 'Vilnius Delta', value: vilniusCounts.Delta, breakdown: {} }
  ];
  // then add each other site
  partitionList.forEach(site => {
    if (site === 'LT.Vilnius') return;
    const region = data?.realtime?.[site] || {};
    chartData.push({
      name: displayName[site],
      value: region.total || 0,
      breakdown: {
        Employees:   region.Employee || 0,
        Contractors: region.Contractor || 0
      }
    });
  });

  // 3) Prepare summary cards
  // today’s totals (global)
  const todayTot = data?.today.total    || 0;
  const todayEmp = data?.today.Employee || 0;
  const todayCon = data?.today.Contractor|| 0;
  // realtime totals (sum of all partitions)
  const realtimeTot = Object.values(data?.realtime || {})
    .reduce((sum,x) => sum + (x.total||0), 0);
  const realtimeEmp = Object.values(data?.realtime || {})
    .reduce((sum,x) => sum + (x.Employee||0), 0);
  const realtimeCon = Object.values(data?.realtime || {})
    .reduce((sum,x) => sum + (x.Contractor||0), 0);

  // build summaryItems: one "Vilnius" card (full totals) + other sites
  const summaryItems = [];
  // Vilnius
  const vilniusRegion = data?.realtime?.['LT.Vilnius'] || {};
  summaryItems.push({
    label: 'Vilnius',
    total: vilniusRegion.total  || 0,
    emp:   vilniusRegion.Employee || 0,
    cont:  vilniusRegion.Contractor|| 0,
    flag:  flagMap['LT.Vilnius'],
    colors: colorsMap['LT.Vilnius']
  });
  // others
  partitionList.forEach(site => {
    if (site === 'LT.Vilnius') return;
    const r = data?.realtime?.[site] || {};
    summaryItems.push({
      label: displayName[site],
      total: r.total      || 0,
      emp:   r.Employee   || 0,
      cont:  r.Contractor || 0,
      flag:  flagMap[site],
      colors: colorsMap[site]
    });
  });

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px:2, py:1 }}>

        {/* Top six global cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {[
            { title:"Today's Total Headcount",    value: todayTot,   icon:<GroupIcon sx={{color:'#E57373',fontSize:36}}/>,  border:'#FFD666' },
            { title:"Today's Employees Count",    value: todayEmp,   icon:<PeopleIcon sx={{color:'#81C784',fontSize:36}}/>,    border:'#81C784' },
            { title:"Today's Contractors Count",  value: todayCon,   icon:<BusinessCenterIcon sx={{color:'#64B5F6',fontSize:36}}/>, border:'#FFE599' },
            { title:"Realtime Headcount",         value: realtimeTot,icon:<TrackChangesIcon sx={{color:'#BA68C8',fontSize:36}}/>, border:'#FFF2CC' },
            { title:"Realtime Employees Count",   value: realtimeEmp,icon:<PeopleIcon sx={{color:'#FFB74D',fontSize:36}}/>,    border:'#FFD666' },
            { title:"Realtime Contractors Count", value: realtimeCon,icon:<BusinessCenterIcon sx={{color:'#4DB6AC',fontSize:36}}/>, border:'#FFE599' }
          ].map(c => (
            <Box key={c.title} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height:140, border:`2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Partition summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={4}>
          {loading
            ? <LoadingSpinner/>
            : summaryItems.map(item => {
                const [tc, totc, ec, cc] = item.colors;
                return (
                  <Box key={item.label} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
                    <SummaryCard
                      title={item.label}
                      total={item.total}
                      stats={[
                        { label:'Employees',   value:item.emp },
                        { label:'Contractors', value:item.cont }
                      ]}
                      icon={item.flag && (
                        <Box component="img"
                             src={item.flag}
                             alt={`${item.label} flag`}
                             sx={{ width:50, height:30, border:'1px solid #fff' }}/>
                      )}
                      titleColor={tc}
                      totalColor={totc}
                      statColors={[ec,cc]}
                      sx={{
                        height:160,
                        border:`2px solid ${tc}`,
                        '& .MuiTypography-subtitle1':{ fontSize:'1.3rem' },
                        '& .MuiTypography-h4':        { fontSize:'1.7rem' },
                        '& .MuiTypography-caption':   { fontSize:'0.875rem' }
                      }}
                    />
                  </Box>
                );
              })
          }
        </Box>

        {/* Live totals bar chart */}
        <Box p={2} sx={{ border:'2px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="h6">Live Totals by Site</Typography>
            <Typography variant="body2">Last updated: {lastUpdate}</Typography>
          </Box>
          {loading
            ? <Skeleton variant="rectangular" height={240}/>
            : <ChartCard
                data={chartData}
                dataKey="value"
                colors={{ head:'#FFC107', cap:'#B0BEC5' }}
                chartHeight={320}
              />
          }
        </Box>
      </Container>
      <Footer/>
    </>
  );
}










C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\components\ChartCard.jsx

import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer,
  CartesianGrid, Legend, Brush
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCard({
  data = [],
  dataKey = 'value',
  colors = { head: '#FFC107', cap: '#B0BEC5' },
  chartHeight = 300,
  title = ''
}) {
  // Hook must be called unconditionally
  const [hidden, setHidden] = useState({});

  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card>
        <CardContent>
          <Typography>No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const handleLegend = o => {
    const key = o.dataKey;
    setHidden(h => ({ ...h, [key]: !h[key] }));
  };

  return (
    <Card>
      <CardContent>
        {title && <Typography variant="h6" gutterBottom>{title}</Typography>}
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.8} />
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="name"
                tickFormatter={t =>
                  typeof t === 'number' ? dayjs(t).format('HH:mm:ss') : t
                }
              />
              <YAxis />
              <Tooltip />
              <Legend onClick={handleLegend} />
              <Area
                type="monotone"
                dataKey={dataKey}
                stroke={colors.head}
                fill="url(#colorHead)"
                hide={hidden[dataKey]}
              />
              <Brush dataKey="name" height={20} stroke={colors.head} />
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}

