"scripts": {
  "dev": "nodemon src/server.js",
  "start": "node src/server.js"
}





npm install --save-dev nodemon







node_modules
.env





npm install
npm run dev









require('dotenv').config();
const app = require('./app');

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});












const express = require('express');
const occupancyRoutes = require('./routes/occupancy.routes');

const app = express();
app.use(express.json());

// Health check
app.get('/', (req, res) => res.send('üåé LACA Occupancy API Running'));

// Routes
app.use('/api/occupancy', occupancyRoutes);

module.exports = app;













const express = require('express');
const router = express.Router();
const controller = require('../controllers/occupancy.controller');

// GET /api/occupancy/live
router.get('/live', controller.getLiveOccupancy);

// GET /api/occupancy/history/:location
router.get('/history/:location', controller.getHistoricalOccupancy);

module.exports = router;













const service = require('../services/occupancy.service');

exports.getLiveOccupancy = async (req, res) => {
  try {
    const data = await service.fetchLiveOccupancy();
    res.json({ success: true, count: data.length, data });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: 'Live occupancy fetch failed' });
  }
};

exports.getHistoricalOccupancy = async (req, res) => {
  const { location } = req.params;
  try {
    const data = await service.fetchHistoricalOccupancy(location);
    res.json({ success: true, count: data.length, data });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: 'Historical occupancy fetch failed' });
  }
};













const { poolPromise } = require('../config/db');

const partitionList = [
  'AR.Cordoba',
  'BR.Sao Paulo',
  'CR.Costa Rica Partition',
  'MX.Mexico City',
  'PA.Panama City',
  'PE.Lima'
];

exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;

  const query = `
    SELECT 
      DISTINCT [ObjectName1],
      t3.[Name] AS PersonnelType,
      CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
      END AS EmployeeID,
      t2.text5,
      t1.PartitionName2,
      t1.MessageType,
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) AS Date
    FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1
    INNER JOIN [ACVSCore].[Access].[Personnel] AS t2
      ON t1.ObjectIdentity1 = t2.GUID
    INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3
      ON t2.[PersonnelTypeId] = t3.[ObjectID]
    WHERE 
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) = CONVERT(DATE, GETDATE())
      AND t1.PartitionName2 IN (${partitionList.map(p => `'${p}'`).join(',')})
      AND t1.MessageType = 'CardAdmitted'
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};

exports.fetchHistoricalOccupancy = async (location) => {
  const pool = await poolPromise;

  const query = `
    SELECT 
      DISTINCT [ObjectName1],
      t3.[Name] AS PersonnelType,
      CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
      END AS EmployeeID,
      t2.text5,
      t1.PartitionName2,
      t1.MessageType,
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) AS Date
    FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1
    INNER JOIN [ACVSCore].[Access].[Personnel] AS t2
      ON t1.ObjectIdentity1 = t2.GUID
    INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3
      ON t2.[PersonnelTypeId] = t3.[ObjectID]
    WHERE 
      CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) >= DATEADD(DAY, -30, GETDATE())
      AND t1.PartitionName2 = @location
      AND t1.MessageType = 'CardAdmitted'
  `;

  const result = await pool.request()
    .input('location', location)
    .query(query);

  return result.recordset;
};













module.exports = {
  'AR.Cordoba': 'America/Argentina/Cordoba',
  'BR.Sao Paulo': 'America/Sao_Paulo',
  'CR.Costa Rica Partition': 'America/Costa_Rica',
  'MX.Mexico City': 'America/Mexico_City',
  'PA.Panama City': 'America/Panama',
  'PE.Lima': 'America/Lima'
};










const sql = require('mssql');
require('dotenv').config();

const dbConfig = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  server: process.env.DB_SERVER,
  database: process.env.DB_DATABASE,
  port: parseInt(process.env.DB_PORT, 10),
  options: {
    encrypt: true,
    trustServerCertificate: true
  },
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  }
};

const poolPromise = new sql.ConnectionPool(dbConfig)
  .connect()
  .then(pool => {
    console.log('‚úÖ MSSQL connected');
    return pool;
  })
  .catch(err => {
    console.error('‚ùå MSSQL connection failed', err);
  });

module.exports = {
  sql,
  poolPromise
};











# Database config
DB_USER=your_user
DB_PASSWORD=your_password
DB_SERVER=your_server
DB_DATABASE=ACVSUJournal_00010027
DB_PORT=1433

PORT=3001








# 1. Go to your Desktop and create the project folder
cd ~/Desktop
mkdir laca-occupancy-backend
cd laca-occupancy-backend

# 2. Initialize npm (this creates package.json)
npm init -y

# 3. Create the folder structure
mkdir -p src/config src/controllers src/routes src/services src/utils

# 4. Create all the files
touch \
  src/config/db.js \
  src/controllers/occupancy.controller.js \
  src/routes/occupancy.routes.js \
  src/services/occupancy.service.js \
  src/utils/timezones.js \
  src/app.js \
  src/server.js \
  .env \
  .gitignore \
  README.md



