// src/pages/PartitionDetail.jsx
import React, { useEffect, useState, useMemo } from "react";
import {
  AppBar,
  Toolbar,
  Container,
  Box,
  Typography,
  Button,
  Grid,
  CircularProgress,
  TextField,
  TableContainer,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  // State
  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  // 1) live, auto-refresh
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // 2) history once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then(json => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  // early loader
  if (!liveSummary || !history) return <LoadingSpinner />;

  // derive totals
  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || { total: 0, Employee: 0, Contractor: 0, TempBadge: 0, floors: {} };

  // group by floor
  const floorMap = useMemo(() => {
    const m = {};
    details.forEach(r => {
      m[r.floor] = m[r.floor] || [];
      m[r.floor].push(r);
    });
    return m;
  }, [details]);

  // apply search + sort by count desc
  const displayed = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return Object.entries(floorMap)
      .filter(([floor, emps]) => {
        if (!term) return true;
        if (floor.toLowerCase().includes(term)) return true;
        return emps.some(r =>
          r.ObjectName1.toLowerCase().includes(term) ||
          r.EmployeeID.toLowerCase().includes(term)
        );
      })
      .sort((a, b) => b[1].length - a[1].length);
  }, [floorMap, searchTerm]);

  return (
    <>
      <AppBar position="fixed">
        <Toolbar>
          <Header />
        </Toolbar>
      </AppBar>

      {/* main content */}
      <Box component="main" sx={{ pt: 8, pb: 4 }}>
        <Container maxWidth={false} disableGutters sx={{ px: "20px" }}>
          {/* Back + Title */}
          <Box display="flex" alignItems="center" mb={2}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
            <Typography variant="h6" sx={{ ml: 2 }}>
              {partition.replace("CR.Costa Rica Partition", "Costa Rica")}
            </Typography>
          </Box>

          {/* Summary */}
          <Box display="flex" gap={2} mb={4}>
            <SummaryCard
              title={`Today’s ${partition} Headcount`}
              total={historyLoading ? 0 : partToday.total}
              stats={[
                { label: "Employees", value: historyLoading ? <CircularProgress size={20}/> : partToday.Employee },
                { label: "Contractors", value: historyLoading ? <CircularProgress size={20}/> : partToday.Contractor },
                { label: "Temp Badge", value: historyLoading ? <CircularProgress size={20}/> : partToday.TempBadge },
              ]}
              sx={{ flex: 1, height: 180 }}
            />
            <SummaryCard
              title={`Live ${partition} Headcount`}
              total={live.total}
              stats={[
                { label: "Employees", value: live.Employee },
                { label: "Contractors", value: live.Contractor },
                { label: "Temp Badge", value: live.TempBadge },
              ]}
              sx={{ flex: 1, height: 180 }}
            />
          </Box>

          {/* Chart */}
          <Box mb={4}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6">Live Floor Counts</Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>
            <ChartCard
              title=""
              data={Object.entries(live.floors).map(([floor, cnt])=>({ name: floor.trim(), value: cnt }))}
              chartHeight={260}
            />
          </Box>

          {/* Floor Details + Search on same line */}
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">Floor Details</Typography>
            <TextField
              size="small"
              placeholder="Search floor / emp…"
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </Box>

          {/* 3 cards per row */}
          <Grid container spacing={2}>
            {displayed.map(([floor, emps]) => (
              <Grid key={floor} item xs={12} sm={6} md={4}>
                <Box sx={{ border: "1px solid #FFC107", borderRadius: 2, p: 2, height: "100%" }}>
                  <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                    {floor} (Total {emps.length})
                  </Typography>
                  <TableContainer component={Paper} variant="outlined" sx={{ mb: 1 }}>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          {["Emp ID","Name","Swipe Time","Type","Card #","Door"].map(h => (
                            <TableCell key={h} sx={{ fontWeight: "bold" }}>{h}</TableCell>
                          ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {emps.slice(0,20).map((r,i) => (
                          <TableRow key={`${r.PersonGUID}-${i}`}>
                            <TableCell>{r.EmployeeID}</TableCell>
                            <TableCell>{r.ObjectName1}</TableCell>
                            <TableCell>{new Date(r.LocaleMessageTime).toLocaleTimeString()}</TableCell>
                            <TableCell>{r.PersonnelType}</TableCell>
                            <TableCell>{r.CardNumber}</TableCell>
                            <TableCell>{r.Door}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                  {emps.length > 20 && (
                    <Button
                      size="small"
                      onClick={() => navigate(
                        `/partition/${encodeURIComponent(partition)}/floor/${encodeURIComponent(floor)}`
                      )}
                    >
                      See more…
                    </Button>
                  )}
                </Box>
              </Grid>
            ))}
          </Grid>
        </Container>
      </Box>

      <Footer />
    </>
  );
}






// src/pages/PartitionDetail.jsx
import React, { useEffect, useState, useMemo } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  Grid,
  CircularProgress,
  TextField,
  TableContainer,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  // State
  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  // Always declare hooks in same order
  // 1. Fetch live summary
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction)
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // 2. Fetch history once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then(json => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  // 3. group by floor
  const floorMap = useMemo(() => {
    const m = {};
    details.forEach(r => {
      if (!m[r.floor]) m[r.floor] = [];
      m[r.floor].push(r);
    });
    return m;
  }, [details]);

  // 4. filter by searchTerm
  const displayedFloors = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return Object.entries(floorMap).filter(([floor, emps]) => {
      if (!term) return true;
      if (floor.toLowerCase().includes(term)) return true;
      return emps.some(r =>
        r.ObjectName1.toLowerCase().includes(term) ||
        r.EmployeeID.toLowerCase().includes(term)
      );
    });
  }, [floorMap, searchTerm]);

  // early return while loading both
  if (!liveSummary || !history) {
    return <LoadingSpinner />;
  }

  // derive totals
  const lastDay = history.summaryByDate.slice(-1)[0];
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || { total:0, Employee:0, Contractor:0, TempBadge:0, floors:{} };

  return (
    <>
      <Header />
      {/* ensure content sits below AppBar */}
      <Box sx={{ mt: theme => theme.mixins.toolbar.minHeight }} />
      <Container maxWidth={false} disableGutters sx={{ px: 2, pb: 8 }}>
        {/* Back & Title */}
        <Box display="flex" alignItems="center" mb={2}>
          <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
          <Typography variant="h6" sx={{ ml: 2 }}>
            {partition.replace("CR.Costa Rica Partition","Costa Rica")}
          </Typography>
        </Box>

        {/* Summary */}
        <Box display="flex" gap={2} mb={4}>
          <SummaryCard
            title={`Today’s ${partition} Headcount`}
            total={historyLoading ? 0 : partToday.total}
            stats={[
              { label: "Employees", value: historyLoading ? <CircularProgress size={20}/> : partToday.Employee },
              { label: "Contractors", value: historyLoading ? <CircularProgress size={20}/> : partToday.Contractor },
              { label: "Temp Badge", value: historyLoading ? <CircularProgress size={20}/> : partToday.TempBadge },
            ]}
            sx={{ flex: 1, height: 180 }}
          />
          <SummaryCard
            title={`Live ${partition} Headcount`}
            total={live.total}
            stats={[
              { label: "Employees", value: live.Employee },
              { label: "Contractors", value: live.Contractor },
              { label: "Temp Badge", value: live.TempBadge },
            ]}
            sx={{ flex: 1, height: 180 }}
          />
        </Box>

        {/* Chart */}
        <Box mb={4}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
            <Typography variant="h6">Live Floor Counts</Typography>
            <Typography variant="body2" color="textSecondary">Last updated: {lastUpdate}</Typography>
          </Box>
          <ChartCard
            title=""
            data={Object.entries(live.floors).map(([floor, cnt])=>({ name:floor.trim(), value:cnt }))}
            chartHeight={260}
          />
        </Box>

        {/* Search */}
        <Box display="flex" justifyContent="flex-end" mb={2}>
          <TextField
            size="small"
            placeholder="Search floor / emp…"
            value={searchTerm}
            onChange={e=>setSearchTerm(e.target.value)}
          />
        </Box>

        {/* Floor Details */}
        <Typography variant="h6" gutterBottom>Floor Details</Typography>
        <Grid container spacing={2}>
          {displayedFloors.map(([floor, emps])=>(
            <Grid key={floor} item xs={12} sm={6} md={4}>
              <Box sx={{ border:'1px solid #FFC107', borderRadius:2, p:2, height:'100%' }}>
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor} (Total {emps.length})
                </Typography>
                <TableContainer component={Paper} variant="outlined" sx={{ mb:1 }}>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        {["Emp ID","Name","Swipe Time","Type","Card #","Door"].map(h=>(
                          <TableCell key={h} sx={{ fontWeight:'bold' }}>{h}</TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {emps.slice(0,20).map((r,i)=>(
                        <TableRow key={`${r.PersonGUID}-${i}`}>
                          <TableCell>{r.EmployeeID}</TableCell>
                          <TableCell>{r.ObjectName1}</TableCell>
                          <TableCell>{new Date(r.LocaleMessageTime).toLocaleTimeString()}</TableCell>
                          <TableCell>{r.PersonnelType}</TableCell>
                          <TableCell>{r.CardNumber}</TableCell>
                          <TableCell>{r.Door}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                {emps.length>20 && (
                  <Button
                    size="small"
                    onClick={()=>navigate(`/partition/${encodeURIComponent(partition)}/floor/${encodeURIComponent(floor)}`)}
                  >
                    See more…
                  </Button>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Container>
      <Footer />
    </>
  );
}







Read error carefully and soplve this error check all functions and give me updated files carefully
ERROR
Rendered more hooks than during the previous render.
    at updateWorkInProgressHook (http://localhost:3000/static/js/bundle.js:54645:15)
    at updateMemo (http://localhost:3000/static/js/bundle.js:55242:16)
    at Object.useMemo (http://localhost:3000/static/js/bundle.js:63680:16)
    at exports.useMemo (http://localhost:3000/static/js/bundle.js:80756:32)
    at PartitionDetail (http://localhost:3000/static/js/bundle.js:105839:66)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:64321:18)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:54531:20)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:56224:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:56810:16)
    at runWithFiberInDEV (http://localhost:3000/static/js/bundle.js:52302:68)



// src/pages/PartitionDetail.jsx
import React, { useEffect, useState, useMemo } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  Grid,
  CircularProgress,
  TextField,           // ← added
  TableContainer,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  // Live summary every second
  useEffect(() => {
    let timer;
    const loadLive = async () => {
      const json = await fetchLiveSummary();
      setLiveSummary(json);

      const det = json.details
        .filter(
          (r) => r.PartitionName2 === partition && r.Direction === "InDirection"
        )
        .map((r) => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction),
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    };
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // Historical (today's) headcount once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  // derive counts
  const lastDay = history.summaryByDate.slice(-1)[0];
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    TempBadge: 0,
    floors: {},
  };

  // group details by floor
  const floorMap = useMemo(() => {
    const m = {};
    details.forEach((r) => {
      if (!m[r.floor]) m[r.floor] = [];
      m[r.floor].push(r);
    });
    return m;
  }, [details]);

  // filter floors+employees by searchTerm
  const displayedFloors = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return Object.entries(floorMap).filter(([floor, emps]) => {
      if (!term) return true;
      if (floor.toLowerCase().includes(term)) return true;
      return emps.some(
        (r) =>
          r.ObjectName1.toLowerCase().includes(term) ||
          r.EmployeeID.toLowerCase().includes(term)
      );
    });
  }, [floorMap, searchTerm]);

  return (
    <>
      <Header />
      {/* push content below fixed AppBar */}
      <Box sx={{ mt: (theme) => theme.mixins.toolbar.minHeight }} />
      <Container maxWidth={false} disableGutters sx={{ px: 2, pb: 8 }}>
        {/* Back + Title */}
        <Box display="flex" alignItems="center" mb={2}>
          <Button size="small" onClick={() => navigate(-1)}>
            ← Back
          </Button>
          <Typography variant="h6" sx={{ ml: 2 }}>
            {partition.replace("CR.Costa Rica Partition", "Costa Rica")}
          </Typography>
        </Box>

        {/* Summary Cards */}
        <Box display="flex" gap={2} mb={4}>
          <SummaryCard
            title={`Today’s ${partition} Headcount`}
            total={historyLoading ? 0 : partToday.total}
            stats={[
              {
                label: "Employees",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
              },
              {
                label: "Contractors",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
              },
              {
                label: "Temp Badge",
                value: historyLoading ? <CircularProgress size={20} /> : partToday.TempBadge,
              },
            ]}
            sx={{ flex: 1, height: 180 }}
          />
          <SummaryCard
            title={`Live ${partition} Headcount`}
            total={live.total}
            stats={[
              { label: "Employees", value: live.Employee },
              { label: "Contractors", value: live.Contractor },
              { label: "Temp Badge", value: live.TempBadge },
            ]}
            sx={{ flex: 1, height: 180 }}
          />
        </Box>

        {/* Floor‐wise Chart */}
        <Box mb={4}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
            <Typography variant="h6">Live Floor Counts</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>
          <ChartCard
            title=""
            data={Object.entries(live.floors).map(([floor, cnt]) => ({
              name: floor.trim(),
              value: cnt,
            }))}
            chartHeight={260}
          />
        </Box>

        {/* Search */}
        <Box display="flex" justifyContent="flex-end" mb={2}>
          <TextField
            size="small"
            placeholder="Search floor / emp…"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </Box>

        {/* Floor Details: three per row on desktop */}
        <Typography variant="h6" gutterBottom>
          Floor Details
        </Typography>
        <Grid container spacing={2}>
          {displayedFloors.map(([floor, emps]) => (
            <Grid key={floor} item xs={12} sm={6} md={4}>
              <Box
                sx={{
                  border: "1px solid #FFC107",
                  borderRadius: 2,
                  p: 2,
                  height: "100%",
                }}
              >
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor} (Total {emps.length})
                </Typography>
                <TableContainer component={Paper} variant="outlined" sx={{ mb: 1 }}>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        {["Emp ID", "Name", "Swipe Time", "Type", "Card #", "Door"].map((h) => (
                          <TableCell key={h} sx={{ fontWeight: "bold" }}>
                            {h}
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {emps.slice(0, 20).map((r, i) => (
                        <TableRow key={`${r.PersonGUID}-${i}`}>
                          <TableCell>{r.EmployeeID}</TableCell>
                          <TableCell>{r.ObjectName1}</TableCell>
                          <TableCell>
                            {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                          </TableCell>
                          <TableCell>{r.PersonnelType}</TableCell>
                          <TableCell>{r.CardNumber}</TableCell>
                          <TableCell>{r.Door}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                {emps.length > 20 && (
                  <Button
                    size="small"
                    onClick={() =>
                      navigate(
                        `/partition/${encodeURIComponent(
                          partition
                        )}/floor/${encodeURIComponent(floor)}`
                      )
                    }
                  >
                    See more…
                  </Button>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Container>
      <Footer />
    </>
  );
}
