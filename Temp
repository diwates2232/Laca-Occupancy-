// src/pages/PartitionDetail.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Button,
  Grid,
  Link as MuiLink
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import Header from '../components/Header';
import Footer from '../components/Footer';

import {
  fetchLiveSummary,
  fetchHistory     // ← correct import
} from '../api/occupancy.service';


export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();
  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState('');

  // Load live‐summary every second
  useEffect(() => {
    let timer;
    const loadLive = async () => {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setDetails(
        json.details.filter(
          r => r.PartitionName2 === partition && r.Direction === 'InDirection'
        )
      );
      setLastUpdate(new Date().toLocaleTimeString());
    };
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);


  // Load historical (for today’s headcount)
  useEffect(() => {
    fetchHistory(partition).then(json => {
      setHistory(json);
    });
  }, [partition]);




  if (!liveSummary || !history) {
    return (
      <Box sx={{ p: 4, textAlign: 'center' }}>
        <Typography>Loading…</Typography>
      </Box>
    );
  }

  // Today's headcount from the last historical entry
  const last = history.summaryByDate.slice(-1)[0];
  const partToday = last.region;

  // Live headcount
  const live = liveSummary.realtime[partition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    TempBadge: 0,
    floors: {}
  };

  return (
    <>
      <Header />
      <Container
        maxWidth={false}
        disableGutters
        sx={{ px: '20px', pt: 2, pb: 4 }}
      >
        {/* Back Button & Title */}
        <Box display="flex" alignItems="center" mb={2}>
          <Button size="small" onClick={() => navigate(-1)}>
            ← Back
          </Button>
          <Typography variant="h6" sx={{ ml: 2 }}>
            {partition.replace('CR.Costa Rica Partition', 'Costa Rica')}
          </Typography>
        </Box>

        {/* Summary Cards */}
        <Box display="flex" alignItems="stretch" gap={2} mb={4}>
          <Box flex={1}>
            <SummaryCard
              title={`Today’s ${partition} Headcount`}
              total={partToday.total}
              stats={[
                { label: 'Employees', value: partToday.Employee },
                { label: 'Contractors', value: partToday.Contractor },
                { label: 'Temp Badge', value: partToday.TempBadge }
              ]}
              sx={{ height: 180 }}
            />
          </Box>
          <Box flex={1}>
            <SummaryCard
              title={`Live ${partition} Headcount`}
              total={live.total}
              stats={[
                { label: 'Employees', value: live.Employee },
                { label: 'Contractors', value: live.Contractor },
                { label: 'Temp Badge', value: live.TempBadge }
              ]}
              sx={{ height: 180 }}
            />
          </Box>
        </Box>

        {/* Floor‐wise Chart */}
        <Box mb={4}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
            <Typography variant="h6">Live Floor Counts</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>
          <ChartCard
            title=""
            data={Object.entries(live.floors).map(([floor, cnt]) => ({
              name: floor.trim(),
              value: cnt
            }))}
            chartHeight={260}
          />
        </Box>

        {/* Floor Details Boxes */}
        <Typography variant="h6" gutterBottom>
          Floor Details
        </Typography>
        <Grid container spacing={2}>
          {Object.entries(live.floors).map(([floor, cnt]) => (
            <Grid key={floor} item xs={12} md={6}>
              <Box
                sx={{
                  border: '1px solid #FFC107',
                  borderRadius: 2,
                  p: 2,
                  height: '100%'
                }}
              >
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor.trim()} (Total {cnt})
                </Typography>
                {details
                  .filter(r => {
                    // assume you have injected a `floor` field or lookupFloor logic
                    return r.floor === floor.trim();
                  })
                  .slice(0, 25)
                  .map(r => (
                    <Box
                      key={r.PersonGUID}
                      display="flex"
                      justifyContent="space-between"
                      sx={{ mb: 1, fontSize: '0.875rem' }}
                    >
                      <span>{r.ObjectName1}</span>
                      <span>{r.EmployeeID}</span>
                      <span>{new Date(r.LocaleMessageTime).toLocaleTimeString()}</span>
                      <span>{r.PersonnelType}</span>
                      <span>{r.CardNumber}</span>
                      <span>{r.Door}</span>
                    </Box>
                  ))}
                {cnt > 25 && (
                  <Button
                    size="small"
                    onClick={() =>
                      navigate(
                        `/partition/${encodeURIComponent(
                          partition
                        )}/floor/${encodeURIComponent(floor.trim())}`
                      )
                    }
                  >
                    See more…
                  </Button>
                )}
              </Box>
            </Grid>
          ))}
        </Grid>
      </Container>
      <Footer />
    </>
  );
}





// src/components/LoadingSpinner.jsx

import React from 'react';
import { CircularProgress, Box } from '@mui/material';

export default function LoadingSpinner() {
  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      height="100%"
    >
      <CircularProgress />
    </Box>
  );
}







// src/api/occupancy.service.js

// Point to your backend when no REACT_APP_API_BASE is set
const BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3001';

export async function fetchLiveSummary() {
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
  return res.json();
}

export async function fetchHistory(location) {
  const url = location
    ? `${BASE}/api/occupancy/history/${encodeURIComponent(location)}`
    : `${BASE}/api/occupancy/history`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  return res.json();
}





