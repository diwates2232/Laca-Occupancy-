const service = require('../services/occupancy.service');

/**
 * GET /api/occupancy/live-summary
 *   - Deduplicate by PersonGUID with the LAST swipe of today.
 */
exports.getLiveSummary = async (req, res) => {
  try {
    const swipes = await service.fetchLiveOccupancy();

    // 1. Dedupe: keep only the last swipe per PersonGUID
    const lastByPerson = {};
    swipes.forEach(rec => {
      const prev = lastByPerson[rec.PersonGUID];
      const curTime = new Date(rec.LocaleMessageTime).getTime();
      if (!prev || curTime > new Date(prev.LocaleMessageTime).getTime()) {
        lastByPerson[rec.PersonGUID] = rec;
      }
    });
    const present = Object.values(lastByPerson);

    // 2. Build summary
    const region = { total: 0, Employee: 0, Contractor: 0 };
    const partitions = {};
    present.forEach(r => {
      region.total++;
      if (r.PersonnelType === 'Employee') region.Employee++;
      else region.Contractor++;
      const p = r.PartitionName2;
      if (!partitions[p]) partitions[p] = { total:0, Employee:0, Contractor:0 };
      partitions[p].total++;
      if (r.PersonnelType==='Employee') partitions[p].Employee++;
      else partitions[p].Contractor++;
    });

    res.json({
      success: true,
      summary: {
        region: 'LACA',
        ...region,
        partitions
      },
      details: present
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success:false, message:'Live summary failed' });
  }
};


/**
 * GET /api/occupancy/history or /api/occupancy/history/:location
 *   - Last 7 days of data
 *   - Deduplicate by PersonGUID per date, taking the FIRST swipe of each day
 */
exports.getHistoricalOccupancy = async (req, res) => {
  const location = req.params.location || null;
  try {
    // 1. raw swipes (with SwipeDate as a Date string)
    const raw = await service.fetchHistoricalOccupancy(location);

    // 2. Group by date and dedupe per PersonGUID (first swipe)
    const byDate = raw.reduce((acc, rec) => {
      // normalize LocaleMessageTime to ISO string
      const iso = (rec.LocaleMessageTime instanceof Date)
        ? rec.LocaleMessageTime.toISOString()
        : rec.LocaleMessageTime;
      const date = iso.slice(0,10);
      // ensure map for this date
      acc[date] = acc[date] || { firstByPerson: {}, list: [] };
      const entry = acc[date];
      // if we haven't seen this GUID for this date, or this swipe is earlier
      if (!entry.firstByPerson[rec.PersonGUID] ||
          new Date(iso) < new Date(entry.firstByPerson[rec.PersonGUID].LocaleMessageTime)
      ) {
        entry.firstByPerson[rec.PersonGUID] = { ...rec, LocaleMessageTime: iso };
      }
      return acc;
    }, {});

    // 3. Build summaryByDate and collect details
    const summaryByDate = [];
    const details = [];
    Object.keys(byDate).sort().forEach(date => {
      const { firstByPerson } = byDate[date];
      const recs = Object.values(firstByPerson);
      // push into details
      details.push(...recs);

      // aggregate counts
      const regionCounts = { total:0, Employee:0, Contractor:0 };
      const partitionCounts = {};

      recs.forEach(r => {
        regionCounts.total++;
        if (r.PersonnelType === 'Employee') regionCounts.Employee++;
        else regionCounts.Contractor++;
        if (!location) {
          const p = r.PartitionName2;
          if (!partitionCounts[p]) partitionCounts[p] = { total:0, Employee:0, Contractor:0 };
          partitionCounts[p].total++;
          if (r.PersonnelType==='Employee') partitionCounts[p].Employee++;
          else partitionCounts[p].Contractor++;
        }
      });

      summaryByDate.push({
        date,
        day: new Date(date).toLocaleDateString('en-US', { weekday:'long' }),
        region: location
          ? { name: location, ...regionCounts }
          : { name: 'LACA', ...regionCounts },
        partitions: location ? undefined : partitionCounts
      });
    });

    res.json({
      success: true,
      summaryByDate,
      details
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success:false, message:'Historical fetch failed' });
  }
};











// src/controllers/occupancy.controller.js

exports.getHistoricalOccupancy = async (req, res) => {
  const location = req.params.location || null;
  try {
    // 1. fetch raw swipes with SwipeDate and LocaleMessageTime from your service
    const raw = await service.fetchHistoricalOccupancy(location);

    // 2. build a map: { dateString: { PersonGUID: firstRec, … }, … }
    const firstByPersonByDate = raw.reduce((acc, rec) => {
      // determine the calendar date key (YYYY-MM-DD) from SwipeDate
      const swipeDate = rec.SwipeDate instanceof Date
        ? rec.SwipeDate.toISOString().slice(0, 10)
        : rec.SwipeDate.slice(0, 10);

      // ensure the day's bucket exists
      if (!acc[swipeDate]) acc[swipeDate] = {};

      const personMap = acc[swipeDate];
      const prev = personMap[rec.PersonGUID];

      // choose the earlier swipe as “first”
      if (
        !prev ||
        new Date(rec.LocaleMessageTime) < new Date(prev.LocaleMessageTime)
      ) {
        personMap[rec.PersonGUID] = rec;
      }

      return acc;
    }, {});

    // 3. build summary and flatten details
    const summaryByDate = [];
    const allDetails = [];

    Object.keys(firstByPersonByDate)
      .sort()
      .forEach(date => {
        const personMap = firstByPersonByDate[date];
        const recs = Object.values(personMap);
        allDetails.push(...recs);

        // count totals
        const regionCounts = { total: 0, Employee: 0, Contractor: 0 };
        const partitionCounts = {};

        recs.forEach(r => {
          regionCounts.total++;
          if (r.PersonnelType === 'Employee') regionCounts.Employee++;
          else regionCounts.Contractor++;

          if (!location) {
            const p = r.PartitionName2;
            if (!partitionCounts[p]) {
              partitionCounts[p] = { total: 0, Employee: 0, Contractor: 0 };
            }
            partitionCounts[p].total++;
            if (r.PersonnelType === 'Employee')
              partitionCounts[p].Employee++;
            else partitionCounts[p].Contractor++;
          }
        });

        summaryByDate.push({
          date,
          day: new Date(date).toLocaleDateString('en-US', { weekday: 'long' }),
          region: location
            ? { name: location, ...regionCounts }
            : { name: 'LACA', ...regionCounts },
          partitions: location ? undefined : partitionCounts
        });
      });

    // 4. respond with deduplicated “first‐swipe” details
    res.json({
      success:     true,
      summaryByDate,
      details:     allDetails
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: 'Historical fetch failed' });
  }
};








1) as per below APi we are getting API Responce like this 

i think you are not removing duplicate for this this is our HeadCount History

and Expected result is like ...

http://localhost:3001/api/occupancy/history

{
  "success": true,
  "summaryByDate": [
    {
      "date": "2025-06-12",
      "day": "Thursday",
      "region": {
        "name": "LACA",
        "total": 15418,
        "Employee": 12984,
        "Contractor": 2434
      },
      "partitions": {
        "AR.Cordoba": {
          "total": 2724,
          "Employee": 1904,
          "Contractor": 820
        },
        "CR.Costa Rica Partition": {
          "total": 10382,
          "Employee": 9058,
          "Contractor": 1324
        },
        "MX.Mexico City": {
          "total": 1469,
          "Employee": 1289,
          "Contractor": 180
        },
        "BR.Sao Paulo": {
          "total": 246,
          "Employee": 203,
          "Contractor": 43
        },
        "PE.Lima": {
          "total": 503,
          "Employee": 445,
          "Contractor": 58
        },
        "PA.Panama City": {
          "total": 94,
          "Employee": 85,
          "Contractor": 9
        }
      }
    },

 ],
  "details": [
    {
      "LocaleMessageTime": "2025-06-12T00:00:12.000Z",
      "ObjectName1": "Andrada, Nestor",
      "Door": "LACA ARG 12TH Floor Terrace",
      "EmployeeID": "W0019098",
      "Text5": "Buenos Aires - Montevideo 825",
      "PartitionName2": "AR.Cordoba",
      "PersonGUID": "8487FA1B-FF05-46DD-ADA9-5FDF15B3663F",
      "PersonnelType": "Contractor",
      "CardNumber": "614137",
      "AdmitCode": "Admit",
      "Direction": "InDirection",
      "SwipeDate": "2025-06-12T00:00:00.000Z"
    },


 {
      "date": "2025-06-13",
      "day": "Friday",
      "region": {
        "name": "LACA",
        "total": 312,
        "Employee": 51,
        "Contractor": 261
      },
      "partitions": {
        "CR.Costa Rica Partition": {
          "total": 191,
          "Employee": 18,
          "Contractor": 173
        },
        "BR.Sao Paulo": {
          "total": 8,
          "Employee": 7,
          "Contractor": 1
        },
        "AR.Cordoba": {
          "total": 113,
          "Employee": 26,
          "Contractor": 87
        }
      }
    }
  ],
  "details": [



i wan exact result like this ,




2)this is our current APi responce For remove Duplicate personnnel Guid is our unique identity ,


http://localhost:3001/api/occupancy/history

{
  "success": true,
  "summaryByDate": [
    {
      "date": "2025-06-12",
      "day": "Thursday",
      "region": {
        "name": "LACA",
        "total": 15418,
        "Employee": 12984,
        "Contractor": 2434
      },
      "partitions": {
        "AR.Cordoba": {
          "total": 2724,
          "Employee": 1904,
          "Contractor": 820
        },
        "CR.Costa Rica Partition": {
          "total": 10382,
          "Employee": 9058,
          "Contractor": 1324
        },
        "MX.Mexico City": {
          "total": 1469,
          "Employee": 1289,
          "Contractor": 180
        },
        "BR.Sao Paulo": {
          "total": 246,
          "Employee": 203,
          "Contractor": 43
        },
        "PE.Lima": {
          "total": 503,
          "Employee": 445,
          "Contractor": 58
        },
        "PA.Panama City": {
          "total": 94,
          "Employee": 85,
          "Contractor": 9
        }
      }
    },
    {
      "date": "2025-06-13",
      "day": "Friday",
      "region": {
        "name": "LACA",
        "total": 312,
        "Employee": 51,
        "Contractor": 261
      },
      "partitions": {
        "CR.Costa Rica Partition": {
          "total": 191,
          "Employee": 18,
          "Contractor": 173
        },
        "BR.Sao Paulo": {
          "total": 8,
          "Employee": 7,
          "Contractor": 1
        },
        "AR.Cordoba": {
          "total": 113,
          "Employee": 26,
          "Contractor": 87
        }
      }
    }
  ],
  "details": [
    {
      "LocaleMessageTime": "2025-06-12T00:00:12.000Z",
      "ObjectName1": "Andrada, Nestor",
      "Door": "LACA ARG 12TH Floor Terrace",
      "EmployeeID": "W0019098",
      "Text5": "Buenos Aires - Montevideo 825",
      "PartitionName2": "AR.Cordoba",
      "PersonGUID": "8487FA1B-FF05-46DD-ADA9-5FDF15B3663F",
      "PersonnelType": "Contractor",
      "CardNumber": "614137",
      "AdmitCode": "Admit",
      "Direction": "InDirection",
      "SwipeDate": "2025-06-12T00:00:00.000Z"
    },
    {
      "LocaleMessageTime": "2025-06-12T00:00:13.000Z",
      "ObjectName1": "Parrales, Jorge",
      "Door": "LACA CR B3 3rd Floor Elevator Emergency Door",
      "EmployeeID": "W0020261",
      "Text5": "Santa Ana - Parque Empresarial",
      "PartitionName2": "CR.Costa Rica Partition",
      "PersonGUID": "A5D4AFCF-BF71-48E8-A387-693B20820960",
      "PersonnelType": "Contractor",
      "CardNumber": "612769",
      "AdmitCode": "Admit",
      "Direction": "OutDirection",
      "SwipeDate": "2025-06-12T00:00:00.000Z"
    },
    {
      "LocaleMessageTime": "2025-06-12T00:01:47.000Z",
      "ObjectName1": "Parrales, Jorge",
      "Door": "LACA CR B3 3RD Floor Emergency Door",
      "EmployeeID": "W0020261",
      "Text5": "Santa Ana - Parque Empresarial",
      "PartitionName2": "CR.Costa Rica Partition",
      "PersonGUID": "A5D4AFCF-BF71-48E8-A387-693B20820960",
      "PersonnelType": "Contractor",
      "CardNumber": "612769",
      "AdmitCode": "Admit",
      "Direction": "OutDirection",
      "SwipeDate": "2025-06-12T00:00:00.000Z"
    },
    {







imp---http://localhost:3001/api/occupancy/live-summary this api Gives us below Api Res[ponce 
Check time Zone Properly as per Location fetch continously data 
and Update live data ,
check strickly API Responce carefully,

breakdown API as like 
Today HeadCount and their breakdown as ..
for this use 1st swipe ofthe Employee for the Specific day.

and for Current headCount use last Swipe for the Employee 
as per door ,

build both diffrent api ,
if need to first Door Wise Floor partation we can define this data first 
as per my request strickly update my backend files carefully


3) http://localhost:3001/api/occupancy/live-summary   -- very very important API


{
  "success": true,
  "summary": {
    "region": "LACA",
    "total": 31,
    "Employee": 24,
    "Contractor": 7,
    "partitions": {
      "CR.Costa Rica Partition": {
        "total": 11,
        "Employee": 11,
        "Contractor": 0
      },
      "AR.Cordoba": {
        "total": 14,
        "Employee": 8,
        "Contractor": 6
      },
      "BR.Sao Paulo": {
        "total": 6,
        "Employee": 5,
        "Contractor": 1
      }
    }
  },
  "details": [
    {
      "LocaleMessageTime": "2025-06-13T04:00:39.000Z",
      "Dateonly": "2025-06-13",
      "Swipe_Time": "04:00:39",
      "EmployeeID": "307205",
      "PersonGUID": "D3E32B08-FBA5-4132-AFAA-0D52DF9135ED",
      "ObjectName1": "Vega, Manuel Francisco",
      "Door": "LACA CR F4 Main Lobby Door",
      "PersonnelType": "Employee",
      "CardNumber": "417610",
      "Text5": "Santa Ana - Parque Empresarial",
      "PartitionName2": "CR.Costa Rica Partition",
      "AdmitCode": "Admit",
      "Direction": "InDirection"
    },



