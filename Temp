// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
} from '@mui/material';

import GroupIcon from '@mui/icons-material/Group';
import TrackChangesIcon from '@mui/icons-material/TrackChanges';
import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

// Flags
import CostaRicaFlag  from '../assets/flags/costa-rica.png';
import ArgentinaFlag  from '../assets/flags/argentina.png';
import MexicoFlag     from '../assets/flags/mexico.png';
import PeruFlag       from '../assets/flags/peru.png';
import BrazilFlag     from '../assets/flags/brazil.png';
import PanamaFlag     from '../assets/flags/panama.png';

import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import seatCapacities from '../data/seatCapacities';

import PieChartCard         from '../components/PieChartCard';
import ColumnChartCard      from '../components/ColumnChartCard';
import BarChartCard         from '../components/BarChartCard';
import CompositeChartCard   from '../components/CompositeChartCard';
import LineChartCard        from '../components/LineChartCard';

const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba':               'Argentina',
  'MX.Mexico City':           'Mexico',
  'PE.Lima':                  'Peru',
  'BR.Sao Paulo':             'Brazil',
  'PA.Panama City':           'Panama'
};

// which widget each partition uses
const widgetMap = {
  'CR.Costa Rica Partition': 'composite',
  'AR.Cordoba':               'line',
  'BR.Sao Paulo':             'pie',
  'MX.Mexico City':           'pie',
  'PE.Lima':                  'pie',
  'PA.Panama City':           'pie',
};

// Western Union theme colors
const wuPalette = {
  gold:   '#FFC107',
  black:  '#000000',
  accent: '#E57373',
};

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) {
      setLastUpdate(new Date().toLocaleTimeString());
    }
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build partition array
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p   = key ? regions[key] : {};
      return {
        name,
        total:     p.total        || 0,
        Employee:  p.Employee     || 0,
        Contractor:p.Contractor   || 0,
        TempBadge: p.TempBadge    || 0,
        floors:    p.floors       || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Today & realtime totals
  const todayTot    = data?.today?.total    ?? 0;
  const todayEmp    = data?.today?.Employee ?? 0;
  const todayCont   = data?.today?.Contractor ?? 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont= partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt:1, pb:2, px:'20px' }}>
        {/* Summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            { title: "Today's Total Headcount",   value: todayTot,    icon:<GroupIcon sx={{color:wuPalette.accent,fontSize:36}}/>,  border:wuPalette.gold },
            { title: "Today's Employees Count",   value: todayEmp,    icon:<PeopleIcon sx={{color:'#81C784',fontSize:36}}/>,       border:'#81C784'    },
            { title: "Today's Contractors Count", value: todayCont,   icon:<BusinessCenterIcon sx={{color:'#64B5F6',fontSize:36}}/>, border:'#FFE599'    },
            { title: "Realtime Headcount",        value: realtimeTot, icon:<TrackChangesIcon sx={{color:'#BA68C8',fontSize:36}}/>, border:'#FFF2CC'    },
            { title: "Realtime Employees Count",  value: realtimeEmp, icon:<PeopleIcon sx={{color:'#FFB74D',fontSize:36}}/>,       border:wuPalette.gold },
            { title: "Realtime Contractors Count",value: realtimeCont,icon:<BusinessCenterIcon sx={{color:'#4DB6AC',fontSize:36}}/>,border:'#FFE599' }
          ].map(card => (
            <Box key={card.title} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={card.title}
                total={card.value}
                stats={[]}
                icon={card.icon}
                sx={{ height: 140, border:`1px solid ${card.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Partition summary cards */}
        <Box mt={4} display="flex" flexWrap="wrap" gap={1}>
          {loading
            ? <Skeleton variant="rectangular" width="100vw%" height={200}/>
            : partitions.map(p => {
                const flagMap = {
                  'CR.Costa Rica Partition': CostaRicaFlag,
                  'AR.Cordoba':               ArgentinaFlag,
                  'MX.Mexico City':           MexicoFlag,
                  'PE.Lima':                  PeruFlag,
                  'BR.Sao Paulo':             BrazilFlag,
                  'PA.Panama City':           PanamaFlag,
                };
                const flag = flagMap[p.name];
                const titleColor = wuPalette.gold;

                return (
                  <Box key={p.name} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
                    <SummaryCard
                      title={displayNameMap[p.name] || p.name.split('.').pop()}
                      icon={ flag && <Box component="img" src={flag} alt="" sx={{width:50,height:30}}/> }
                      total={p.total}
                      stats={[
                        { label: 'Employees',   value: p.Employee },
                        { label: 'Contractors', value: p.Contractor },
                        ...(p.TempBadge ? [{ label:'Temp Badge', value:p.TempBadge }] : [])
                      ]}
                      titleColor={titleColor}
                      totalColor={titleColor}
                      statColors={[ titleColor, titleColor, titleColor ]}
                      sx={{
                        border:`1px solid ${titleColor}`,
                        '& .MuiTypography-subtitle1':{fontSize:'1.3rem'},
                        '& .MuiTypography-h4':{fontSize:'1.7rem'},
                        '& .MuiTypography-caption':{fontSize:'0.875rem'}
                      }}
                    />
                  </Box>
                );
              })
          }
        </Box>

        {/* Partition detail widgets */}
        <Box mt={4} display="flex" flexWrap="wrap" gap={1} justifyContent="space-between">
          {loading
            ? <Skeleton variant="rectangular" width="100%" height={240}/>
            : partitions.map(p => {
                const key   = p.name;
                const title = displayNameMap[key] || key.split('.').pop();
                const floors= Object.entries(p.floors || {});

                // build per-floor array
                const floorData = floors.map(([floor, cnt]) => ({
                  name:     floor.trim(),
                  headcount:cnt,
                  capacity: seatCapacities[`${title}-${floor.trim()}`] || 0
                }));

                switch (widgetMap[key]) {
                  case 'composite':
                    return (
                      <CompositeChartCard
                        key={key}
                        title={title}
                        data={floorData}
                      />
                    );
                  case 'line':
                    return (
                      <LineChartCard
                        key={key}
                        title={title}
                        data={floorData}
                      />
                    );
                  case 'pie':
                  default:
                    return (
                      <PieChartCard
                        key={key}
                        title={title}
                        value={p.total}
                        capacity={seatCapacities[title] || 0}
                      />
                    );
                }
              })
          }
        </Box>

      </Container>

      <Footer />
    </>
  );
}



I have Updte remenaning files just Update this file as per above code 

// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';

import GroupIcon from '@mui/icons-material/Group';         // Replaces TodayIcon
import TrackChangesIcon from '@mui/icons-material/TrackChanges'; // Replaces SyncIcon


import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

// Flags
import CostaRicaFlag  from '../assets/flags/costa-rica.png';
import ArgentinaFlag  from '../assets/flags/argentina.png';
import MexicoFlag     from '../assets/flags/mexico.png';
import PeruFlag       from '../assets/flags/peru.png';
import BrazilFlag     from '../assets/flags/brazil.png';
import PanamaFlag     from '../assets/flags/panama.png';


import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import seatCapacities from '../data/seatCapacities';
import PieChartCard    from '../components/PieChartCard';
import ColumnChartCard from '../components/ColumnChartCard';
import BarChartCard    from '../components/BarChartCard';
import CompositeChartCard from '../components/CompositeChartCard';
import LineChartCard      from '../components/LineChartCard';
 


const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba':               'Argentina',
  'MX.Mexico City':           'Mexico',
  'PE.Lima':                  'Peru',
  'BR.Sao Paulo':             'Brazil',
  'PA.Panama City':           'Panama'
};

const colorsMap = {
  'CR.Costa Rica Partition': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063', '#ec7063'],
  'AR.Cordoba':               ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MX.Mexico City':           ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PE.Lima':                  ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'BR.Sao Paulo':             ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PA.Panama City':           ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
};


const chartTypeMap = {
  

'CR.Costa Rica Partition': 'composite',
   'AR.Cordoba':               'line',
   'BR.Sao Paulo':             'pie',
   'MX.Mexico City':           'pie',
   'PE.Lima':                  'pie',
   'PA.Panama City':           'pie',
 };


// your WU brand palette:
const wuPalette = {
  primary:   '#FFC107',  // WU gold
  secondary: '#000000',  // WU black
  accent:    '#E57373',  // red accent
};



export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build and sort partitions
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 1,
          pb: 2,
          px: '20px',        // ← exactly 20px padding both sides
        }}
      >

        {/* Top six summary cards */}
     <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
  {[
    {
      title: "Today's Total Headcount",
      value: todayTot,
      icon: <GroupIcon sx={{ color: '#E57373', fontSize: 36 }} />,
      borderColor: '#FFD666',
    },
    {
      title: "Today's Employees Count",
      value: todayEmp,
      icon: <PeopleIcon sx={{ color: '#81C784', fontSize: 36 }} />,
      borderColor: '#81C784', 
    },
    {
      title: "Today's Contractors Count",
      value: todayCont,
      icon: <BusinessCenterIcon sx={{ color: '#64B5F6', fontSize: 36 }} />,
      borderColor: '#FFE599',
      
    },
    {
      title: "Realtime Headcount",
      value: realtimeTot,
      icon: <TrackChangesIcon sx={{ color: '#BA68C8', fontSize: 36 }} />,
      borderColor: '#FFF2CC',
    },
    {
      title: "Realtime Employees Count",
      value: realtimeEmp,
      icon: <PeopleIcon sx={{ color: '#FFB74D', fontSize: 36 }} />,
      borderColor: '#FFD666',
    },
    {
      title: "Realtime Contractors Count",
      value: realtimeCont,
      icon: <BusinessCenterIcon sx={{ color:  '#4DB6AC', fontSize: 36 }} />,
      borderColor: '#FFE599'
    }
 

    ].map(card => (
     <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
       <SummaryCard
         title={card.title}
         total={card.value}
         stats={[]}
         icon={card.icon}
         sx={{
           height: 140,
           border: `1px solid ${card.borderColor}`
         }}
       />
     </Box>
   ))}
 </Box> 

        {/* Partition cards */}
        <Box mt={4} sx={{ width: '100vw%', display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {loading ? (
            <Skeleton variant="rectangular" width="100vw%" height={200} />
          ) : (
                        (() => {
              // map of flags and primary colors for each partition
              const flagMap = {
                'CR.Costa Rica Partition': CostaRicaFlag,
                'AR.Cordoba':               ArgentinaFlag,
                'MX.Mexico City':           MexicoFlag,
                'PE.Lima':                  PeruFlag,
                'BR.Sao Paulo':             BrazilFlag,
                'PA.Panama City':           PanamaFlag,
              };


              // full palette arrays per flag: [title, total, stat1, stat2, stat3?]
              const colorsMap = {
                'CR.Costa Rica Partition': [
                  '#FFD666', // title (red)
                  '#fcf3cf', // total (blue)
                  '#2ecc71', // Employees (white)
                  '#ec7063', // Contractors (blue)
                  '#ec7063'  // TempBadge (white)
                ],
               'AR.Cordoba': [
                   '#FFE599', // title (light blue)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (sun yellow)
                  '#ec7063',  // Contractors (white)
                ],
                'MX.Mexico City': [
                   '#FFD666', // title (green)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (red)
                  '#ec7063',  // Contractors (white)
                ],
                'PE.Lima': [
                  '#FFF2CC', // title (red)
                  '#fcf3cf', // total (white)
                  '#2ecc71',// Employees (red)
                  '#ec7063',  // Contractors (white)
                ],
                'BR.Sao Paulo': [
                  '#FFD666', // title (green)
                  '#fcf3cf', // total (yellow)
                  '#2ecc71', // Employees (blue)
                  '#ec7063', // Contractors (yellow)
                ],
                'PA.Panama City': [
                  '#FFE599', // title (blue)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (red)
                  '#ec7063', // Contractors (white)
                ]
              };

              return partitions.map(p => {
  

                const flagSrc = flagMap[p.name] || '';
                const colors = colorsMap[p.name] || ['#FFC107', '#FFC107'];
                const [ titleC, totalC, ...statCs ] = colors;


                return (
                  <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                    <SummaryCard
                      // title={p.name}
                      title={displayNameMap[p.name] || p.name.replace(' Partition','')}
                    
                      icon={
                        flagSrc && (
                          <Box
                            component="img"
                            src={flagSrc}
                            alt={`${p.name} flag`}
                            sx={{
                              width: 50,
                              height: 30,
                              border: '1px solid #fff'  // 1px border
                            }}
                          />
                        )
                      }


                      total={p.total}
                      stats={[
                        { label: 'Employees',   value: p.Employee },
                        { label: 'Contractors', value: p.Contractor },
                        ...(p.name === 'CR.Costa Rica Partition'
                          ? [{ label: 'Temp Badge', value: p.TempBadge }]
                          : [])
                      ]}

                      // pass our new color props
                      titleColor={titleC}
                      totalColor={totalC}
                      statColors={statCs}


                    sx={{
                        width: '100vw%',
                    
                           border: `1px solid ${titleC}`,

       // typography overrides:
       '& .MuiTypography-subtitle1': {
         fontSize: '1.3rem'          // partition title
       },
       '& .MuiTypography-h4': {
         fontSize: '1.7rem'        // partition total
       },
       '& .MuiTypography-caption': {
         fontSize: '0.875rem'      // partition stats labels/values
       }

                      }}
                    />
                  </Box>
                );
              });
            })()
           )}
         </Box>

          
<Box mt={4} display="flex" flexWrap="wrap" gap={1} justifyContent="space-between">
  {loading
    ? <Skeleton variant="rectangular" width="100%" height={220} />
    : partitions.map(p => {
        const key       = p.name;
        const title     = displayNameMap[key] || key.split('.').pop();
        const type      = chartTypeMap[key] || 'bar';
        // prepare a simple data array: two slices or bars
        const chartData = [
          { name: 'Employees',   value: p.Employee },
          { name: 'Contractors', value: p.Contractor },
          ...(p.TempBadge ? [{ name: 'TempBadge', value: p.TempBadge }] : [])
        ];
        switch (type) {
          case 'pie':
            return (
              <PieChartCard
                key={key}
                title={title}
                data={chartData}
                colors={[ wuPalette.primary, wuPalette.accent, wuPalette.secondary ]}
              />
            );
          case 'column':
            return (
              <ColumnChartCard
                key={key}
                title={title}
                data={chartData}
                barColor={wuPalette.primary}
              />
            );
          case 'bar':
          default:
            return (
              <BarChartCard
                key={key}
                title={title}
                data={chartData}
                barColor={wuPalette.primary}
              />
            );
        }
      })
  }
</Box>


      </Container>

      <footer style={{
        backgroundColor: '#000000',
        color: '#FFC107',
        padding: '1.5rem 0',
        textAlign: 'center',
        marginTop: 0,
        borderTop: '2px solid #FFC107',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div><strong>Global Security Operations Center</strong><br/>
          Live HeadCount against Occupancy dashboard for Western Union — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
             style={{ color: '#FFC107', textDecoration: 'underline' }}>
            GSOC Mail
          </a>&nbsp;|&nbsp;
          Landline:&nbsp;<span style={{ color: '#FFC107' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}
