// src/pages/PartitionDetailDetails.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container, Box, Typography, Button, TextField,
  TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody
} from '@mui/material';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import DataTable      from '../components/DataTable';
import { fetchLiveSummary } from '../api/occupancy.service';
import { lookupFloor }      from '../utils/floorLookup';

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLast] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFloor, setExpandedFloor] = useState(null);

  useEffect(() => {
    let mounted = true;
    async function load() {
      const json = await fetchLiveSummary();
      if (!mounted) return;
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction==='InDirection')
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLast(new Date().toLocaleTimeString());
      setLoading(false);
    }
    load();
    const iv = setInterval(load, 1000);
    return () => { mounted = false; clearInterval(iv); };
  }, [partition]);

  const floorMap = useMemo(() => {
    return details.reduce((map,r)=>{
      map[r.floor] = map[r.floor]||[];
      map[r.floor].push(r);
      return map;
    },{});
  }, [details]);

  const displayed = useMemo(() => {
    const term = searchTerm.toLowerCase();
    return Object.entries(floorMap)
      .filter(([floor,emps]) =>
        !term ||
        floor.toLowerCase().includes(term) ||
        emps.some(e=> e.ObjectName1.toLowerCase().includes(term) || e.EmployeeID.includes(term))
      )
      .sort((a,b)=>b[1].length - a[1].length);
  }, [floorMap, searchTerm]);

  const columns = [
    { field:'EmployeeID', headerName:'Emp ID' },
    { field:'ObjectName1', headerName:'Name' },
    { field:'LocaleMessageTime', headerName:'Swipe Time' },
    { field:'PersonnelType', headerName:'Type' },
    { field:'CardNumber', headerName:'Card' },
    { field:'Door', headerName:'Door' }
  ];

  if (loading) {
    return <>
      <Header/><Box sx={{ p:4 }}><LoadingSpinner/></Box><Footer/>
    </>;
  }

  return (
    <>
      <Header/>
      <Container maxWidth={false} disableGutters sx={{ px:'20px', pt:1, pb:4 }}>
        <Box mb={2}>
          <Button size="small" onClick={()=>navigate(-1)}>← Back to Overview</Button>
        </Box>
        <Box display="flex" alignItems="center" gap={2} mb={2}>
          <Typography variant="h6" sx={{ flexGrow:1 }}>Floor Details</Typography>
          <Typography variant="body2" color="textSecondary">Last updated: {lastUpdate}</Typography>
          <TextField
            size="small"
            placeholder="Search floor / emp…"
            value={searchTerm}
            onChange={e=>setSearchTerm(e.target.value)}
          />
        </Box>

        {/* Floor cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {displayed.map(([floor,emps])=>(
            <Box key={floor} sx={{ width:'50%', p:1 }}>
              <Paper sx={{ border:'2px solid #FFC107', p:2 }}>
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor} (Total {emps.length})
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        {columns.map(c=>(
                          <TableCell key={c.field} sx={{ fontWeight:'bold', py:0.5 }}>
                            {c.headerName}
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {emps.slice(0,10).map((r,i)=>{
                        const match = searchTerm &&
                          (r.ObjectName1.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           r.EmployeeID.includes(searchTerm));
                        return (
                          <TableRow key={`${r.PersonGUID}-${i}`}
                                    sx={match?{backgroundColor:'rgba(255,235,59,0.3)'}:{}}>
                            <TableCell sx={{py:0.5}}>{r.EmployeeID}</TableCell>
                            <TableCell sx={{py:0.5}}>{r.ObjectName1}</TableCell>
                            <TableCell sx={{py:0.5}}>
                              {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                            </TableCell>
                            <TableCell sx={{py:0.5}}>{r.PersonnelType}</TableCell>
                            <TableCell sx={{py:0.5}}>{r.CardNumber}</TableCell>
                            <TableCell sx={{py:0.5}}>{r.Door}</TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </TableContainer>
                <Box textAlign="right" mt={1}>
                  <Button
                    size="small"
                    onClick={()=>setExpandedFloor(expandedFloor===floor?null:floor)}
                  >
                    {expandedFloor===floor?'Hide':'See more…'}
                  </Button>
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>

        {/* Expanded full table */}
        {expandedFloor && (
          <Box sx={{ px:'20px', mt:2 }}>
            <Typography variant="h6" gutterBottom>
              {expandedFloor} — All Entries
            </Typography>
            <DataTable
              columns={columns}
              rows={floorMap[expandedFloor].map(r=>({
                ...r,
                LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
              }))}
            />
          </Box>
        )}
      </Container>
      <Footer/>
    </>
  );
}














// src/pages/PartitionDetail.jsx

import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Container, Box, Typography, Button } from '@mui/material';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import SummaryCard    from '../components/SummaryCard';
import ChartCard      from '../components/ChartCard';
import LoadingSpinner from '../components/LoadingSpinner';

import GroupIcon          from '@mui/icons-material/Group';
import TrackChangesIcon   from '@mui/icons-material/TrackChanges';
import PeopleIcon         from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import { fetchLiveSummary, fetchHistory } from '../api/occupancy.service';
import doorMapRaw       from '../utils/doorMap';

// quick lookup: Vilnius door → "GAMA" or "Delta"
const vilniusDoorToBuilding = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [live, setLive]       = useState(null);
  const [history, setHistory] = useState(null);
  const [lastUpdate, setLast] = useState('');
  const [loading, setLoading] = useState(true);

  // Poll live summary
  useEffect(() => {
    let mounted = true;
    async function load() {
      const js = await fetchLiveSummary();
      if (!mounted) return;
      setLive(js);
      setLast(new Date().toLocaleTimeString());
      setLoading(false);
    }
    load();
    const iv = setInterval(load, 1000);
    return () => {
      mounted = false;
      clearInterval(iv);
    };
  }, [partition]);

  // Fetch history once
  useEffect(() => {
    fetchHistory(partition).then(js => setHistory(js));
  }, [partition]);

  if (!live || !history) return <LoadingSpinner/>;

  // For Vilnius, count GAMA vs Delta from raw details:
  let vilniusCounts = { GAMA: 0, Delta: 0 };
  if (partition === 'LT.Vilnius') {
    (live.details || []).forEach(r => {
      if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
        const b = vilniusDoorToBuilding[r.Door];
        if (b) vilniusCounts[b]++;
      }
    });
  }

  // Prepare summary cards
  const today = history.summaryByDate.at(-1).region;
  const siteLive = live.realtime[partition] || { total:0, Employee:0, Contractor:0, floors:{} };

  // Top‐level summary items
  const topItems = [
    { title: 'Today Total',      value: today.total,      icon:<GroupIcon/>,         border:'#FFD666' },
    { title: 'Today Employees',  value: today.Employee,   icon:<PeopleIcon/>,        border:'#81C784' },
    { title: 'Today Contractors',value: today.Contractor, icon:<BusinessCenterIcon/>,border:'#FFE599' },
    { title: 'RT Total',         value: siteLive.total,   icon:<TrackChangesIcon/>,  border:'#FFF2CC' },
    { title: 'RT Employees',     value: siteLive.Employee,icon:<PeopleIcon/>,        border:'#FFD666' },
    { title: 'RT Contractors',   value: siteLive.Contractor,icon:<BusinessCenterIcon/>,border:'#FFE599' },
  ];

  // If Vilnius, override summary to show GAMA/Delta instead of the last three:
  const summaryCards = partition === 'LT.Vilnius'
    ? [
        // keep first three (today’s metrics)
        ...topItems.slice(0,3),
        // then GAMA & Delta in real time
        {
          title: 'Vilnius GAMA',
          value: vilniusCounts.GAMA,
          icon: <TrackChangesIcon/>,
          border: '#FFE599'
        },
        {
          title: 'Vilnius Delta',
          value: vilniusCounts.Delta,
          icon: <TrackChangesIcon/>,
          border: '#FFD666'
        }
      ]
    : topItems;

  // Chart data: floors for non‐Vilnius, or GAMA/Delta bars for Vilnius
  const chartData = partition === 'LT.Vilnius'
    ? [
        { name:'Vilnius GAMA',  value: vilniusCounts.GAMA,  breakdown:{} },
        { name:'Vilnius Delta', value: vilniusCounts.Delta, breakdown:{} }
      ]
    : Object.entries(siteLive.floors).map(([floor,cnt])=>({
        name: floor,
        value: cnt
      }));

  return (
    <>
      <Header/>
      <Container maxWidth={false} disableGutters sx={{ px:2, py:1 }}>

        {/* Summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {summaryCards.map(c=>(
            <Box key={c.title} sx={{ flex:'1 1 30%', minWidth:180 }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height:100, border:`1px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Chart: either GAMA/Delta or floor counts */}
        <Box p={2} sx={{ border:'1px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="h6">
              {partition==='LT.Vilnius' ? 'Vilnius Live Split' : 'Live Floor Counts'}
            </Typography>
            <Typography variant="body2">Last updated: {lastUpdate}</Typography>
          </Box>

          {partition === 'LT.Vilnius'
            ? <ChartCard
                data={chartData}
                dataKey="value"
                colors={{ head:'#FFC107', cap:'#B0BEC5' }}
                chartHeight={300}
              />
            : <ChartCard
                data={chartData}
                dataKey="value"
                chartHeight={300}
              />
          }

          {partition !== 'LT.Vilnius' && (
            <Box textAlign="right" mt={1}>
              <Button onClick={()=>navigate(`/partition/${encodeURIComponent(partition)}/details`)}>
                See Details
              </Button>
            </Box>
          )}
        </Box>
      </Container>
      <Footer/>
    </>
  );
}






// src/pages/PartitionDetailDetails.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container, Box, Typography, Button, TextField,
  TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody
} from '@mui/material';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import DataTable      from '../components/DataTable';
import { fetchLiveSummary } from '../api/occupancy.service';
import { lookupFloor }      from '../utils/floorLookup';

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLast] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFloor, setExpandedFloor] = useState(null);

  useEffect(() => {
    let mounted = true;
    async function load() {
      const json = await fetchLiveSummary();
      if (!mounted) return;
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction==='InDirection')
        .map(r => ({ ...r, floor: lookupFloor(r.PartitionName2, r.Door, r.Direction) }));
      setDetails(det);
      setLast(new Date().toLocaleTimeString());
      setLoading(false);
    }
    load();
    const iv = setInterval(load, 1000);
    return () => { mounted = false; clearInterval(iv); };
  }, [partition]);

  const floorMap = useMemo(() => {
    return details.reduce((map,r)=>{
      map[r.floor] = map[r.floor]||[];
      map[r.floor].push(r);
      return map;
    },{});
  }, [details]);

  const displayed = useMemo(() => {
    const term = searchTerm.toLowerCase();
    return Object.entries(floorMap)
      .filter(([floor,emps]) =>
        !term ||
        floor.toLowerCase().includes(term) ||
        emps.some(e=> e.ObjectName1.toLowerCase().includes(term) || e.EmployeeID.includes(term))
      )
      .sort((a,b)=>b[1].length - a[1].length);
  }, [floorMap, searchTerm]);

  const columns = [
    { field:'EmployeeID', headerName:'Emp ID' },
    { field:'ObjectName1', headerName:'Name' },
    { field:'LocaleMessageTime', headerName:'Swipe Time' },
    { field:'PersonnelType', headerName:'Type' },
    { field:'CardNumber', headerName:'Card' },
    { field:'Door', headerName:'Door' }
  ];

  if (loading) {
    return <>
      <Header/><Box sx={{ p:4 }}><LoadingSpinner/></Box><Footer/>
    </>;
  }

  return (
    <>
      <Header/>
      <Container maxWidth={false} disableGutters sx={{ px:'20px', pt:1, pb:4 }}>
        <Box mb={2}>
          <Button size="small" onClick={()=>navigate(-1)}>← Back to Overview</Button>
        </Box>
        <Box display="flex" alignItems="center" gap={2} mb={2}>
          <Typography variant="h6" sx={{ flexGrow:1 }}>Floor Details</Typography>
          <Typography variant="body2" color="textSecondary">Last updated: {lastUpdate}</Typography>
          <TextField
            size="small"
            placeholder="Search floor / emp…"
            value={searchTerm}
            onChange={e=>setSearchTerm(e.target.value)}
          />
        </Box>

        {/* Floor cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {displayed.map(([floor,emps])=>(
            <Box key={floor} sx={{ width:'50%', p:1 }}>
              <Paper sx={{ border:'2px solid #FFC107', p:2 }}>
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor} (Total {emps.length})
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        {columns.map(c=>(
                          <TableCell key={c.field} sx={{ fontWeight:'bold', py:0.5 }}>
                            {c.headerName}
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {emps.slice(0,10).map((r,i)=>{
                        const match = searchTerm &&
                          (r.ObjectName1.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           r.EmployeeID.includes(searchTerm));
                        return (
                          <TableRow key={`${r.PersonGUID}-${i}`}
                                    sx={match?{backgroundColor:'rgba(255,235,59,0.3)'}:{}}>
                            <TableCell sx={{py:0.5}}>{r.EmployeeID}</TableCell>
                            <TableCell sx={{py:0.5}}>{r.ObjectName1}</TableCell>
                            <TableCell sx={{py:0.5}}>
                              {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                            </TableCell>
                            <TableCell sx={{py:0.5}}>{r.PersonnelType}</TableCell>
                            <TableCell sx={{py:0.5}}>{r.CardNumber}</TableCell>
                            <TableCell sx={{py:0.5}}>{r.Door}</TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </TableContainer>
                <Box textAlign="right" mt={1}>
                  <Button
                    size="small"
                    onClick={()=>setExpandedFloor(expandedFloor===floor?null:floor)}
                  >
                    {expandedFloor===floor?'Hide':'See more…'}
                  </Button>
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>

        {/* Expanded full table */}
        {expandedFloor && (
          <Box sx={{ px:'20px', mt:2 }}>
            <Typography variant="h6" gutterBottom>
              {expandedFloor} — All Entries
            </Typography>
            <DataTable
              columns={columns}
              rows={floorMap[expandedFloor].map(r=>({
                ...r,
                LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
              }))}
            />
          </Box>
        )}
      </Container>
      <Footer/>
    </>
  );
}











Now refer Vilinus Delta Gama partation from dashboard.jsx and update same delta Gama structure in PartationDetails & partationDetailDetails.jsx carefully.


// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton } from '@mui/material';
import GroupIcon          from '@mui/icons-material/Group';
import TrackChangesIcon   from '@mui/icons-material/TrackChanges';
import PeopleIcon         from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import SummaryCard    from '../components/SummaryCard';
import ChartCard      from '../components/ChartCard';
import LoadingSpinner from '../components/LoadingSpinner';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import doorMapRaw from '../utils/doorMap'; // has partition, door, inDirectionFloor
import { summaryPartitionGroup } from '../utils/partitionGroups';

// Flags
import austriaFlag    from '../assets/flags/austria.png';
import uaeFlag        from '../assets/flags/uae.png';
import irelandFlag    from '../assets/flags/ireland.png';
import italyFlag      from '../assets/flags/italy.png';
import lithuaniaFlag  from '../assets/flags/lithuania.png';
import moroccoFlag    from '../assets/flags/morocco.png';
import russiaFlag     from '../assets/flags/russia.png';
import ukFlag         from '../assets/flags/uk.png';
import spainFlag      from '../assets/flags/spain.png';

// Your EMEA partitions
const partitionList = [
  'AUT.Vienna','DU.Abu Dhab','IE.Dublin','IT.Rome',
  'LT.Vilnius','MA.Casablanca','RU.Moscow','UK.London','ES.Madrid'
];

// Display names
const displayName = {
  'AUT.Vienna':    'Vienna',
  'DU.Abu Dhab':   'Abu Dhabi',
  'IE.Dublin':     'Dublin',
  'IT.Rome':       'Rome',
  'LT.Vilnius':    'Vilnius',
  'MA.Casablanca': 'Casablanca',
  'RU.Moscow':     'Moscow',
  'UK.London':     'London',
  'ES.Madrid':     'Madrid'
};

// Flags per partition
const flagMap = {
  'AUT.Vienna':    austriaFlag,
  'DU.Abu Dhab':   uaeFlag,
  'IE.Dublin':     irelandFlag,
  'IT.Rome':       italyFlag,
  'LT.Vilnius':    lithuaniaFlag,
  'MA.Casablanca': moroccoFlag,
  'RU.Moscow':     russiaFlag,
  'UK.London':     ukFlag,
  'ES.Madrid':     spainFlag
};

// Colors per partition ([title, total, stat1, stat2])
const colorsMap = {
  'AUT.Vienna':    ['#FFD666','#fcf3cf','#2ecc71','#ec7063'],
  'DU.Abu Dhab':   ['#FFE599','#fcf3cf','#2ecc71','#ec7063'],
  'IE.Dublin':     ['#FFF2CC','#fcf3cf','#2ecc71','#ec7063'],
  'IT.Rome':       ['#FFD666','#fcf3cf','#2ecc71','#ec7063'],
  'LT.Vilnius':    ['#FFE599','#fcf3cf','#2ecc71','#ec7063'],
  'MA.Casablanca': ['#FFF2CC','#fcf3cf','#2ecc71','#ec7063'],
  'RU.Moscow':     ['#FFD666','#fcf3cf','#2ecc71','#ec7063'],
  'UK.London':     ['#FFE599','#fcf3cf','#2ecc71','#ec7063'],
  'ES.Madrid':     ['#FFC0CB','#ffe5ec','#ff4081','#d50065']
};

/**
 * Build a quick lookup for Vilnius doors → either "GAMA" or "Delta".
 * We ignore the floor here because chart is aggregated by building only.
 */
const vilniusDoorToBuilding = doorMapRaw.reduce((acc, { partition, door }) => {
  if (partition === 'LT.Vilnius') {
    acc[door] = door.toUpperCase().includes('GAMA') ? 'GAMA' : 'Delta';
  }
  return acc;
}, {});

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  // update last‐updated timestamp
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // 1) Count GAMA vs Delta for Vilnius from raw swipe details
  const rawDetails = data?.details || [];
  const vilniusCounts = { GAMA: 0, Delta: 0 };
  rawDetails.forEach(r => {
    if (r.PartitionName2 === 'LT.Vilnius' && r.Direction === 'InDirection') {
      const b = vilniusDoorToBuilding[r.Door];
      if (b) vilniusCounts[b]++;
    }
  });

  // 2) Build the bar‐chart data
  const chartData = [
    { name: 'Vilnius GAMA',  value: vilniusCounts.GAMA,  breakdown: {} },
    { name: 'Vilnius Delta', value: vilniusCounts.Delta, breakdown: {} }
  ];
  // then add each other site
  partitionList.forEach(site => {
    if (site === 'LT.Vilnius') return;
    const region = data?.realtime?.[site] || {};
    chartData.push({
      name: displayName[site],
      value: region.total || 0,
      breakdown: {
        Employees:   region.Employee || 0,
        Contractors: region.Contractor || 0
      }
    });
  });

  // 3) Prepare summary cards
  // today’s totals (global)
  const todayTot = data?.today.total    || 0;
  const todayEmp = data?.today.Employee || 0;
  const todayCon = data?.today.Contractor|| 0;
  // realtime totals (sum of all partitions)
  const realtimeTot = Object.values(data?.realtime || {})
    .reduce((sum,x) => sum + (x.total||0), 0);
  const realtimeEmp = Object.values(data?.realtime || {})
    .reduce((sum,x) => sum + (x.Employee||0), 0);
  const realtimeCon = Object.values(data?.realtime || {})
    .reduce((sum,x) => sum + (x.Contractor||0), 0);

  // build summaryItems: one "Vilnius" card (full totals) + other sites
  const summaryItems = [];
  // Vilnius
  const vilniusRegion = data?.realtime?.['LT.Vilnius'] || {};
  summaryItems.push({
    label: 'Vilnius',
    total: vilniusRegion.total  || 0,
    emp:   vilniusRegion.Employee || 0,
    cont:  vilniusRegion.Contractor|| 0,
    flag:  flagMap['LT.Vilnius'],
    colors: colorsMap['LT.Vilnius']
  });
  // others
  partitionList.forEach(site => {
    if (site === 'LT.Vilnius') return;
    const r = data?.realtime?.[site] || {};
    summaryItems.push({
      label: displayName[site],
      total: r.total      || 0,
      emp:   r.Employee   || 0,
      cont:  r.Contractor || 0,
      flag:  flagMap[site],
      colors: colorsMap[site]
    });
  });

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px:2, py:1 }}>

        {/* Top six global cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {[
            { title:"Today's Total Headcount",    value: todayTot,   icon:<GroupIcon sx={{color:'#E57373',fontSize:36}}/>,  border:'#FFD666' },
            { title:"Today's Employees Count",    value: todayEmp,   icon:<PeopleIcon sx={{color:'#81C784',fontSize:36}}/>,    border:'#81C784' },
            { title:"Today's Contractors Count",  value: todayCon,   icon:<BusinessCenterIcon sx={{color:'#64B5F6',fontSize:36}}/>, border:'#FFE599' },
            { title:"Realtime Headcount",         value: realtimeTot,icon:<TrackChangesIcon sx={{color:'#BA68C8',fontSize:36}}/>, border:'#FFF2CC' },
            { title:"Realtime Employees Count",   value: realtimeEmp,icon:<PeopleIcon sx={{color:'#FFB74D',fontSize:36}}/>,    border:'#FFD666' },
            { title:"Realtime Contractors Count", value: realtimeCon,icon:<BusinessCenterIcon sx={{color:'#4DB6AC',fontSize:36}}/>, border:'#FFE599' }
          ].map(c => (
            <Box key={c.title} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height:140, border:`2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Partition summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={4}>
          {loading
            ? <LoadingSpinner/>
            : summaryItems.map(item => {
                const [tc, totc, ec, cc] = item.colors;
                return (
                  <Box key={item.label} sx={{ flex:'1 1 calc(16.66% - 8px)' }}>
                    <SummaryCard
                      title={item.label}
                      total={item.total}
                      stats={[
                        { label:'Employees',   value:item.emp },
                        { label:'Contractors', value:item.cont }
                      ]}
                      icon={item.flag && (
                        <Box component="img"
                             src={item.flag}
                             alt={`${item.label} flag`}
                             sx={{ width:50, height:30, border:'1px solid #fff' }}/>
                      )}
                      titleColor={tc}
                      totalColor={totc}
                      statColors={[ec,cc]}
                      sx={{
                        height:160,
                        border:`2px solid ${tc}`,
                        '& .MuiTypography-subtitle1':{ fontSize:'1.3rem' },
                        '& .MuiTypography-h4':        { fontSize:'1.7rem' },
                        '& .MuiTypography-caption':   { fontSize:'0.875rem' }
                      }}
                    />
                  </Box>
                );
              })
          }
        </Box>

        {/* Live totals bar chart */}
        <Box p={2} sx={{ border:'2px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="h6">Live Totals by Site</Typography>
            <Typography variant="body2">Last updated: {lastUpdate}</Typography>
          </Box>
          {loading
            ? <Skeleton variant="rectangular" height={240}/>
            : <ChartCard
                data={chartData}
                dataKey="value"
                colors={{ head:'#FFC107', cap:'#B0BEC5' }}
                chartHeight={320}
              />
          }
        </Box>
      </Container>
      <Footer/>
    </>
  );
}



C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\PartitionDetail.jsx


// src/pages/PartitionDetail.jsx

import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Container, Box, Typography, Button } from '@mui/material';

import SummaryCard    from "../components/SummaryCard";
import ChartCard      from "../components/ChartCard";
import Header         from "../components/Header";
import Footer         from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";

import GroupIcon          from '@mui/icons-material/Group';
import TrackChangesIcon   from '@mui/icons-material/TrackChanges';
import PeopleIcon         from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

import { lookupFloor } from '../utils/floorLookup';
import { fetchLiveSummary, fetchHistory } from '../api/occupancy.service';

export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [live, setLive]       = useState(null);
  const [history, setHistory] = useState(null);
  const [lastUpdate, setLastUpdate] = useState('');

  // Poll live summary every second
  useEffect(() => {
    // initial load + interval
    const load = async () => {
      const js = await fetchLiveSummary();
      setLive(js);
      setLastUpdate(new Date().toLocaleTimeString());
    };
    load();
    const iv = setInterval(load, 1000);
    return () => clearInterval(iv);
  }, [partition]);

  // Fetch history once
  useEffect(() => {
    fetchHistory(partition).then(js => setHistory(js));
  }, [partition]);

  if (!live || !history) {
    return <LoadingSpinner />;
  }

  const today = history.summaryByDate.at(-1).region;
  const siteLive = live.realtime[partition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    floors: {}
  };

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 1 }}>
        <Button onClick={() => navigate(-1)}>← Back</Button>

        {/* Top‐level summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} my={2}>
          {[
            { title: 'Today Total',      value: today.total,      icon: <GroupIcon />,         border: '#FFD666' },
            { title: 'Today Employees',  value: today.Employee,   icon: <PeopleIcon />,        border: '#81C784' },
            { title: 'Today Contractors',value: today.Contractor, icon: <BusinessCenterIcon />,border: '#FFE599' },
            { title: 'RT Total',         value: siteLive.total,   icon: <TrackChangesIcon />,  border: '#FFF2CC' },
            { title: 'RT Employees',     value: siteLive.Employee,icon: <PeopleIcon />,        border: '#FFD666' },
            { title: 'RT Contractors',   value: siteLive.Contractor,icon:<BusinessCenterIcon />,border:'#FFE599' },
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 30%', minWidth: 180 }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 100, border: `1px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Live floor counts */}
        <Box p={2} sx={{ border: '1px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="h6">Live Floor Counts</Typography>
            <Typography variant="body2">Last updated: {lastUpdate}</Typography>
          </Box>
          <ChartCard
            data={Object.entries(siteLive.floors).map(([floor, cnt]) => ({
              name: floor,
              value: cnt
            }))}
            dataKey="value"
            chartHeight={300}
          />
          <Box textAlign="right" mt={1}>
            <Button
              onClick={() =>
                navigate(
                  `/partition/${encodeURIComponent(partition)}/details`
                )
              }
            >
              See Details
            </Button>
          </Box>
        </Box>
      </Container>

      <Footer />
    </>
  );
}






C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\PartitionDetailDetails.jsx


import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container,
  Box,
  Typography,
  Button,
  TextField,
  TableContainer,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from '@mui/material';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import DataTable      from '../components/DataTable';
import { fetchLiveSummary } from '../api/occupancy.service';
import { lookupFloor }      from '../utils/floorLookup';

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails]     = useState([]);
  const [loading, setLoading]     = useState(true);
  const [lastUpdate, setLast]     = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFloor, setExpandedFloor] = useState(null);

  // Initial load & poll every second
  useEffect(() => {
    let mounted = true;

    async function load() {
      const json = await fetchLiveSummary();
      if (!mounted) return;
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === 'InDirection')
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction),
        }));
      setDetails(det);
      setLast(new Date().toLocaleTimeString());
      setLoading(false);
    }

    load();
    const iv = setInterval(load, 1000);
    return () => {
      mounted = false;
      clearInterval(iv);
    };
  }, [partition]);

  // Group by floor
  const floorMap = useMemo(() => {
    return details.reduce((map, r) => {
      map[r.floor] = map[r.floor] || [];
      map[r.floor].push(r);
      return map;
    }, {});
  }, [details]);

  // Filter + sort
  const displayed = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return Object.entries(floorMap)
      .filter(([floor, emps]) => {
        if (!term) return true;
        if (floor.toLowerCase().includes(term)) return true;
        return emps.some(r =>
          r.ObjectName1.toLowerCase().includes(term) ||
          r.EmployeeID.toLowerCase().includes(term)
        );
      })
      .sort((a, b) => b[1].length - a[1].length);
  }, [floorMap, searchTerm]);

  const columns = [
    { field: 'EmployeeID',      headerName: 'Emp ID' },
    { field: 'ObjectName1',     headerName: 'Name' },
    { field: 'LocaleMessageTime', headerName: 'Swipe Time' },
    { field: 'PersonnelType',   headerName: 'Type' },
    { field: 'CardNumber',      headerName: 'Card' },
    { field: 'Door',            headerName: 'Door' },
  ];

  if (loading) {
    return (
      <>
        <Header />
        <Box sx={{ px: 2, py: 8 }}>
          <LoadingSpinner />
        </Box>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ px: '20px', pt: 1, pb: 4 }}>
        {/* Back */}
        <Box mb={2}>
          <Button size="small" onClick={() => navigate(-1)}>
            ← Back to Overview
          </Button>
        </Box>

        {/* Header + Search */}
        <Box display="flex" alignItems="center" gap={2} mb={2}>
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            Floor Details
          </Typography>
          <Typography variant="body2" color="textSecondary">
            Last updated: {lastUpdate}
          </Typography>
          <TextField
            size="small"
            placeholder="Search floor / emp…"
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
            sx={{ width: 200 }}
          />
        </Box>

        {/* Floor cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
          {displayed.map(([floor, emps]) => (
            <Box key={floor} sx={{ width: '50%', p: 1 }}>
              <Paper sx={{ border: '2px solid #FFC107', p: 2 }}>
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  {floor} (Total {emps.length})
                </Typography>

                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        {columns.map(c => (
                          <TableCell key={c.field} sx={{ fontWeight: 'bold', py: 0.5 }}>
                            {c.headerName}
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {emps.slice(0, 10).map((r, i) => {
                        const match =
                          searchTerm &&
                          (r.ObjectName1.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           r.EmployeeID.includes(searchTerm));
                        return (
                          <TableRow
                            key={`${r.PersonGUID}-${i}`}
                            sx={ match ? { backgroundColor: 'rgba(255,235,59,0.3)' } : {} }
                          >
                            <TableCell sx={{ py: 0.5 }}>{r.EmployeeID}</TableCell>
                            <TableCell sx={{ py: 0.5 }}>{r.ObjectName1}</TableCell>
                            <TableCell sx={{ py: 0.5 }}>
                              {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                            </TableCell>
                            <TableCell sx={{ py: 0.5 }}>{r.PersonnelType}</TableCell>
                            <TableCell sx={{ py: 0.5 }}>{r.CardNumber}</TableCell>
                            <TableCell sx={{ py: 0.5 }}>{r.Door}</TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </TableContainer>

                <Box textAlign="right" mt={1}>
                  <Button
                    size="small"
                    onClick={() => setExpandedFloor(expandedFloor === floor ? null : floor)}
                  >
                    {expandedFloor === floor ? 'Hide' : 'See more…'}
                  </Button>
                </Box>
              </Paper>
            </Box>
          ))}
        </Box>

        {/* Expanded table */}
        {expandedFloor && (
          <Box sx={{ px: '20px' }}>
            <Typography variant="h6" gutterBottom>
              {expandedFloor} — All Entries
            </Typography>
            <DataTable
              columns={columns}
              rows={floorMap[expandedFloor].map(r => ({
                ...r,
                LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString()
              }))}
            />
          </Box>
        )}
      </Container>

      <Footer />
    </>
  );
}

