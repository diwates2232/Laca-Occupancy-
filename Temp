add all above updation in below file and give me fully updated files ,carefully then we move next step


//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\ChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';

import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
} from 'recharts';


// export default function ChartCard({
//   title, data = [], dataKey = 'value', chartHeight = 250
// }) {

export default function ChartCard({
  title,
  data = [],
  chartHeight = 250,
  series = [             // ← new default single‐series config
    { dataKey: 'value', name: 'Value', stroke: '#FFC107', fillOpacity: 0.4 }
  ]
}: {
  title: string;
  data: Array<Record<string, any>>;
  chartHeight?: number;
  series?: SeriesConfig[];
}) {


  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent sx={{ textAlign: 'center' }}>
        <Typography variant="h6" gutterBottom>{title}</Typography>
        <Box sx={{ width: '100%', height: chartHeight }}>

 <ResponsiveContainer>
      
            <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              {/* define yellow gradient */}
              <defs>

              {series.map((s, i) => (
                <linearGradient
                  key={s.dataKey}
                  id={`grad-${s.dataKey}`}
                  x1="0" y1="0" x2="0" y2="1"
                >
                  <stop offset="5%" stopColor={s.stroke} stopOpacity={s.fillOpacity ?? 0.4} />
                  <stop offset="95%" stopColor={s.stroke} stopOpacity={0} />
                </linearGradient>
              ))}
             





                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#FFC107" stopOpacity={0.4}/>
                  <stop offset="95%" stopColor="#FFC107" stopOpacity={0}/>
                </linearGradient>
              </defs>


              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              <XAxis dataKey="name" tick={{ fill: '#FFF', fontWeight: 600 }} />
              <YAxis tick={{ fill: '#FFF', fontWeight: 600 }} />
              <Tooltip contentStyle={{ backgroundColor: '#333' }} itemStyle={{ color: '#FFF' }} />
              <Legend wrapperStyle={{ color: '#FFF' }} />

              {/* {hasCapacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Capacity"
                  stroke="#B0BEC5"
                  fill="rgba(176,190,197,0.2)"
                  dot={false}
                />
              )}

              <Area
                type="monotone"
                dataKey={hasCapacity ? 'Headcount' : dataKey}
                name={hasCapacity ? 'Headcount' : dataKey}
                stroke="#FFC107"
                fill="url(#colorHead)"
                dot={{ stroke: '#FFC107', strokeWidth: 2 }}
              />
               */}
              {/* overlay a crisp line on top for that market “spark” */}
              {/* <Line
                type="monotone"
                dataKey={hasCapacity ? 'Headcount' : dataKey}
                stroke="#FFC107"
                strokeWidth={2}
                dot={false}
                activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
              /> */}

            {series.map(s => (
              <React.Fragment key={s.dataKey}>
                <Area
                  type="monotone"
                  dataKey={s.dataKey}
                  name={s.name}
                  stroke={s.stroke}
                  fill={`url(#grad-${s.dataKey})`}
                  dot={false}
                />
                <Line
                  type="monotone"
                  dataKey={s.dataKey}
                  stroke={s.stroke}
                  strokeWidth={2}
                  dot={false}
                  activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                />
              </React.Fragment>
            ))}


            </AreaChart>


    




          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}

