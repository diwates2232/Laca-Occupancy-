// src/components/ChartCard.jsx
import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Brush,
  LabelList,
} from 'recharts';

export default function ChartCard({
  chartType = 'area',      // 'area' or 'bar'
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 250,
  xAxisLabel = '',
  yAxisLabel = '',
  colors = { head: '#FFC107', cap: '#B0BEC5' },
  sx = {},
}) {
  const [hidden, setHidden] = useState({});

  if (!data.length) {
    return (
      <Card sx={sx}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data available</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;

  const handleLegendClick = ({ dataKey }) =>
    setHidden(h => ({ ...h, [dataKey]: !h[dataKey] }));

  // shared axis props
  const axisStyle = { tick: { fill: '#FFF', fontWeight: 600 }, 
                      label: { fill: '#FFF', fontSize: 12, fontWeight: 600 } };

  // shared tooltip
  const tooltipProps = {
    contentStyle: { backgroundColor: '#000', border: `1px solid ${colors.head}` },
    labelStyle: { color: '#FFC107', fontWeight: 600 },
    itemStyle: { color: '#FFF' },
    formatter: (val, key) => {
      if (key === 'Headcount' && hasCapacity) {
        const cap = data.find(d => d.Headcount === val)?.Capacity ?? 0;
        const pct = cap ? `${((val / cap) * 100).toFixed(1)}%` : '-';
        return [`${val} (${pct})`, key];
      }
      return [val, key];
    }
  };

  return (
    <Card sx={{ mb: 2, border: `2px solid ${colors.head}`, ...sx }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ color: colors.head }}>
          {title}
        </Typography>
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            {chartType === 'bar' ? (
              <BarChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
                <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                <XAxis dataKey="name" {...axisStyle} label={{ value: xAxisLabel, position: 'bottom', dy: 10, ...axisStyle.label }} />
                <YAxis {...axisStyle} label={{ value: yAxisLabel, angle: -90, position: 'insideLeft', dx: -10, ...axisStyle.label }} />
                <Tooltip {...tooltipProps} />
                <Legend verticalAlign="top" wrapperStyle={{ color: '#FFF' }} onClick={handleLegendClick} />
                <Brush dataKey="name" height={30} stroke={colors.head} travellerWidth={8} />
                <Bar
                  dataKey={dataKey}
                  name={title}
                  fill={colors.head}
                  onClick={d => console.log('Bar clicked:', d.name)}
                  isAnimationActive={false}
                >
                  <LabelList dataKey={dataKey} position="top" style={{ fill: '#FFF', fontSize: 12 }} />
                </Bar>
              </BarChart>
            ) : (
              <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
                <defs>
                  <linearGradient id="gradHead" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={colors.head} stopOpacity={0.4} />
                    <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                <XAxis dataKey="name" {...axisStyle} label={{ value: xAxisLabel, position: 'bottom', dy: 10, ...axisStyle.label }} />
                <YAxis {...axisStyle} label={{ value: yAxisLabel, angle: -90, position: 'insideLeft', dx: -10, ...axisStyle.label }} />
                <Tooltip {...tooltipProps} />
                <Legend verticalAlign="top" wrapperStyle={{ color: '#FFF' }} onClick={handleLegendClick} />
                <Brush dataKey="name" height={30} stroke={colors.head} travellerWidth={8} />

                {hasCapacity && !hidden.Capacity && (
                  <Area
                    type="monotone"
                    dataKey="Capacity"
                    name="Capacity"
                    stroke={colors.cap}
                    fill={`${colors.cap}33`}
                    dot={false}
                  />
                )}

                {!hidden.Headcount && (
                  <Area
                    type="monotone"
                    dataKey={hasCapacity ? 'Headcount' : dataKey}
                    name={hasCapacity ? 'Headcount' : title}
                    stroke={colors.head}
                    fill="url(#gradHead)"
                    dot={{ stroke: colors.head, strokeWidth: 2 }}
                  >
                    <LabelList
                      dataKey={hasCapacity ? 'Headcount' : dataKey}
                      position="top"
                      style={{ fill: '#FFF', fontSize: 12 }}
                    />
                  </Area>
                )}

                {!hidden.Headcount && (
                  <Line
                    type="monotone"
                    dataKey={hasCapacity ? 'Headcount' : dataKey}
                    stroke={colors.head}
                    strokeWidth={2}
                    dot={false}
                    activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                  />
                )}
              </AreaChart>
            )}
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}




// src/pages/Dashboard.jsx
import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  Divider,
} from '@mui/material';
import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const regions = data?.realtime || {};
  const partitions = partitionList
    .map((name) => {
      const key = Object.keys(regions).find((k) => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {},
      };
    })
    .sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total ?? 0;
  const todayEmp = data?.today?.Employee ?? 0;
  const todayCont = data?.today?.Contractor ?? 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 1, pb: 2, px: 2 }}>
        {/* SUMMARY CARDS */}
        <Box display="flex" gap={1} sx={{ mb: 2 }}>
          <SummaryCard
            title="Today’s Headcount"
            total={todayTot}
            stats={[
              { label: 'Employees', value: todayEmp },
              { label: 'Contractors', value: todayCont },
            ]}
            sx={{ flex: 1, height: 190 }}
          />

          <SummaryCard
            title="Realtime Headcount"
            total={realtimeTot}
            stats={[
              { label: 'Employees', value: partitions.reduce((s, p) => s + p.Employee, 0) },
              { label: 'Contractors', value: partitions.reduce((s, p) => s + p.Contractor, 0) },
            ]}
            sx={{ flex: 1, height: 190 }}
          />
        </Box>

        {/* PARTITION CARDS */}
        <Box display="flex" flexWrap="wrap" gap={1} sx={{ mb: 4 }}>
          {loading
            ? Array.from({ length: 6 }).map((_, i) => (
                <Skeleton key={i} variant="rectangular" width="16.66%" height={180} />
              ))
            : partitions.map((p) => (
                <SummaryCard
                  key={p.name}
                  title={p.name}
                  total={p.total}
                  stats={[
                    { label: 'Employees', value: p.Employee },
                    { label: 'Contractors', value: p.Contractor },
                    ...(p.TempBadge
                      ? [{ label: 'Temp Badge', value: p.TempBadge }]
                      : []),
                  ]}
                  sx={{ flex: '1 1 16.66%', height: 180 }}
                />
              ))}
        </Box>

        {/* LIVE TOTALS BAR CHART */}
        <Box mb={4} sx={{ p: 2 }}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="h6">Live Totals by Partition</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>

          {loading ? (
            <Skeleton variant="rectangular" width="100%" height={360} />
          ) : (
            <ChartCard
              chartType="bar"
              title="Partition Totals"
              data={partitions.map((p, i) => ({
                name: p.name,
                value: p.total,
              }))}
              dataKey="value"
              xAxisLabel="Partition"
              yAxisLabel="Headcount"
              chartHeight={360}
              sx={{}}
            />
          )}
        </Box>
      </Container>

      <Footer />
    </>
  );
}










Lets Check both file and in chart add details and lables and make more attrative carefully 

// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build and sort partitions
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 1,
          pb: 2,
          px: '20px',        // ← exactly 20px padding both sides
        }}
      >
        {/* Top summary cards */}
        <Box
          display="flex"
          alignItems="stretch"
          sx={{ mb: 1, width: '100vw%' }}
        >
          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Today’s Headcount"
              total={todayTot}
              stats={[
                { label: 'Employees',   value: todayEmp },
                { label: 'Contractors', value: todayCont }
              ]}
              sx={{ height: 190, border: '2px solid #FFC107' }}
            />
          </Box>

          <Divider
            // orientation="vertical"
            flexItem
            sx={{ mx: 1 }}
          />

          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Realtime Headcount"
              total={realtimeTot}
              stats={[
                { label: 'Employees',   value: realtimeEmp },
                { label: 'Contractors', value: realtimeCont }
              ]}
              sx={{ height: 190, border: '2px solid #FFC107' }}
            />
          </Box>
        </Box>

        {/* Partition cards */}
        <Box mt={4} sx={{ width: '100vw%', display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {loading ? (
            <Skeleton variant="rectangular" width="100vw%" height={240} />
          ) : (
            partitions.map(p => (
              <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={p.name}
                  total={p.total}
                  stats={[
                    { label: 'Employees',   value: p.Employee },
                    { label: 'Contractors', value: p.Contractor },
                    // only show TempBadge on Costa Rica
                    ...(p.name === 'CR.Costa Rica Partition'
                      ? [{ label: 'Temp Badge', value: p.TempBadge }]
                      : [])
                  ]}
                  sx={{ width: '100vw%', border: '2px solid #FFC107' }}
                />
              </Box>
            ))
          )}
        </Box>

        {/* Live totals chart */}
        <Box mt={4} sx={{ width: '100vw%' ,p:2, border: '2px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h6" gutterBottom>
              Live Totals by Partition
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>

          {loading ? (
            <Skeleton variant="rectangular" width="100%" height={320} />
          ) : (
  <ChartCard
    chartType="bar"                  // new prop
    chartHeight={360}
    data={partitions.map((p,i) => ({
     name: p.name,
      value: p.total,
      fill: i % 2 === 0 ? '#FFC107' : '#B0BEC5'
    }))}
    dataKey="value"
    colors={{ head: '#FFC107', cap: '#B0BEC5' }}
    sx={{ border: '2px solid #FFC107' }}
  />
          )}
        </Box>
      </Container>

      <footer style={{
        backgroundColor: '#000000',
        color: '#FFC107',
        padding: '1.5rem 0',
        textAlign: 'center',
        marginTop: 0,
        borderTop: '2px solid #FFC107',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div><strong>Global Security Operations Center</strong><br/>
          Live HeadCount against Occupancy dashboard for Western Union — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
             style={{ color: '#FFC107', textDecoration: 'underline' }}>
            GSOC Mail
          </a>&nbsp;|&nbsp;
          Landline:&nbsp;<span style={{ color: '#FFC107' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}










// src/components/ChartCard.jsx
import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Brush,
} from 'recharts';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 250,
  colors = { head: '#FFC107', cap: '#B0BEC5' },
}) {
 const [hidden, setHidden] = useState({});  // track which series are hidden

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;

 const handleLegendClick = (o) => {
   const { dataKey } = o;
   setHidden(prev => ({ ...prev, [dataKey]: !prev[dataKey] }));
 };

  return (
    <Card sx={{ mb: 2, }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ color: colors.head }}>
          {title}
        </Typography>
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.4}/>
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0}/>
                </linearGradient>
              </defs>

              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              <XAxis dataKey="name" tick={{ fill: '#FFF', fontWeight: 600 }} />
              <YAxis tick={{ fill: '#FFF', fontWeight: 600 }} />

    
             <Tooltip 
               contentStyle={{ backgroundColor: '#000', border: `1px solid ${colors.head}` }}
               labelStyle={{ color: '#FFC107' }}
               formatter={(value, name) => {
                 if (name === 'Headcount' && hasCapacity) {
                   const cap = data.find(d => d[value.name])?.Capacity;
                   const pct = ((value / cap) * 100).toFixed(1);
                   return [`${value} (${pct}%)`, name];
                 }
                 return [value, name];
               }}
             />

             {/* <Legend wrapperStyle={{ color: '#FFF' }} /> */}
             <Legend 
               wrapperStyle={{ color: '#FFF' }}
               onClick={handleLegendClick}
             />

             {/* brush for zooming/panning */}
             <Brush
               dataKey="name"
               height={30}
               stroke={colors.head}
               travellerWidth={10}
             />

              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Capacity"
              
                 stroke={colors.cap}
                
                 fill={`${colors.cap}33`}
                  dot={false}
                />
              )}

              {!hidden.Headcount && (
                <Area
                  type="monotone"
                
                 dataKey={hasCapacity ? 'Headcount' : dataKey}
                 name={hasCapacity ? 'Headcount' : dataKey}
                
                stroke={colors.head}
               
                fill="url(#colorHead)"
                  dot={{ stroke: colors.head, strokeWidth: 2 }}
                />
              )}
              
              {!hidden.Headcount && (
                <Line
                  type="monotone"
            
                 dataKey={hasCapacity ? 'Headcount' : dataKey}
               
                stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}




