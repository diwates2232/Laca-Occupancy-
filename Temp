// src/components/CompositeChartCard.jsx
import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import {
  ComposedChart, Bar, Line, XAxis, YAxis, Tooltip,
  ResponsiveContainer, CartesianGrid, Legend
} from 'recharts';

export default function CompositeChartCard({ title, data, capacityLine }) {
  return (
    <Card sx={{ flex: '1 1 16%', minWidth: 240 }}>
      <CardContent>
        <Typography variant="subtitle1" align="center" gutterBottom>{title}</Typography>
        <ResponsiveContainer width="100%" height={220}>
          <ComposedChart data={data} margin={{ top: 10, right: 10, left: 0, bottom: 20 }}>
            <CartesianGrid strokeDasharray="3 3" stroke="#eee"/>
            <XAxis dataKey="name" tickLine={false} axisLine={false} />
            <YAxis yAxisId="left" tickLine={false} axisLine={false} />
            <YAxis yAxisId="right" orientation="right" tickLine={false} axisLine={false} />
            <Tooltip/>
            <Legend verticalAlign="top" height={24}/>
            <Bar
              yAxisId="left"
              dataKey="headcount"
              name="Headcount"
              barSize={20}
              fill="#FFC107"
              radius={[4,4,0,0]}
            />
            <Line
              yAxisId="right"
              dataKey="capacity"
              name="Seat Capacity"
              stroke="#E57373"
              strokeWidth={2}
              dot={false}
            />
          </ComposedChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}





// src/components/LineChartCard.jsx
import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import {
  LineChart, Line, XAxis, YAxis, Tooltip,
  ResponsiveContainer, CartesianGrid, Legend
} from 'recharts';

export default function LineChartCard({ title, data, capacityLine }) {
  return (
    <Card sx={{ flex: '1 1 16%', minWidth: 240 }}>
      <CardContent>
        <Typography variant="subtitle1" align="center" gutterBottom>{title}</Typography>
        <ResponsiveContainer width="100%" height={220}>
          <LineChart data={data} margin={{ top: 10, right: 10, left: 0, bottom: 20 }}>
            <CartesianGrid strokeDasharray="3 3" stroke="#eee" />
            <XAxis dataKey="name" tickLine={false} axisLine={false}/>
            <YAxis tickLine={false} axisLine={false}/>
            <Tooltip/>
            <Legend verticalAlign="top" height={24}/>
            <Line
              type="monotone"
              dataKey="headcount"
              name="Headcount"
              stroke="#FFC107"
              strokeWidth={2}
              dot={{ r: 3 }}
            />
            <Line
              type="monotone"
              dataKey="capacity"
              name="Seat Capacity"
              stroke="#000"
              strokeDasharray="5 5"
              dot={false}
            />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}


// src/components/PieChartCard.jsx
import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';

export default function PieChartCard({ title, value, capacity }) {
  const usedPct = capacity ? Math.round(value / capacity * 100) : 0;
  const data = [
    { name: 'Occupied',   value },
    { name: 'Available',  value: capacity - value }
  ];
  const COLORS = ['#FFC107', '#eee'];

  return (
    <Card sx={{ flex: '1 1 16%', minWidth: 200 }}>
      <CardContent>
        <Typography variant="subtitle1" align="center" gutterBottom>{title}</Typography>
        <ResponsiveContainer width="100%" height={180}>
          <PieChart>
            <Pie
              data={data}
              dataKey="value"
              innerRadius={50}
              outerRadius={80}
              startAngle={90}
              endAngle={-270}
            >
              {data.map((_, idx) => (
                <Cell key={idx} fill={COLORS[idx]} />
              ))}
            </Pie>
            <Tooltip formatter={(v) => v}/>
          </PieChart>
        </ResponsiveContainer>
        <Typography variant="h6" align="center" sx={{ mt: -4 }}>
          {usedPct}% used
        </Typography>
      </CardContent>
    </Card>
  );
}





// src/pages/Dashboard.jsx
 import PieChartCard    from '../components/PieChartCard';
 import ColumnChartCard from '../components/ColumnChartCard';
 import BarChartCard    from '../components/BarChartCard';
+import CompositeChartCard from '../components/CompositeChartCard';
+import LineChartCard      from '../components/LineChartCard';

 // map each partition to its widget type
 const widgetMap = {
   'CR.Costa Rica Partition': 'composite',
   'AR.Cordoba':               'line',
   'BR.Sao Paulo':             'pie',
   'MX.Mexico City':           'pie',
   'PE.Lima':                  'pie',
   'PA.Panama City':           'pie',
 };

 // … inside the render, replace your flex‐row of Pie/Column/Bar with:
 <Box mt={4} display="flex" flexWrap="wrap" gap={1} justifyContent="space-between">
   {loading
     ? <Skeleton variant="rectangular" width="100%" height={240}/>
     : partitions.map(p => {
         const key   = p.name;
         const title = displayNameMap[key] || key.split('.').pop();
         const floors= Object.entries(p.floors || {});
+        // build floor‐data array:
+        const floorData = floors.map(([floor, cnt]) => ({
+          name: floor.trim(),
+          headcount: cnt,
+          capacity: seatCapacities[`${title}-${floor.trim()}`] || 0
+        }));

         switch (widgetMap[key]) {
           case 'composite':
             return (
               <CompositeChartCard
                 key={key}
                 title={title}
                 data={floorData}
                 capacityLine
               />
             );
           case 'line':
             return (
               <LineChartCard
                 key={key}
                 title={title}
                 data={floorData}
                 capacityLine
               />
             );
           case 'pie':
           default:
             // only one floor => p.total is same as floorData[0].headcount
             return (
               <PieChartCard
                 key={key}
                 title={title}
                 value={p.total}
                 capacity={seatCapacities[title] || 0}
               />
             );
         }
       })
   }
 </Box>












For a Costa Rica We have Floor Wise SeatCapacity as So Here We Can Display HeadCount , SeatCapacity , usage (Percentage )
For Costa rica Standerd chart ,Also For Costa Rica display Live Floor Wise HeadCount So For Costa Rica Use bar Line Charts

For Agrentina same have Floor data so here also We can display SeatCapacity Line Charts 


Brazil has only one Fllor here We can Replace another standerd chart 

Same For Mexico Panama peru 

So For Each partation use Unique chart and Upadte All Files and Create New Files for Remenening file 

Alos use multiple Colours and make page more attractive 

add legends and details for every chart carefully.


so Update all Files carefully ,
also Check API Responec for more details and Adjust Chart as per RTesponce

http://localhost:3001/api/occupancy/live-summary
"success": true,
  "today": {
    "total": 756,
    "Employee": 667,
    "Contractor": 89,
    "TempBadge": 0
  },
  "realtime": {
    "AR.Cordoba": {
      "total": 189,
      "Employee": 165,
      "Contractor": 24,
      "floors": {
        "1st Floor": 27,
        "2nd Floor": 25,
        " BUZON": 2,
        "3rd Floor": 33,
        "12th Floor": 15,
        "7th Floor": 29,
        "5th Floor": 24,
        "10th Floor": 5,
        "4th Floor": 14,
        "6th Floor": 11,
        "8th Floor": 2,
        "9th Floor": 1,
        "PORTON": 1
      }
    },
    "CR.Costa Rica Partition": {
      "total": 392,
      "Employee": 360,
      "Contractor": 32,
      "TempBadge": 0,
      "floors": {
        "Building F4": 53,
        "Building E3": 44,
        "Building A3": 52,
        "Building E4": 33,
        " Building B1": 26,
        "Building B3": 41,
        "Building A2": 56,
        "Building A1": 7,
        "Building E2": 38,
        "Building B2": 42
      }
    },
    "BR.Sao Paulo": {
      "total": 43,
      "Employee": 35,
      "Contractor": 8,
      "floors": {
        "6th Floor": 43
      }
    },
    "MX.Mexico City": {
      "total": 13,
      "Employee": 10,
      "Contractor": 3,
      "floors": {
        "Floor 01": 13
      }
    },
    "PE.Lima": {
      "total": 33,
      "Employee": 32,
      "Contractor": 1,
      "floors": {
        "2nd Floor": 26,
        " 3rd Floor": 7
      }
    },
    "PA.Panama City": {
      "total": 8,
      "Employee": 7,
      "Contractor": 1,
      "floors": {
        "Floor 01": 8
      }
    }
  },



// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';

import GroupIcon from '@mui/icons-material/Group';         // Replaces TodayIcon
import TrackChangesIcon from '@mui/icons-material/TrackChanges'; // Replaces SyncIcon


import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

// Flags
import CostaRicaFlag  from '../assets/flags/costa-rica.png';
import ArgentinaFlag  from '../assets/flags/argentina.png';
import MexicoFlag     from '../assets/flags/mexico.png';
import PeruFlag       from '../assets/flags/peru.png';
import BrazilFlag     from '../assets/flags/brazil.png';
import PanamaFlag     from '../assets/flags/panama.png';


import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import seatCapacities from '../data/seatCapacities';
import PieChartCard    from '../components/PieChartCard';
import ColumnChartCard from '../components/ColumnChartCard';
import BarChartCard    from '../components/BarChartCard';

 


const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba':               'Argentina',
  'MX.Mexico City':           'Mexico',
  'PE.Lima':                  'Peru',
  'BR.Sao Paulo':             'Brazil',
  'PA.Panama City':           'Panama'
};

const colorsMap = {
  'CR.Costa Rica Partition': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063', '#ec7063'],
  'AR.Cordoba':               ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MX.Mexico City':           ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PE.Lima':                  ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'BR.Sao Paulo':             ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PA.Panama City':           ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
};


const chartTypeMap = {
  'CR.Costa Rica Partition': 'pie',
  'AR.Cordoba':               'column',
  'BR.Sao Paulo':             'bar',
  // fallback for the rest:
  'MX.Mexico City':           'bar',
  'PE.Lima':                  'bar',
  'PA.Panama City':           'bar',
};


// your WU brand palette:
const wuPalette = {
  primary:   '#FFC107',  // WU gold
  secondary: '#000000',  // WU black
  accent:    '#E57373',  // red accent
};



export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build and sort partitions
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 1,
          pb: 2,
          px: '20px',        // ← exactly 20px padding both sides
        }}
      >

        {/* Top six summary cards */}
     <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
  {[
    {
      title: "Today's Total Headcount",
      value: todayTot,
      icon: <GroupIcon sx={{ color: '#E57373', fontSize: 36 }} />,
      borderColor: '#FFD666',
    },
    {
      title: "Today's Employees Count",
      value: todayEmp,
      icon: <PeopleIcon sx={{ color: '#81C784', fontSize: 36 }} />,
      borderColor: '#81C784', 
    },
    {
      title: "Today's Contractors Count",
      value: todayCont,
      icon: <BusinessCenterIcon sx={{ color: '#64B5F6', fontSize: 36 }} />,
      borderColor: '#FFE599',
      
    },
    {
      title: "Realtime Headcount",
      value: realtimeTot,
      icon: <TrackChangesIcon sx={{ color: '#BA68C8', fontSize: 36 }} />,
      borderColor: '#FFF2CC',
    },
    {
      title: "Realtime Employees Count",
      value: realtimeEmp,
      icon: <PeopleIcon sx={{ color: '#FFB74D', fontSize: 36 }} />,
      borderColor: '#FFD666',
    },
    {
      title: "Realtime Contractors Count",
      value: realtimeCont,
      icon: <BusinessCenterIcon sx={{ color:  '#4DB6AC', fontSize: 36 }} />,
      borderColor: '#FFE599'
    }
 

    ].map(card => (
     <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
       <SummaryCard
         title={card.title}
         total={card.value}
         stats={[]}
         icon={card.icon}
         sx={{
           height: 140,
           border: `1px solid ${card.borderColor}`
         }}
       />
     </Box>
   ))}
 </Box> 

        {/* Partition cards */}
        <Box mt={4} sx={{ width: '100vw%', display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {loading ? (
            <Skeleton variant="rectangular" width="100vw%" height={200} />
          ) : (
                        (() => {
              // map of flags and primary colors for each partition
              const flagMap = {
                'CR.Costa Rica Partition': CostaRicaFlag,
                'AR.Cordoba':               ArgentinaFlag,
                'MX.Mexico City':           MexicoFlag,
                'PE.Lima':                  PeruFlag,
                'BR.Sao Paulo':             BrazilFlag,
                'PA.Panama City':           PanamaFlag,
              };


              // full palette arrays per flag: [title, total, stat1, stat2, stat3?]
              const colorsMap = {
                'CR.Costa Rica Partition': [
                  '#FFD666', // title (red)
                  '#fcf3cf', // total (blue)
                  '#2ecc71', // Employees (white)
                  '#ec7063', // Contractors (blue)
                  '#ec7063'  // TempBadge (white)
                ],
               'AR.Cordoba': [
                   '#FFE599', // title (light blue)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (sun yellow)
                  '#ec7063',  // Contractors (white)
                ],
                'MX.Mexico City': [
                   '#FFD666', // title (green)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (red)
                  '#ec7063',  // Contractors (white)
                ],
                'PE.Lima': [
                  '#FFF2CC', // title (red)
                  '#fcf3cf', // total (white)
                  '#2ecc71',// Employees (red)
                  '#ec7063',  // Contractors (white)
                ],
                'BR.Sao Paulo': [
                  '#FFD666', // title (green)
                  '#fcf3cf', // total (yellow)
                  '#2ecc71', // Employees (blue)
                  '#ec7063', // Contractors (yellow)
                ],
                'PA.Panama City': [
                  '#FFE599', // title (blue)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (red)
                  '#ec7063', // Contractors (white)
                ]
              };

              return partitions.map(p => {
  

                const flagSrc = flagMap[p.name] || '';
                const colors = colorsMap[p.name] || ['#FFC107', '#FFC107'];
                const [ titleC, totalC, ...statCs ] = colors;


                return (
                  <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                    <SummaryCard
                      // title={p.name}
                      title={displayNameMap[p.name] || p.name.replace(' Partition','')}
                    
                      icon={
                        flagSrc && (
                          <Box
                            component="img"
                            src={flagSrc}
                            alt={`${p.name} flag`}
                            sx={{
                              width: 50,
                              height: 30,
                              border: '1px solid #fff'  // 1px border
                            }}
                          />
                        )
                      }


                      total={p.total}
                      stats={[
                        { label: 'Employees',   value: p.Employee },
                        { label: 'Contractors', value: p.Contractor },
                        ...(p.name === 'CR.Costa Rica Partition'
                          ? [{ label: 'Temp Badge', value: p.TempBadge }]
                          : [])
                      ]}

                      // pass our new color props
                      titleColor={titleC}
                      totalColor={totalC}
                      statColors={statCs}


                    sx={{
                        width: '100vw%',
                    
                           border: `1px solid ${titleC}`,

       // typography overrides:
       '& .MuiTypography-subtitle1': {
         fontSize: '1.3rem'          // partition title
       },
       '& .MuiTypography-h4': {
         fontSize: '1.7rem'        // partition total
       },
       '& .MuiTypography-caption': {
         fontSize: '0.875rem'      // partition stats labels/values
       }

                      }}
                    />
                  </Box>
                );
              });
            })()
           )}
         </Box>

          
<Box mt={4} display="flex" flexWrap="wrap" gap={1} justifyContent="space-between">
  {loading
    ? <Skeleton variant="rectangular" width="100%" height={220} />
    : partitions.map(p => {
        const key       = p.name;
        const title     = displayNameMap[key] || key.split('.').pop();
        const type      = chartTypeMap[key] || 'bar';
        // prepare a simple data array: two slices or bars
        const chartData = [
          { name: 'Employees',   value: p.Employee },
          { name: 'Contractors', value: p.Contractor },
          ...(p.TempBadge ? [{ name: 'TempBadge', value: p.TempBadge }] : [])
        ];
        switch (type) {
          case 'pie':
            return (
              <PieChartCard
                key={key}
                title={title}
                data={chartData}
                colors={[ wuPalette.primary, wuPalette.accent, wuPalette.secondary ]}
              />
            );
          case 'column':
            return (
              <ColumnChartCard
                key={key}
                title={title}
                data={chartData}
                barColor={wuPalette.primary}
              />
            );
          case 'bar':
          default:
            return (
              <BarChartCard
                key={key}
                title={title}
                data={chartData}
                barColor={wuPalette.primary}
              />
            );
        }
      })
  }
</Box>


      </Container>

      <footer style={{
        backgroundColor: '#000000',
        color: '#FFC107',
        padding: '1.5rem 0',
        textAlign: 'center',
        marginTop: 0,
        borderTop: '2px solid #FFC107',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div><strong>Global Security Operations Center</strong><br/>
          Live HeadCount against Occupancy dashboard for Western Union — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
             style={{ color: '#FFC107', textDecoration: 'underline' }}>
            GSOC Mail
          </a>&nbsp;|&nbsp;
          Landline:&nbsp;<span style={{ color: '#FFC107' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}





C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\BarChartCard.jsx



import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import { ComposedChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';

export default function BarChartCard({ title, data, barColor }) {
  return (
    <Card sx={{ flex: '1 1 16%', minWidth: 200 }}>
      <CardContent>
        <Typography variant="subtitle1" align="center" gutterBottom>{title}</Typography>
        <ResponsiveContainer width="100%" height={200}>
          <ComposedChart layout="vertical" data={data} margin={{ left: 20, right: 10 }}>
            <XAxis type="number" hide />
            <YAxis dataKey="name" type="category" hide/>
            <Tooltip />
            <Bar dataKey="value" barSize={12} fill={barColor} radius={[0,4,4,0]}/>
          </ComposedChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}





C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\ChartCard.jsx

// // // main


// // src/components/ChartCard.jsx
// // import React, { useState } from 'react';
// import React, { Fragment, useState } from 'react';
// import { Card, CardContent, Typography, Box } from '@mui/material';
// import {
//   AreaChart,
//   Area,
//   Line,
//   XAxis,
//   YAxis,
//   Tooltip,
//   ResponsiveContainer,
//   CartesianGrid,
//   Legend,
//   Brush,
//   LabelList,
//   ReferenceLine,
// } from 'recharts';
// import dayjs from 'dayjs';

// export default function ChartCard({
//   title,
//   data = [],
//   dataKey = 'value',
//   chartHeight = 350,
//   colors = { head: '#FFC107', cap: '#B0BEC5' },
//   animateDuration = 800,
//   showCrosshair = true,
//   timeFormat = 'HH:mm:ss',
//     axisProps = {},               // NEW
//   tooltipFormatter = null,      // NEW
// }) {
//   const [hidden, setHidden] = useState({});
//   const [activeIndex, setActiveIndex] = useState(null);

//   if (!Array.isArray(data) || !data.length) {
//     return (
//       <Card sx={{ mb: 2 }}>
//         <CardContent sx={{ textAlign: 'center' }}>
//           <Typography variant="h6">{title}</Typography>
//           <Typography variant="body2">No data to display.</Typography>
//         </CardContent>
//       </Card>
//     );
//   }

//   const hasCapacity = data[0].Capacity != null;
//   const handleLegendClick = o => {
//     const { dataKey } = o;
//     setHidden(prev => ({ ...prev, [dataKey]: !prev[dataKey] }));
//   };

//   return (
//     <Card sx={{ mb: 2 }}>
//       <CardContent>
//         {/* Chart title */}
//         <Typography variant="h6" gutterBottom sx={{ color: colors.head }}>
//           {title}
//         </Typography>

//         {/* Chart container */}
//         <Box sx={{ width: '100%', height: chartHeight }}>
//           <ResponsiveContainer>
//             <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
//               <defs>
//                 <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
//                   <stop offset="50%" stopColor={colors.head} stopOpacity={0.4} />
//                   <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
//                 </linearGradient>
//               </defs>

//               {/* Grid */}
//               <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />

//               {/* Crosshair vertical line */}
//               {showCrosshair && activeIndex != null && data[activeIndex] && (
//                 <ReferenceLine
//                   x={data[activeIndex].name}
//                   stroke={colors.head}
//                   strokeOpacity={0.5}
//                 />
//               )}

//               <XAxis
//                 dataKey="name"
//                 tick={{ fill: '#FFF', fontWeight: 600 }}
//                 tickFormatter={t => {
//                   // if timestamp-like, format; else just return
//                   return typeof t === 'number'
//                     ? dayjs(t).format(timeFormat)
//                     : t;
                    
//                 }}
//                 label={{
            
//                   position: 'insideBottomRight',
//                   offset: -0,
//                   fill: '#FFF',
//                   fontWeight: 600
//                 }}
//                 {...axisProps.xAxis}
//               />

//               <YAxis
//                 tick={{ fill: '#FFF', fontWeight: 600 }}
//                 label={{
//                   value: 'Count',
//                   angle: -90,
//                   position: 'insideLeft',
//                   fill: '#FFF',
//                   fontWeight: 600
//                 }}
//                  {...axisProps.yAxis}
//               />

//               {/* Tooltip & Legend */}
//                <Tooltip
//                 contentStyle={{ backgroundColor: '#000', border: `1px solid ${colors.head}`, padding: '1rem' }}
//                 cursor={showCrosshair}
//                 isAnimationActive={false}
//                 onMouseMove={o => setActiveIndex(o && o.activeTooltipIndex)}
             
             
//                 content={({ active, payload }) => {
//    if (!active || !payload || !payload.length) return null;
//    const { breakdown = {}, name } = payload[0].payload;
//    return (
//      <Box
//        sx={{
//          backgroundColor: '#000',     // ensure black background
//          border: `1px solid ${colors.head}`,
//         padding: 1,
//          borderRadius: 1,
//        }}
//      >
//        <Typography variant="subtitle2" sx={{ color: colors.head, mb: 1 }}>
//          {name}
//        </Typography>
//        {Object.entries(breakdown).map(([key, val]) => (
//          <Typography key={key} variant="body2" sx={{ color: '#FFF' }}>
//            {key}: {val}
//          </Typography>
//        ))}
//      </Box>
//    );
//  }}
//                />

//               <Legend wrapperStyle={{ color: '#FFF' }} onClick={handleLegendClick} />

//               {/* Brush for zooming/panning */}
//               {/* <Brush
//                 dataKey="name"
//                 height={30}
//                 stroke={colors.head}
//                 travellerWidth={10}
//                 updateId={data.length} // reset on data change
//               /> */}

//               {/* Capacity area */}
//               {hasCapacity && !hidden.Capacity && (
//                 <Area
//                   type="monotone"
//                   dataKey="Capacity"
//                   name="Capacity"
//                   stroke={colors.cap}
//                   fill={`${colors.cap}33`}
//                   dot={false}
//                 >
//                   <LabelList
//                     dataKey="Capacity"
//                     position="top"
//                     style={{ fill: colors.cap, fontSize: 10, fontWeight: 600 }}
//                   />
//                 </Area>
//               )}

//               {/* Headcount area */}
//               {!hidden.Headcount && (
//                 <Area
//                   type="monotone"
//                   dataKey={hasCapacity ? 'Headcount' : dataKey}
//                   name={hasCapacity ? 'Headcount' : dataKey}
//                   stroke={colors.head}
//                   fill="url(#colorHead)"
//                   dot={false}
//                   isAnimationActive
//                   animationDuration={animateDuration}
//                 >
//                   <LabelList
//                     dataKey={hasCapacity ? 'Headcount' : dataKey}
//                     position="top"
//                     style={{ fill: '#FFF', fontSize: 12, fontWeight: 600 }}
//                   />
//                 </Area>
//               )}

//               {/* Overlay line for crisp “spark” */}
//               {!hidden.Headcount && (
//                 <Line
//                   type="monotone"
//                   dataKey={hasCapacity ? 'Headcount' : dataKey}
//                   stroke={colors.head}
//                   strokeWidth={2}
//                   dot={false}
//                   isAnimationActive
//                   animationDuration={animateDuration}
//                   activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
//                 />
//               )}
//             </AreaChart>
//           </ResponsiveContainer>
//         </Box>
//       </CardContent>
//     </Card>
//   );
// }





























// src/components/ChartCard.jsx
import React, { useState, useRef } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList,
  ReferenceLine,
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 350,
  colors = { head: '#FFC107', cap: '#000000' },
  animateDuration = 800,
  showCrosshair = true,
  timeFormat = 'HH:mm:ss',
  axisProps = {},
  tooltipFormatter = null,
  disableLegendToggle = false,     // prevent hiding via legend click
}) {
  const [hidden, setHidden] = useState({});
  const [activeIndex, setActiveIndex] = useState(null);
  const [replayKey, setReplayKey] = useState(0);
  const containerRef = useRef();

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;

  // Prevent toggling series off
  const handleLegendClick = o => {
    if (disableLegendToggle) return;
    const { dataKey } = o;
    setHidden(prev => ({ ...prev, [dataKey]: !prev[dataKey] }));
  };

  // Clicking chart area will replay animations
  const handleChartClick = () => {
    setReplayKey(k => k + 1);
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        {/* Title */}
        <Typography variant="h6" gutterBottom sx={{ color: colors.head }}>
          {title}
        </Typography>

        {/* Chart */}
        <Box
          ref={containerRef}
          sx={{ width: '100%', height: chartHeight, cursor: 'pointer' }}
          onClick={handleChartClick}
        >
          <ResponsiveContainer key={replayKey}>
            <AreaChart
              data={data}
              margin={{ top: 20, right: 30, left: 0, bottom: 20 }}
              onMouseMove={e => {
                if (e && e.activeTooltipIndex != null) {
                  setActiveIndex(e.activeTooltipIndex);
                }
              }}
            >
              {/* Gradients */}
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="50%" stopColor={colors.head} stopOpacity={0.4} />
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                </linearGradient>
              </defs>

              {/* Grid */}
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(0,0,0,0.1)" />

              {/* Crosshair */}
              {showCrosshair && activeIndex != null && data[activeIndex] && (
                <ReferenceLine
                  x={data[activeIndex].name}
                  stroke={colors.head}
                  strokeOpacity={0.5}
                />
              )}

              {/* X Axis */}
              <XAxis
                dataKey="name"
                tick={{ fill: '#000', fontWeight: 600 }}
                tickFormatter={t =>
                  typeof t === 'number' ? dayjs(t).format(timeFormat) : t
                }
                label={{
                
                  position: 'insideBottomRight',
                  offset: -10,
                  fill: '#000',
                  fontWeight: 600,
                }}
                {...axisProps.xAxis}
              />

              {/* Y Axis */}
              <YAxis
                tick={{ fill: '#fff', fontWeight: 600 }}
                label={{
                  value: 'Count',
                  angle: -90,
                  position: 'insideLeft',
                  fill: '#000',
                  fontWeight: 600,
                }}
                {...axisProps.yAxis}
              />

              {/* Tooltip */}
              <Tooltip
                contentStyle={{
                  backgroundColor: '#fff',
                  border: `1px solid ${colors.head}`,
                  padding: '0.5rem',
                }}
                cursor={showCrosshair}
                isAnimationActive={false}
                content={({ active, payload }) => {
                  if (!active || !payload || !payload.length) return null;
                  const { breakdown = {}, name } = payload[0].payload;
                  return (
                    <Box sx={{ backgroundColor: '#fff', border: `1px solid ${colors.head}`, p:1, borderRadius:1 }}>
                      <Typography variant="subtitle2" sx={{ color: colors.head, mb: 0.5 }}>
                        {name}
                      </Typography>
                      {Object.entries(breakdown).map(([key,val])=>(
                        <Typography key={key} variant="body2" sx={{ color: '#000' }}>
                          {key}: {val}
                        </Typography>
                      ))}
                    </Box>
                  );
                }}
              />

              {/* Legend */}
              <Legend
                wrapperStyle={{ color: '#000' }}
                onClick={handleLegendClick}
                iconType="square"
              />

              {/* Capacity Area */}
              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Total Seat"
                  stroke={colors.cap}
                  fill={`${colors.cap}33`}
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                >
                  <LabelList
                    dataKey="Capacity"
                    position="top"
                    style={{ fill: colors.cap, fontSize: 12, fontWeight: 600 }}
                  />
                </Area>
              )}

              {/* Headcount Area */}
              {!hidden.Headcount && (
                <Area
                  type="monotone"
                  dataKey={hasCapacity ? 'Headcount' : dataKey}
                  name="Usage"
                  stroke={colors.head}
                  fill="url(#colorHead)"
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                >
                  <LabelList
                    dataKey={hasCapacity ? 'Headcount' : dataKey}
                    position="top"
                    style={{ fill: '#2ecc71', fontSize: 15, fontWeight: 600 }}
                  />
                </Area>
              )}

              {/* Overlay Line */}
              {!hidden.Headcount && (
                <Line
                  type="monotone"
                  dataKey={hasCapacity ? 'Headcount' : dataKey}
                  stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                  activeDot={{ r: 6, stroke: '#000', strokeWidth: 2 }}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}





C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\ColumnChartCard.jsx


import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import { ComposedChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';

export default function ColumnChartCard({ title, data, barColor }) {
  return (
    <Card sx={{ flex: '1 1 16%', minWidth: 200 }}>
      <CardContent>
        <Typography variant="subtitle1" align="center" gutterBottom>{title}</Typography>
        <ResponsiveContainer width="100%" height={200}>
          <ComposedChart data={data} margin={{ top: 10, bottom: 10 }}>
            <XAxis dataKey="name" hide />
            <YAxis hide />
            <Tooltip />
            <Bar dataKey="value" barSize={20} fill={barColor} radius={[4,4,0,0]} />
          </ComposedChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}





C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\PieChartCard.jsx


import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({ title, data, colors }) {
  return (
    <Card sx={{ flex: '1 1 16%', minWidth: 200 }}>
      <CardContent>
        <Typography variant="subtitle1" align="center" gutterBottom>{title}</Typography>
        <ResponsiveContainer width="100%" height={200}>
          <PieChart>
            <Pie
              data={data}
              dataKey="value"
              nameKey="name"
              innerRadius={40}
              outerRadius={80}
              paddingAngle={4}
            >
              {data.map((_, idx) => (
                <Cell key={idx} fill={colors[idx % colors.length]} />
              ))}
            </Pie>
            <Tooltip/>
            <Legend verticalAlign="bottom" height={30}/>
          </PieChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}


