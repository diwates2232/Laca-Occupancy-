C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\History.jsx


Uncaught runtime errors:
×
ERROR
selectedDate is not defined
ReferenceError: selectedDate is not defined
    at History (http://localhost:3000/main.e3d27d41a2c8a2d1f181.hot-update.js:80:21)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:60418:18)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:50628:20)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:52321:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:52907:16)
    at runWithFiberInDEV (http://localhost:3000/static/js/bundle.js:48399:68)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:54980:93)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:54873:38)
    at renderRootSync (http://localhost:3000/static/js/bundle.js:54857:7)
    at performWorkOnRoot (http://localhost:3000/static/js/bundle.js:54621:42)
ERROR
setDateList is not defined
ReferenceError: setDateList is not defined
    at http://localhost:3000/main.e3d27d41a2c8a2d1f181.hot-update.js:68:9
ERROR
setDateList is not defined
ReferenceError: setDateList is not defined
    at http://localhost:3000/main.e3d27d41a2c8a2d1f181.hot-update.js:68:9



Read all files carefully and solve this isuse carefully

// src/pages/History.jsx

import React, { useEffect, useState } from 'react';
// import { Container, MenuItem, Select, InputLabel, FormControl } from '@mui/material';
import { Container, MenuItem, Select, InputLabel, FormControl, Grid, Button, Typography } from '@mui/material';
import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import DataTable from '../components/DataTable';
import { partitionList } from '../services/occupancy.service'; // or hardcode your list
import { fetchHistory } from '../api/occupancy.service';
import { useNavigate } from 'react-router-dom';

export default function History() {
  const [location, setLocation] = useState('');
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    setLoading(true);
    fetchHistory(location || null).then(json => {
      setData(json);
      setLoading(false);

     // if top-level (all LACA), capture dateList
     if (!location) {
       setDateList(json.summaryByDate.map(d => d.date));
     }
    
    });

  }, [location]);

  if (loading) return <LoadingSpinner />;
  if (!data) return null;


 // when location==’’: user must pick a date first
 if (!location && !selectedDate) {
   return (
     <>
       <Header />
       <Container sx={{ mt: 2 }}>
         <Typography variant="h6">Select a date:</Typography>
         <FormControl fullWidth sx={{ mt: 1 }}>
           <InputLabel>Date</InputLabel>
          <Select
             value={selectedDate}
             label="Date"
             onChange={e => setSelected(e.target.value)}
           >
             {dateList.map(d => (
               <MenuItem key={d} value={d}>{d}</MenuItem>
             ))}
           </Select>
         </FormControl>
       </Container>
       <Footer />
     </>
   );
 }
 // after picking a date, find that summary
 const daySummary = data.summaryByDate.find(d => d.date === selectedDate);
 // build cards for each partition in that day
 const partitionCards = Object.entries(daySummary.partitions).map(([name, stats]) => ({
   title: name,
   stats: [
     { label: 'Total',       value: stats.total },
     { label: 'Employees',   value: stats.Employee },
     { label: 'Contractors', value: stats.Contractor }
   ]
 }));




  // Prepare a line chart of total vs date
  const chartData = data.summaryByDate.map(d => ({
    name: d.date,
    value: d.region.total
  }));

  // Columns for details
  const columns = [
    { field: 'ObjectName1', headerName: 'Name' },
    { field: 'SwipeDate', headerName: 'Date' },
    { field: 'PersonnelType', headerName: 'Type' },
    // add more
  ];

  return (
    <>
      <Header />
      <Container sx={{ mt: 2 }}>

       {location ? (
         <Button onClick={() => setLocation('')} variant="outlined">
           ← Back to all dates
         </Button>
       ) : (
         <Button onClick={() => setSelected('')} variant="outlined">
           ← Change date
         </Button>
       )}


       <Typography variant="h5" sx={{ my: 2 }}>
         {location
           ? `History for ${location}`
           : `Summary for ${selectedDate}`
         }
       </Typography>

       <Grid container spacing={2}>
         {partitionCards.map(card => (
           <Grid item xs={12} sm={6} md={4} key={card.title}>
             <Button
               fullWidth
               variant="outlined"
               onClick={() => {
                 // if already in partition view, do nothing
                 if (!location) setLocation(card.title);
               }}
             >
               <SummaryCard title={card.title} stats={card.stats} />
             </Button>
           </Grid>
         ))}
       </Grid>


        <FormControl fullWidth sx={{ mb: 2 }}>
          <InputLabel id="loc-label">Partition</InputLabel>
          <Select
            labelId="loc-label"
            value={location}
            label="Partition"
            onChange={e => setLocation(e.target.value)}
          >
            <MenuItem value="">All LACA</MenuItem>
            {partitionList.map(p => (
              <MenuItem key={p} value={p}>{p}</MenuItem>
            ))}
          </Select>
        </FormControl>

        <ChartCard title="Historical Total by Date" data={chartData} />

        <DataTable columns={columns} rows={data.details} />
      </Container>
      <Footer />
    </>
  );
}

