import { BarChart, Bar, /* … */ } from 'recharts';

if (chartType === 'bar') {
  return (
    <Card sx={sx}>
      <CardContent>
        <Typography variant="h6">{title}</Typography>
        <ResponsiveContainer width="100%" height={chartHeight}>
          <BarChart data={data}>
            <XAxis dataKey="name" tick={{ fill: '#FFF' }} />
            <YAxis tick={{ fill: '#FFF' }} />
            <Tooltip />
            <Legend onClick={handleLegendClick} />
            <CartesianGrid strokeDasharray="3 3" />
            <Bar 
              dataKey="value" 
              isAnimationActive={false}
              onClick={(d) => console.log('Clicked partition', d.name)}
              fill={({ fill }) => fill}  // use per-item fill
            />
            <Brush dataKey="name" height={30} stroke="#FFC107" />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}














// src/components/ChartCard.jsx



import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
+  Brush,
} from 'recharts';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 250,
+  colors = { head: '#FFC107', cap: '#B0BEC5' },
}) {
+ const [hidden, setHidden] = useState({});  // track which series are hidden

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;

+ const handleLegendClick = (o) => {
+   const { dataKey } = o;
+   setHidden(prev => ({ ...prev, [dataKey]: !prev[dataKey] }));
+ };

  return (
    <Card sx={{ mb: 2, border: '2px solid #FFC107' }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ color: colors.head }}>
          {title}
        </Typography>
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.4}/>
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0}/>
                </linearGradient>
              </defs>

              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              <XAxis dataKey="name" tick={{ fill: '#FFF', fontWeight: 600 }} />
              <YAxis tick={{ fill: '#FFF', fontWeight: 600 }} />

-             <Tooltip contentStyle={{ backgroundColor: '#333' }} itemStyle={{ color: '#FFF' }} />
+             <Tooltip 
+               contentStyle={{ backgroundColor: '#000', border: `1px solid ${colors.head}` }}
+               labelStyle={{ color: '#FFC107' }}
+               formatter={(value, name) => {
+                 if (name === 'Headcount' && hasCapacity) {
+                   const cap = data.find(d => d[value.name])?.Capacity;
+                   const pct = ((value / cap) * 100).toFixed(1);
+                   return [`${value} (${pct}%)`, name];
+                 }
+                 return [value, name];
+               }}
+             />

-             <Legend wrapperStyle={{ color: '#FFF' }} />
+             <Legend 
+               wrapperStyle={{ color: '#FFF' }}
+               onClick={handleLegendClick}
+             />

+             {/* brush for zooming/panning */}
+             <Brush
+               dataKey="name"
+               height={30}
+               stroke={colors.head}
+               travellerWidth={10}
+             />

              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Capacity"
-                 stroke="#B0BEC5"
+                 stroke={colors.cap}
-                 fill="rgba(176,190,197,0.2)"
+                 fill={`${colors.cap}33`}
                  dot={false}
                />
              )}

              {!hidden.Headcount && (
                <Area
                  type="monotone"
-                 dataKey={hasCapacity ? 'Headcount' : dataKey}
+                 dataKey={hasCapacity ? 'Headcount' : dataKey}
                  name={hasCapacity ? 'Headcount' : dataKey}
-                 stroke="#FFC107"
+                 stroke={colors.head}
-                 fill="url(#colorHead)"
+                 fill="url(#colorHead)"
                  dot={{ stroke: colors.head, strokeWidth: 2 }}
                />
              )}
              
              {!hidden.Headcount && (
                <Line
                  type="monotone"
-                 dataKey={hasCapacity ? 'Headcount' : dataKey}
+                 dataKey={hasCapacity ? 'Headcount' : dataKey}
-                 stroke="#FFC107"
+                 stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}









// In src/pages/Dashboard.jsx

{!loading && (
-  <ChartCard
-    title="Partition Totals"
-    chartHeight={320}
-    data={partitions.map(p => ({ name: p.name, value: p.total }))}
-    sx={{ border: '2px solid #FFC107' }}
-  />
+  <ChartCard
+    chartType="bar"                  // new prop
+    title="Live Totals by Partition"
+    chartHeight={360}
+    data={partitions.map((p,i) => ({
+      name: p.name,
+      value: p.total,
+      fill: i % 2 === 0 ? '#FFC107' : '#B0BEC5'
+    }))}
+    dataKey="value"
+    colors={{ head: '#FFC107', cap: '#B0BEC5' }}
+    sx={{ border: '2px solid #FFC107' }}
+  />
)}











import { BarChart, Bar, /* … */ } from 'recharts';

if (chartType === 'bar') {
  return (
    <Card sx={sx}>
      <CardContent>
        <Typography variant="h6">{title}</Typography>
        <ResponsiveContainer width="100%" height={chartHeight}>
          <BarChart data={data}>
            <XAxis dataKey="name" tick={{ fill: '#FFF' }} />
            <YAxis tick={{ fill: '#FFF' }} />
            <Tooltip />
            <Legend onClick={handleLegendClick} />
            <CartesianGrid strokeDasharray="3 3" />
            <Bar 
              dataKey="value" 
              isAnimationActive={false}
              onClick={(d) => console.log('Clicked partition', d.name)}
              fill={({ fill }) => fill}  // use per-item fill
            />
            <Brush dataKey="name" height={30} stroke="#FFC107" />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}










Read below dashboard file and help to improve Chat to amke more interactive and add legends and deatails fill more brand colours 

// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build and sort partitions
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 1,
          pb: 2,
          px: '20px',        // ← exactly 20px padding both sides
        }}
      >
        {/* Top summary cards */}
        <Box
          display="flex"
          alignItems="stretch"
          sx={{ mb: 1, width: '100vw%' }}
        >
          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Today’s Headcount"
              total={todayTot}
              stats={[
                { label: 'Employees',   value: todayEmp },
                { label: 'Contractors', value: todayCont }
              ]}
              sx={{ height: 190, border: '2px solid #FFC107' }}
            />
          </Box>

          <Divider
            // orientation="vertical"
            flexItem
            sx={{ mx: 1 }}
          />

          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Realtime Headcount"
              total={realtimeTot}
              stats={[
                { label: 'Employees',   value: realtimeEmp },
                { label: 'Contractors', value: realtimeCont }
              ]}
              sx={{ height: 190, border: '2px solid #FFC107' }}
            />
          </Box>
        </Box>

        {/* Partition cards */}
        <Box mt={4} sx={{ width: '100vw%', display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {loading ? (
            <Skeleton variant="rectangular" width="100vw%" height={240} />
          ) : (
            partitions.map(p => (
              <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={p.name}
                  total={p.total}
                  stats={[
                    { label: 'Employees',   value: p.Employee },
                    { label: 'Contractors', value: p.Contractor },
                    // only show TempBadge on Costa Rica
                    ...(p.name === 'CR.Costa Rica Partition'
                      ? [{ label: 'Temp Badge', value: p.TempBadge }]
                      : [])
                  ]}
                  sx={{ width: '100vw%', border: '2px solid #FFC107' }}
                />
              </Box>
            ))
          )}
        </Box>

        {/* Live totals chart */}
        <Box mt={4} sx={{ width: '100vw%' ,p:2, border: '2px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h6" gutterBottom>
              Live Totals by Partition
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>

          {loading ? (
            <Skeleton variant="rectangular" width="100%" height={320} />
          ) : (
            <ChartCard
              title="Partition Totals"
              chartHeight={320}
              data={partitions.map(p => ({ name: p.name, value: p.total }))}
              sx={{ border: '2px solid #FFC107' }}
            />
          )}
        </Box>
      </Container>

      <footer style={{
        backgroundColor: '#000000',
        color: '#FFC107',
        padding: '1.5rem 0',
        textAlign: 'center',
        marginTop: 0,
        borderTop: '2px solid #FFC107',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div><strong>Global Security Operations Center</strong><br/>
          Live HeadCount against Occupancy dashboard for Western Union — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
             style={{ color: '#FFC107', textDecoration: 'underline' }}>
            GSOC Mail
          </a>&nbsp;|&nbsp;
          Landline:&nbsp;<span style={{ color: '#FFC107' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}






//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\ChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';

import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
} from 'recharts';


export default function ChartCard({
  title, data = [], dataKey = 'value', chartHeight = 250
}) {
  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent sx={{ textAlign: 'center' }}>
        <Typography variant="h6" gutterBottom>{title}</Typography>
        <Box sx={{ width: '100%', height: chartHeight }}>

 <ResponsiveContainer>
      
            <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              {/* define yellow gradient */}
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#FFC107" stopOpacity={0.4}/>
                  <stop offset="95%" stopColor="#FFC107" stopOpacity={0}/>
                </linearGradient>
              </defs>


              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              <XAxis dataKey="name" tick={{ fill: '#FFF', fontWeight: 600 }} />
              <YAxis tick={{ fill: '#FFF', fontWeight: 600 }} />
              <Tooltip contentStyle={{ backgroundColor: '#333' }} itemStyle={{ color: '#FFF' }} />
              <Legend wrapperStyle={{ color: '#FFF' }} />

              {hasCapacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Capacity"
                  stroke="#B0BEC5"
                  fill="rgba(176,190,197,0.2)"
                  dot={false}
                />
              )}

              <Area
                type="monotone"
                dataKey={hasCapacity ? 'Headcount' : dataKey}
                name={hasCapacity ? 'Headcount' : dataKey}
                stroke="#FFC107"
                fill="url(#colorHead)"
                dot={{ stroke: '#FFC107', strokeWidth: 2 }}
              />
              
              {/* overlay a crisp line on top for that market “spark” */}
              <Line
                type="monotone"
                dataKey={hasCapacity ? 'Headcount' : dataKey}
                stroke="#FFC107"
                strokeWidth={2}
                dot={false}
                activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
              />
            </AreaChart>


          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}

