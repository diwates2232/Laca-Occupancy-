--- src/components/ChartCard.jsx
+++ src/components/ChartCard.jsx
@@ export default function ChartCard({
   const headKey = hasCapacity ? 'Headcount' : dataKey;

+  // Build summary: for each distinct x (e.g. partition or floor name), show its latest value
+  // If multiple series, data may contain multiple names; here data is an array of { name, value }
+  // So we take the last point for each name in the current data slice
+  const summaryMap = {};
+  data.forEach(point => {
+    summaryMap[point.name] = point[headKey];
+  });
+  const summaryLabels = Object.entries(summaryMap).map(
+    ([nm, val]) => `${nm}: ${val}`
+  );
 
   const handleLegendClick = o => {
@@
-      {/* Title */}
-      <Box display="flex" alignItems="baseline" justifyContent="space-between" mb={1}>
-        <Typography variant="h6" sx={{ color: colors.head, fontWeight: 700 }}>
-          {title}
-        </Typography>
-        {/* Current value display */}
-        <Typography variant="subtitle1" sx={{ color: colors.head, fontWeight: 600 }}>
-          Current: {currentValue}
-        </Typography>
-      </Box>
+      {/* Title + current value */}
+      <Box display="flex" alignItems="baseline" justifyContent="space-between" mb={1}>
+        <Typography variant="h6" sx={{ color: colors.head, fontWeight: 700 }}>
+          {title}
+        </Typography>
+        <Typography variant="subtitle1" sx={{ color: colors.head, fontWeight: 600 }}>
+          Current: {currentValue}
+        </Typography>
+      </Box>
+
+      {/* Summary labels for each series name */}
+      <Box display="flex" flexWrap="wrap" gap={2} mb={2}>
+        {summaryLabels.map((label, idx) => (
+          <Typography
+            key={idx}
+            variant="body2"
+            sx={{ color: colors.cap, fontWeight: 600 }}
+          >
+            {label}
+          </Typography>
+        ))}
+      </Box>
 
       {/* Chart */}
       <Box sx={{ width: '100%', height: chartHeight, background: '#1A1A1A', p: 1, borderRadius: 1 }}>








// src/components/ChartCard.jsx
import React, { useState } from 'react';
import { Card, CardContent, Typography, Box, useTheme } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Brush,
  LabelList,
  ReferenceLine,
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 350,
  colors = { head: '#FFC107', cap: '#B0BEC5' },
  animateDuration = 800,
  showCrosshair = true,
  timeFormat = 'HH:mm:ss',
}) {
  const theme = useTheme();
  const [hidden, setHidden] = useState({});
  const [activeIndex, setActiveIndex] = useState(null);

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2, background: theme.palette.background.paper }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;
  const headKey = hasCapacity ? 'Headcount' : dataKey;

  // derive the most recent value
  const lastPoint = data[data.length - 1];
  const currentValue = lastPoint ? lastPoint[headKey] : 0;

  const handleLegendClick = o => {
    const { dataKey: key } = o;
    setHidden(prev => ({ ...prev, [key]: !prev[key] }));
  };

  return (
    <Card sx={{ mb: 2, background: theme.palette.background.paper }}>
      <CardContent>
        {/* Title */}
        <Box display="flex" alignItems="baseline" justifyContent="space-between" mb={1}>
          <Typography variant="h6" sx={{ color: colors.head, fontWeight: 700 }}>
            {title}
          </Typography>
          {/* Current value display */}
          <Typography variant="subtitle1" sx={{ color: colors.head, fontWeight: 600 }}>
            Current: {currentValue}
          </Typography>
        </Box>

        {/* Chart */}
        <Box sx={{ width: '100%', height: chartHeight, background: '#1A1A1A', p: 1, borderRadius: 1 }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
              <defs>
                <linearGradient id="gradHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.5}/>
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0}/>
                </linearGradient>
              </defs>

              <CartesianGrid stroke="#444" strokeDasharray="3 3" />

              {/* Crosshair */}
              {showCrosshair && activeIndex != null && data[activeIndex] && (
                <ReferenceLine
                  x={data[activeIndex].name}
                  stroke={colors.head}
                  strokeDasharray="3 3"
                />
              )}

              <XAxis
                dataKey="name"
                axisLine={{ stroke: '#666' }}
                tickLine={false}
                tick={{ fill: '#EEE', fontSize: 12 }}
                tickFormatter={t => (typeof t==='number'? dayjs(t).format(timeFormat) : t)}
                padding={{ left: 10, right: 10 }}
              />
              <YAxis
                axisLine={{ stroke: '#666' }}
                tickLine={false}
                tick={{ fill: '#EEE', fontSize: 12 }}
                padding={{ top: 10, bottom: 0 }}
              />

              <Tooltip
                contentStyle={{ backgroundColor: '#222', border: `1px solid ${colors.head}` }}
                labelStyle={{ color: colors.head, fontWeight: 600 }}
                itemStyle={{ color: '#FFF' }}
                cursor={{ fill: 'rgba(255,255,255,0.1)' }}
                isAnimationActive={false}
                onMouseMove={o => setActiveIndex(o && o.activeTooltipIndex)}
                formatter={(val, name) => {
                  if (name === 'Headcount' && hasCapacity) {
                    const cap = data.find(d=>d.Headcount===val)?.Capacity||0;
                    const pct = cap ? ((val/cap)*100).toFixed(1) : '0.0';
                    return [`${val} (${pct}%)`, name];
                  }
                  return [val, name];
                }}
              />

              <Legend
                wrapperStyle={{ color: '#EEE', bottom: 0, left: 'center' }}
                onClick={handleLegendClick}
              />

              {/* Main headcount area */}
              {!hidden[headKey] && (
                <Area
                  type="monotone"
                  dataKey={headKey}
                  stroke={colors.head}
                  fill="url(#gradHead)"
                  strokeWidth={2}
                  isAnimationActive
                  animationDuration={animateDuration}
                  dot={false}
                />
              )}

              {/* Capacity area */}
              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  stroke={colors.cap}
                  fill="rgba(176,190,197,0.2)"
                  strokeDasharray="5 5"
                  isAnimationActive
                  animationDuration={animateDuration}
                  dot={false}
                />
              )}

              {/* Overlay line */}
              {!hidden[headKey] && (
                <Line
                  type="monotone"
                  dataKey={headKey}
                  stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                  activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                />
              )}

              {/* Brush with mini preview */}
              <Brush
                dataKey="name"
                height={40}
                stroke={colors.head}
                travellerWidth={12}
                updateId={data.length}
              >
                <AreaChart data={data}>
                  <defs>
                    <linearGradient id="miniGrad" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor={colors.head} stopOpacity={0.3}/>
                      <stop offset="95%" stopColor={colors.head} stopOpacity={0}/>
                    </linearGradient>
                  </defs>
                  <Area
                    type="monotone"
                    dataKey={headKey}
                    stroke={colors.head}
                    fill="url(#miniGrad)"
                    strokeWidth={1}
                    dot={false}
                  />
                </AreaChart>
              </Brush>
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}







// src/components/ChartCard.jsx
import React, { useState } from 'react';
import { Card, CardContent, Typography, Box, useTheme } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Brush,
  LabelList,
  ReferenceLine,
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 350,
  colors = { head: '#FFC107', cap: '#B0BEC5' },
  animateDuration = 800,
  showCrosshair = true,
  timeFormat = 'HH:mm:ss',
}) {
  const theme = useTheme();
  const [hidden, setHidden] = useState({});
  const [activeIndex, setActiveIndex] = useState(null);

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2, background: theme.palette.background.paper }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;
  const headKey = hasCapacity ? 'Headcount' : dataKey;

  const handleLegendClick = o => {
    const { dataKey: key } = o;
    setHidden(prev => ({ ...prev, [key]: !prev[key] }));
  };

  return (
    <Card sx={{ mb: 2, background: theme.palette.background.paper }}>
      <CardContent>
        {/* Title */}
        <Typography
          variant="h6"
          gutterBottom
          sx={{ color: colors.head, fontWeight: 700 }}
        >
          {title}
        </Typography>

        {/* Chart */}
        <Box sx={{ width: '100%', height: chartHeight, background: '#1A1A1A', p: 1, borderRadius: 1 }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
              {/* Gradient for headcount */}
              <defs>
                <linearGradient id="gradHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.5}/>
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0}/>
                </linearGradient>
              </defs>

              <CartesianGrid stroke="#444" strokeDasharray="3 3" />

              {/* Crosshair */}
              {showCrosshair && activeIndex != null && data[activeIndex] && (
                <ReferenceLine
                  x={data[activeIndex].name}
                  stroke={colors.head}
                  strokeDasharray="3 3"
                />
              )}

              <XAxis
                dataKey="name"
                axisLine={{ stroke: '#666' }}
                tickLine={false}
                tick={{ fill: '#EEE', fontSize: 12 }}
                tickFormatter={t => (typeof t==='number'? dayjs(t).format(timeFormat) : t)}
                padding={{ left: 10, right: 10 }}
              />
              <YAxis
                axisLine={{ stroke: '#666' }}
                tickLine={false}
                tick={{ fill: '#EEE', fontSize: 12 }}
                padding={{ top: 10, bottom: 0 }}
              />

              <Tooltip
                contentStyle={{ backgroundColor: '#222', border: `1px solid ${colors.head}` }}
                labelStyle={{ color: colors.head, fontWeight: 600 }}
                itemStyle={{ color: '#FFF' }}
                cursor={{ fill: 'rgba(255,255,255,0.1)' }}
                isAnimationActive={false}
                onMouseMove={o => setActiveIndex(o && o.activeTooltipIndex)}
                formatter={(val, name) => {
                  if (name === 'Headcount' && hasCapacity) {
                    const cap = data.find(d=>d.Headcount===val)?.Capacity||0;
                    const pct = cap ? ((val/cap)*100).toFixed(1) : '0.0';
                    return [`${val} (${pct}%)`, name];
                  }
                  return [val, name];
                }}
              />

              <Legend
                wrapperStyle={{ color: '#EEE', bottom: 0, left: 'center' }}
                onClick={handleLegendClick}
              />

              {/* Main headcount area */}
              {!hidden[headKey] && (
                <Area
                  type="monotone"
                  dataKey={headKey}
                  stroke={colors.head}
                  fill="url(#gradHead)"
                  strokeWidth={2}
                  isAnimationActive
                  animationDuration={animateDuration}
                  dot={false}
                />
              )}

              {/* Capacity area */}
              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  stroke={colors.cap}
                  fill="rgba(176,190,197,0.2)"
                  strokeDasharray="5 5"
                  isAnimationActive
                  animationDuration={animateDuration}
                  dot={false}
                />
              )}

              {/* Overlay line */}
              {!hidden[headKey] && (
                <Line
                  type="monotone"
                  dataKey={headKey}
                  stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                  activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                />
              )}

              {/* Brush with mini preview */}
              <Brush
                dataKey="name"
                height={40}
                stroke={colors.head}
                travellerWidth={12}
                updateId={data.length}
              >
                <AreaChart data={data}>
                  <defs>
                    <linearGradient id="miniGrad" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor={colors.head} stopOpacity={0.3}/>
                      <stop offset="95%" stopColor={colors.head} stopOpacity={0}/>
                    </linearGradient>
                  </defs>
                  <Area
                    type="monotone"
                    dataKey={headKey}
                    stroke={colors.head}
                    fill="url(#miniGrad)"
                    strokeWidth={1}
                    dot={false}
                  />
                </AreaChart>
              </Brush>
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}








// src/components/ChartCard.jsx
import React, { useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Brush,
  LabelList,
  ReferenceLine,
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 350,
  colors = { head: '#FFC107', cap: '#B0BEC5' },
  animateDuration = 800,
  showCrosshair = true,
  timeFormat = 'HH:mm:ss',
}) {
  const [hidden, setHidden] = useState({});
  const [activeIndex, setActiveIndex] = useState(null);

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;
  const handleLegendClick = o => {
    const { dataKey } = o;
    setHidden(prev => ({ ...prev, [dataKey]: !prev[dataKey] }));
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        {/* Chart title */}
        <Typography variant="h6" gutterBottom sx={{ color: colors.head }}>
          {title}
        </Typography>

        {/* Chart container */}
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={colors.head} stopOpacity={0.4} />
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                </linearGradient>
              </defs>

              {/* Grid */}
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />

              {/* Crosshair vertical line */}
              {showCrosshair && activeIndex != null && data[activeIndex] && (
                <ReferenceLine
                  x={data[activeIndex].name}
                  stroke={colors.head}
                  strokeOpacity={0.5}
                />
              )}

              <XAxis
                dataKey="name"
                tick={{ fill: '#FFF', fontWeight: 600 }}
                tickFormatter={t => {
                  // if timestamp-like, format; else just return
                  return typeof t === 'number'
                    ? dayjs(t).format(timeFormat)
                    : t;
                }}
                label={{
                  value: 'Time',
                  position: 'insideBottomRight',
                  offset: -10,
                  fill: '#FFF',
                  fontWeight: 600
                }}
              />

              <YAxis
                tick={{ fill: '#FFF', fontWeight: 600 }}
                label={{
                  value: 'Count',
                  angle: -90,
                  position: 'insideLeft',
                  fill: '#FFF',
                  fontWeight: 600
                }}
              />

              {/* Tooltip & Legend */}
              <Tooltip
                contentStyle={{ backgroundColor: '#000', border: `1px solid ${colors.head}` }}
                cursor={showCrosshair}
                isAnimationActive={false}
                onMouseMove={o => setActiveIndex(o && o.activeTooltipIndex)}
                labelStyle={{ color: colors.head, fontWeight: 600 }}
                formatter={(value, name) => {
                  if (name === 'Headcount' && hasCapacity) {
                    const cap = data.find(d => d.Headcount === value)?.Capacity || 0;
                    const pct = cap ? ((value / cap) * 100).toFixed(1) : '0.0';
                    return [`${value} (${pct}%)`, name];
                  }
                  return [value, name];
                }}
              />
              <Legend wrapperStyle={{ color: '#FFF' }} onClick={handleLegendClick} />

              {/* Brush for zooming/panning */}
              <Brush
                dataKey="name"
                height={30}
                stroke={colors.head}
                travellerWidth={10}
                updateId={data.length} // reset on data change
              />

              {/* Capacity area */}
              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Capacity"
                  stroke={colors.cap}
                  fill={`${colors.cap}33`}
                  dot={false}
                >
                  <LabelList
                    dataKey="Capacity"
                    position="top"
                    style={{ fill: colors.cap, fontSize: 10, fontWeight: 600 }}
                  />
                </Area>
              )}

              {/* Headcount area */}
              {!hidden.Headcount && (
                <Area
                  type="monotone"
                  dataKey={hasCapacity ? 'Headcount' : dataKey}
                  name={hasCapacity ? 'Headcount' : dataKey}
                  stroke={colors.head}
                  fill="url(#colorHead)"
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                >
                  <LabelList
                    dataKey={hasCapacity ? 'Headcount' : dataKey}
                    position="top"
                    style={{ fill: '#FFF', fontSize: 12, fontWeight: 600 }}
                  />
                </Area>
              )}

              {/* Overlay line for crisp “spark” */}
              {!hidden.Headcount && (
                <Line
                  type="monotone"
                  dataKey={hasCapacity ? 'Headcount' : dataKey}
                  stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                  activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}
