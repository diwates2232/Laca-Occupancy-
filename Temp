Now Read all files carefully and update one by one carefully ,
Dashboard.jsx from this page remove Select partation lable and Floor Wisw chart 
and add Select partation dropdown in header section side of flag very small dropdown 
when i click any partation then direct navigate into new page Partation Details page 
Where display Today partation headcount (Today partation Headcount render frim historical data)
and live partation Headcount,

Below make a Floor Wise Box Where display only Live People details 
only add display only 20 rows , and add see more details options
in one row display 3 box for floor
Display details like
Header Floor details , Total Live count 
Name |Emp id | Swipe time |PersonnelType | CardNumber | door name 


also upadte header like Western Union – LACA Costa Rica  Headcount ( Whwn i select Costa Rica partation) same has update for Cordoba, Panama etc..

also update this page in every seconds strickly


as per my requirnment update all below files carefully and give me updated files carefully



// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build and sort partitions
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 2,
          pb: 4,
          px: '20px',        // ← exactly 20px padding both sides
        }}
      >
        {/* Top summary cards */}
        <Box
          display="flex"
          alignItems="stretch"
          sx={{ mb: 2, width: '100vw%' }}
        >
          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Today’s Headcount"
              total={todayTot}
              stats={[
                { label: 'Employees',   value: todayEmp },
                { label: 'Contractors', value: todayCont }
              ]}
              sx={{ height: 190 }}
            />
          </Box>

          <Divider
            // orientation="vertical"
            flexItem
            sx={{ mx: 2 }}
          />

          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Realtime Headcount"
              total={realtimeTot}
              stats={[
                { label: 'Employees',   value: realtimeEmp },
                { label: 'Contractors', value: realtimeCont }
              ]}
              sx={{ height: 190 }}
            />
          </Box>
        </Box>

        {/* Partition cards */}
        <Box mt={4} sx={{ width: '100vw%', display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {loading ? (
            <Skeleton variant="rectangular" width="100vw%" height={240} />
          ) : (
            partitions.map(p => (
              <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={p.name}
                 
                  total={p.total}
  

 stats={[
   { label: 'Employees',   value: p.Employee },
   { label: 'Contractors', value: p.Contractor },
   // only show TempBadge on Costa Rica
   ...(p.name === 'CR.Costa Rica Partition'
     ? [{ label: 'Temp Badge', value: p.TempBadge }]
     : [])


                  ]}
                  sx={{ width: '100vw%' }}
                />
              </Box>
            ))
          )}
        </Box>

        {/* Live totals chart */}
        <Box mt={4} sx={{ width: '100vw%' }}>
          <Typography variant="h6" gutterBottom>
            Live Totals by Partition
          </Typography>
          {loading ? (
            <Skeleton variant="rectangular" width="100%" height={280} />
          ) : (
            <ChartCard
              title="Partition Totals"
              chartHeight={280}
              data={partitions.map(p => ({ name: p.name, value: p.total }))}
            />
          )}
        </Box>

        {/* Partition drill-down */}
        <Box mt={4} sx={{ width: '100vw%' }}>
          <FormControl fullWidth size="small">
            <InputLabel>Select Partition</InputLabel>
            <Select
              value={partition}
              label="Select Partition"
              onChange={e => setPartition(e.target.value)}
            >
              <MenuItem value="">— All —</MenuItem>
              {partitions.map(p => (
                <MenuItem key={p.name} value={p.name}>{p.name}</MenuItem>
              ))}
            </Select>
          </FormControl>

          {partition && !loading && (
            <Box mt={3} sx={{ width: '100vw%' }}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="h6">{partition} – Floor Breakdown</Typography>
                {/* <Button
                  variant="contained"
                  onClick={() => navigate(`/realtime/${encodeURIComponent(partition)}`)}
                >
                  See Swipe Details
                </Button> */}

       <Button
         size="small"
         variant="outlined"
         onClick={() =>
           navigate(`/partition/${encodeURIComponent(partition)}`)
         }
       >
         View Details
       </Button>

     </Box>
              <ChartCard
                title="Live Floor Counts"
                chartHeight={240}
                data={Object.entries(
                  partitions.find(p => p.name === partition)?.floors || {}
                ).map(([floor, cnt]) => ({ name: floor, value: cnt }))}
              />
            </Box>
          )}
        </Box>
      </Container>

      <footer style={{
        backgroundColor: '#000000',
        color: '#FFC107',
        padding: '1.5rem 0',
        textAlign: 'center',
        marginTop: 0,
        borderTop: '2px solid #FFC107',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div><strong>Global Security Operations Center</strong><br/>
          Live HeadCount against Occupancy dashboard for Western Union — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
             style={{ color: '#FFC107', textDecoration: 'underline' }}>
            GSOC Mail
          </a>&nbsp;|&nbsp;
          Landline:&nbsp;<span style={{ color: '#FFC107' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}







// src/pages/History.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Grid,
  Button,
  Typography,
  Skeleton,
  MenuItem,
  Select,
  InputLabel,
  FormControl,
  Breadcrumbs,
  Link
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import SummaryCard from '../components/SummaryCard';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  const [location, setLocation]         = useState('');
  const [dateList, setDateList]         = useState([]);
  const [selectedDate, setSelectedDate] = useState('');
  const [data, setData]                 = useState(null);
  const [loading, setLoading]           = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    setLoading(true);
    fetchHistory(location || null).then(json => {
      setData(json);
      setLoading(false);
      if (!location) {
        setDateList(json.summaryByDate.map(d => d.date));
      }
    });
  }, [location]);

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // 1) Pick a date
  if (!location && !selectedDate) {
    return (
      <>
        <Header />
        <Container maxWidth={false} disableGutters sx={{ pt:2, pb:4, px:'20px' }}>
          <Typography variant="h6" gutterBottom>
            Select a date:
          </Typography>
          <FormControl fullWidth sx={{ mb:2 }}>
            <InputLabel>Date</InputLabel>
            <Select
              value={selectedDate}
              label="Date"
              onChange={e => setSelectedDate(e.target.value)}
            >
              {dateList.map(d => (
                <MenuItem key={d} value={d}>{d}</MenuItem>
              ))}
            </Select>
          </FormControl>
        </Container>
        <Footer />
      </>
    );
  }

  // 2) Show partition summaries for that date
  if (!location) {
    const daySummary = data.summaryByDate.find(d => d.date === selectedDate);
    const partitionCards = Object.entries(daySummary.partitions).map(([name, stats]) => ({
      title: name,
      stats: [
        { label: 'Employees',   value: stats.Employee },
        { label: 'Contractors', value: stats.Contractor },
        // only show Temp Badge on Costa Rica
        ...(name === 'CR.Costa Rica Partition'
          ? [{ label: 'Temp Badge', value: stats.TempBadge }]
          : [])
      ],
    }));

    return (
      <>
        <Header />
        <Container maxWidth={false} disableGutters sx={{ pt:2, pb:4, px:'20px' }}>
          <Breadcrumbs separator="›" sx={{ mb:2 }}>
            <Link component="button" onClick={() => setSelectedDate('')}>
              Dates
            </Link>
            <Typography color="text.primary">{selectedDate}</Typography>
          </Breadcrumbs>

          <Typography variant="h5" gutterBottom>
            Partitions on {selectedDate}
          </Typography>

          <Box sx={{ display:'flex', flexWrap:'wrap', gap:1 }}>
            {partitionCards.map(card => (
              <Box key={card.title} sx={{ flex:'1 1 calc(33.33% - 8px)' }}>
                <Button
                  fullWidth
                  variant="outlined"
                  onClick={() => setLocation(card.title)}
                >
                  <SummaryCard title={card.title} stats={card.stats} />
                </Button>
              </Box>
            ))}
          </Box>
        </Container>
        <Footer />
      </>
    );
  }

  // 3) Drilled into a partition: show its daily totals
  const partitionSummary = data.summaryByDate.map(d => ({
    title: d.date,
    stats: [
      { label: 'Employees',   value: d.region.Employee },
      { label: 'Contractors', value: d.region.Contractor },
      // only show Temp Badge on Costa Rica
      ...(location === 'CR.Costa Rica Partition'
        ? [{ label: 'Temp Badge', value: d.region.TempBadge }]
        : [])
    ]
  }));

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ pt:2, pb:4, px:'20px' }}>
        <Breadcrumbs separator="›" sx={{ mb:2 }}>
          <Link component="button" onClick={() => setLocation('')}>
            {selectedDate}
          </Link>
          <Typography color="text.primary">{location}</Typography>
        </Breadcrumbs>

        <Typography variant="h5" gutterBottom>
          History for {location}
        </Typography>

        <Box sx={{ display:'flex', flexWrap:'wrap', gap:1 }}>
          {partitionSummary.map(card => (
            <Box key={card.title} sx={{ flex:'1 1 calc(33.33% - 8px)' }}>
              <SummaryCard title={card.title} stats={card.stats} />
            </Box>
          ))}
        </Box>
      </Container>
      <Footer />
    </>
  );
}








// src/components/Header.jsx

import React from 'react';
import { AppBar, Toolbar, Box, Typography } from '@mui/material';
import WuLogo from '../assets/wu-logo.png';      // ← put your WU logo here
import LacaFlag from '../assets/laca-flag.png';  // ← put your LACA flag here

export default function Header() {
  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        {/* Left: logos */}
        <Box display="flex" alignItems="center">
          <Box component="img" src={WuLogo} alt="WU Logo"
            sx={{ height: 36, mr: 2 }} />
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            Western Union – LACA Region Headcount
          </Typography>
        </Box>
        {/* Right: flag */}
        <Box component="img" src={LacaFlag} alt="LACA Flag"
          sx={{ height: 30 }} />
      </Toolbar>
    </AppBar>
  );
}

