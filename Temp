// src/components/SummaryCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function SummaryCard({ title, stats }) {
  return (
    <Card variant="outlined" sx={{ height: '100%' }}>
      <CardContent>
        <Typography variant="subtitle1" gutterBottom>
          {title}
        </Typography>
        <Grid container spacing={1}>
          {stats.map(({ label, value }) => (
            <Grid item xs={12} key={label}>
              <Typography variant="caption" color="textSecondary">
                {label}
              </Typography>
              <Typography variant="h5">
                {value}
              </Typography>
            </Grid>
          ))}
        </Grid>
      </CardContent>
    </Card>
  );
}




// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Grid,
  Typography,
  Skeleton,
  Box
} from '@mui/material';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import SummaryCard from '../components/SummaryCard';
import Header from '../components/Header';
import Footer from '../components/Footer';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  // Update timestamp on data arrival
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container sx={{ mt: 4 }}>
        <Typography color="error">Error loading live data</Typography>
      </Container>
    );
  }

  // Compute Today metrics
  const todayTot = data?.today?.total ?? 0;
  const todayEmp = data?.today?.Employee ?? 0;
  const todayCont= data?.today?.Contractor ?? 0;

  // Compute Realtime sums across partitions
  const regions = data?.realtime || {};
  const realtimeTot = Object.values(regions).reduce((sum, r) => sum + (r.total||0), 0);
  const realtimeEmp = Object.values(regions).reduce((sum, r) => sum + (r.Employee||0), 0);
  const realtimeCont= Object.values(regions).reduce((sum, r) => sum + (r.Contractor||0), 0);

  // Find Costa Rica partition
  const costaKey = Object.keys(regions).find(k => k.startsWith('CR.Costa'));
  const costa = costaKey ? regions[costaKey] : null;
  const costaTemp = costa?.TempBadge ?? 0;

  return (
    <>
      <Header />

      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        {/* Title */}
        <Box mb={2}>
          <Typography variant="h5">LACA Dashboard</Typography>
          {!loading && (
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          )}
        </Box>

        {/* 1) Six cards: Today & Realtime */}
        <Grid container spacing={2}>
          {loading
            ? Array.from({length:6}).map((_,i) => (
                <Grid item xs={12} sm={6} md={4} key={i}>
                  <Skeleton variant="rectangular" height={120} />
                </Grid>
              ))
            : [
                { title: 'Today Total',         stats:[{label:'Total',value:todayTot}] },
                { title: 'Today Employees',     stats:[{label:'Employees',value:todayEmp}] },
                { title: 'Today Contractors',   stats:[{label:'Contractors',value:todayCont}] },
                { title: 'Realtime Total',      stats:[{label:'Total',value:realtimeTot}] },
                { title: 'Realtime Employees',  stats:[{label:'Employees',value:realtimeEmp}] },
                { title: 'Realtime Contractors',stats:[{label:'Contractors',value:realtimeCont}] },
              ].map((card,i) => (
                <Grid item xs={12} sm={6} md={4} key={i}>
                  <SummaryCard title={card.title} stats={card.stats} />
                </Grid>
              ))
          }
        </Grid>

        {/* 2) Costa Rica cards */}
        {costa && (
          <Box mt={4}>
            <Typography variant="h6" gutterBottom>Costa Rica (Live only)</Typography>
            <Grid container spacing={2}>
              {[
                { title:'CR Total',       stats:[{label:'Total',value:costa.total}] },
                { title:'CR Employees',   stats:[{label:'Employees',value:costa.Employee}] },
                { title:'CR Contractors', stats:[{label:'Contractors',value:costa.Contractor}] },
                { title:'CR TempBadge',   stats:[{label:'TempBadge',value:costaTemp}] },
              ].map((card,i) => (
                <Grid item xs={12} sm={6} md={3} key={i}>
                  <SummaryCard title={card.title} stats={card.stats} />
                </Grid>
              ))}
            </Grid>
          </Box>
        )}
      </Container>

      <Footer />
    </>
  );
}








read below file carefully now we are on correct track 
now improve Ui like below 
1)
Make a seprate cards 
on top parts 6 cards 
1)Total -Employee + Contractor  | Employee  |  Contractor   2) Realtime -Employee + contractor  | Employee | Contractor 
counts 


for Costa Rica (Only for Costa rica display temp badge count only for coosta rica )
Total -Employee + Contractor | Employee | Contractor | temp badge
below Counts 


note 
This below is our today Headcount 
{
  "success": true,
  "today": {
    "total": 64,
    "Employee": 19,
    "Contractor": 45
  },


for a realtime Headcount you need to check and  partation realtime count and Calculate like this 
"CR.Costa Rica Partition": {
      "total": 5,
      "Employee": 1,
      "Contractor": 4,
AR.Cordoba": {
      "total": 1,
      "Employee": 0,
      "Contractor": 1,
Laca realtime headCount is =Costa Riaca + AR.Cordoba =6 like this 

Initially update this then We Will Move another Improvment

so give me fully Updated files carefully


// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Grid,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Skeleton
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition]   = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container maxWidth="xl" sx={{ mt: 1 }}>
        <Typography color="error">Error loading live data</Typography>
      </Container>
    );
  }

  const regions = !loading ? data.realtime : {};
  const names   = Object.keys(regions);

  return (
    <>
      <Header />

      {/* Use maxWidth="xl" to expand on desktop */}
      <Container maxWidth="xl" sx={{ mt: 3, mb: 4 }}>
        {/* Top row */}
        <Grid container spacing={3}>
          {loading
            ? [0,1].map(i => (
                <Grid item xs={12} sm={6} key={i}>
                  <Skeleton variant="rectangular" height={130} />
                </Grid>
              ))
            : (
              <>
                <Grid item xs={12} sm={6}>
                  <SummaryCard
                    title="Todayâ€™s Total Headcount"
                    stats={[
                      { label: 'Employees',   value: data.today.Employee },
                      { label: 'Contractors', value: data.today.Contractor }
                    ]}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <SummaryCard
                    title="Realtime Headcount"
                    stats={[
                      { label: 'Employees',   value: data.today.Employee },
                      { label: 'Contractors', value: data.today.Contractor }
                    ]}
                  />
                </Grid>
              </>
            )
          }
        </Grid>

        {/* Partition summary */}
        <Box mt={5}>
          <Typography variant="h6" gutterBottom>
            Partitions
            {!loading && (
              <Typography variant="body2" color="textSecondary" component="span" sx={{ ml: 2 }}>
                (Updated: {lastUpdate})
              </Typography>
            )}
          </Typography>
          {loading ? (
            <Skeleton variant="rectangular" height={220} />
          ) : (
            <Grid container spacing={3}>
              {names.map(name => {
                const p = regions[name];
                return (
                  <Grid item xs={12} sm={6} md={4} lg={3} key={name}>
                    <SummaryCard
                      title={name.split('.').pop()}
                      stats={[
                        { label: 'Today Emp',     value: p.Employee },
                        { label: 'Today Cont',    value: p.Contractor },
                        { label: 'Realtime Emp',  value: p.Employee },
                        { label: 'Realtime Cont', value: p.Contractor }
                      ]}
                    />
                  </Grid>
                );
              })}
            </Grid>
          )}
        </Box>

        {/* Live totals chart */}
        <Box mt={5}>
          <Typography variant="h6" gutterBottom>Live Totals by Partition</Typography>
          {loading ? (
            <Skeleton variant="rectangular" height={350} />
          ) : (
            <ChartCard
              title="Partition Totals"
              chartHeight={350}
              data={names.map(name => ({
                name: name.split('.').pop(),
                value: regions[name].total
              }))}
            />
          )}
        </Box>

        {/* Partition drill-down */}
        <Box mt={5}>
          <FormControl fullWidth>
            <InputLabel>Select Partition</InputLabel>
            <Select
              value={partition}
              label="Select Partition"
              onChange={e => setPartition(e.target.value)}
            >
              <MenuItem value="">â€” All â€”</MenuItem>
              {names.map(name => (
                <MenuItem key={name} value={name}>
                  {name.split('.').pop()}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {partition && !loading && (
            <Box mt={4}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">
                  {partition.split('.').pop()} â€“ Floor Breakdown
                </Typography>
                <Button
                  variant="outlined"
                  onClick={() => navigate(`/realtime/${encodeURIComponent(partition)}`)}
                >
                  See Swipe Details
                </Button>
              </Box>
              <ChartCard
                title="Live Floor Counts"
                chartHeight={300}
                data={Object.entries(regions[partition].floors || {}).map(([floor, cnt]) => ({
                  name: floor,
                  value: cnt
                }))}
              />
            </Box>
          )}
        </Box>
      </Container>

      <Footer />
    </>
  );
}





// src/components/SummaryCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function SummaryCard({ title, stats }) {
  return (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom>{title}</Typography>
        <Grid container spacing={2}>
          {stats.map(({ label, value }) => (
            <Grid item key={label}>
              <Typography variant="subtitle1">{label}</Typography>
              <Typography variant="h5">{value}</Typography>
            </Grid>
          ))}
        </Grid>
      </CardContent>
    </Card>
  );
}



