 exports.getLiveOccupancy = async (req, res) => {
   try {
     await getPool();
     res.writeHead(200, {
       'Content-Type':  'text/event-stream',
       'Cache-Control': 'no-cache',
       'Connection':    'keep-alive'
     });
     res.write('\n');

-    // pull last 24h on startup
-    let lastSeen = new Date(Date.now() - 24*60*60*1000);
+    // start from “now” so we only get fresh swipes
+    let lastSeen = new Date();
     const events = [];

     const push = async () => {
       // prune events not from today
       const today = getTodayString();
       for (let i = events.length - 1; i >= 0; i--) {
         if (events[i].Dateonly !== today) events.splice(i, 1);
       }

       const fresh = await fetchNewEvents(lastSeen);

       if (fresh.length) {
-        lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
+        // bump cursor to “right now” so next fetch looks only > now
+        lastSeen = new Date();
         events.push(...fresh);
       }

       // build occupancy + today counts
       const occupancy  = await buildOccupancy(events);
       const todayStats = buildVisitedToday(events);
       occupancy.totalVisitedToday = todayStats.total;
       occupancy.visitedToday      = { /* … */ };

       // SSE push
       const sid = Date.now();
       res.write(`id: ${sid}\n`);
       res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
       if (typeof res.flush === 'function') res.flush();
     };

     // initial push + polling
     await push();
     const timer = setInterval(push, 2000);
     req.on('close', () => clearInterval(timer));
   } catch (err) {
     console.error('Live occupancy SSE error:', err);
     if (!res.headersSent) res.status(500).json({ error: 'Internal Server Error' });
   }
 };




 exports.getDenverLiveOccupancy = async (req, res) => {
   try {
     await denver.poolPromise;
     res.writeHead(200, {
       'Content-Type':  'text/event-stream',
       'Cache-Control': 'no-cache',
       'Connection':    'keep-alive'
     });
     res.write('\n');

-    let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
+    // start from “now” so we only get new swipes
+    let lastSeen = new Date();
     const events = [];

     const push = async () => {
       let fresh = [];
       try { fresh = await fetchNewEvents(lastSeen); }
       catch (e) { console.error('❌ fetchNewEvents error:', e); }

       if (fresh.length) {
-        lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
+        // advance cursor to current time
+        lastSeen = new Date();
         events.push(...fresh);
       }

       let payload;
       try { payload = buildOccupancyForToday(events, fresh); }
       catch (e) {
         console.error('❌ buildOccupancyForToday error:', e);
         payload = { /* empty fallback */ };
       }

       // SSE push
       const sid = Date.now();
       res.write(`id: ${sid}\n`);
       res.write(`data: ${JSON.stringify(payload)}\n\n`);
       if (typeof res.flush === 'function') res.flush();
     };

     await push();
     const timer = setInterval(push, 1000);
     req.on('close', () => clearInterval(timer));
   } catch (err) {
     console.error('Denver SSE endpoint error:', err);
     if (!res.headersSent) res.status(500).end();
   }
 };











PS C:\Users\W0024618\Desktop\swipeData\employee-ai-insights> node server.js
Server running at http://localhost:5000
✅ MSSQL pool connected
✅ Denver MSSQL pool connected
🔄 [PUSH] Running at: 2025-06-14T04:24:56.668Z
🔍 Last seen swipe time: 2025-06-13T04:24:56.657Z
🔎 [Pune] fetchNewEvents called with since = 2025-06-13T04:24:56.657Z
📥 [Pune] fetched 11839 rows: [
  '2025-06-13T04:31:54.000Z',
  '2025-06-13T04:34:21.000Z',
  '2025-06-13T04:35:31.000Z',
  '2025-06-13T04:39:11.000Z',
  '2025-06-13T04:39:35.000Z',
  '2025-06-13T04:40:05.000Z',
  '2025-06-13T04:41:40.000Z',
  '2025-06-13T04:42:02.000Z',
  '2025-06-13T04:47:08.000Z',
  '2025-06-13T04:53:34.000Z',
  '2025-06-13T05:06:13.000Z',
  '2025-06-13T05:09:26.000Z',
  '2025-06-13T05:20:55.000Z',
  '2025-06-13T05:21:36.000Z',
  '2025-06-13T05:21:46.000Z',
  '2025-06-13T05:21:56.000Z',
  '2025-06-13T05:22:43.000Z',
  '2025-06-13T05:23:03.000Z',
  '2025-06-13T05:23:27.000Z',
  '2025-06-13T05:23:43.000Z',
  '2025-06-13T05:25:00.000Z',
  '2025-06-13T05:26:12.000Z',
  '2025-06-13T05:26:31.000Z',
  '2025-06-13T05:26:58.000Z',
  '2025-06-13T05:27:36.000Z',
  '2025-06-13T05:27:40.000Z',
  '2025-06-13T05:28:00.000Z',
  '2025-06-13T05:28:55.000Z',
  '2025-06-13T05:28:58.000Z',
  '2025-06-13T05:28:59.000Z',
  '2025-06-13T05:28:59.000Z',
  '2025-06-13T05:30:00.000Z',
  '2025-06-13T05:30:19.000Z',
  '2025-06-13T05:31:14.000Z',
  '2025-06-13T05:31:45.000Z',
  '2025-06-13T05:31:52.000Z',
  '2025-06-13T05:31:55.000Z',
  '2025-06-13T05:32:00.000Z',
  '2025-06-13T05:33:13.000Z',
  '2025-06-13T05:33:23.000Z',
  '2025-06-13T05:33:36.000Z',
  '2025-06-13T05:33:47.000Z',
  '2025-06-13T05:34:12.000Z',
  '2025-06-13T05:34:18.000Z',
  '2025-06-13T05:34:22.000Z',
  '2025-06-13T05:34:43.000Z',
  '2025-06-13T05:35:48.000Z',
  '2025-06-13T05:36:42.000Z',
  '2025-06-13T05:38:41.000Z',
  '2025-06-13T05:39:18.000Z',
  '2025-06-13T05:39:38.000Z',
  '2025-06-13T05:40:36.000Z',
  '2025-06-13T05:40:41.000Z',
  '2025-06-13T05:42:18.000Z',
  '2025-06-13T05:42:38.000Z',
  '2025-06-13T05:46:46.000Z',
  '2025-06-13T05:48:04.000Z',
  '2025-06-13T05:49:30.000Z',
  '2025-06-13T05:50:03.000Z',
  '2025-06-13T05:50:39.000Z',
  '2025-06-13T05:51:00.000Z',
  '2025-06-13T05:51:43.000Z',
  '2025-06-13T05:51:48.000Z',
  '2025-06-13T05:51:52.000Z',
  '2025-06-13T05:52:04.000Z',
  '2025-06-13T05:52:18.000Z',
  '2025-06-13T05:52:30.000Z',
  '2025-06-13T05:52:43.000Z',
  '2025-06-13T05:52:47.000Z',
  '2025-06-13T05:52:52.000Z',
  '2025-06-13T05:53:18.000Z',
  '2025-06-13T05:53:35.000Z',
  '2025-06-13T05:53:36.000Z',
  '2025-06-13T05:54:13.000Z',
  '2025-06-13T05:54:30.000Z',
  '2025-06-13T05:57:51.000Z',
  '2025-06-13T05:58:36.000Z',
  '2025-06-13T06:00:40.000Z',
  '2025-06-13T06:01:21.000Z',
  '2025-06-13T06:06:24.000Z',
  '2025-06-13T06:06:42.000Z',
  '2025-06-13T06:07:59.000Z',
  '2025-06-13T06:11:35.000Z',
  '2025-06-13T06:12:30.000Z',
  '2025-06-13T06:16:09.000Z',
  '2025-06-13T06:16:22.000Z',
  '2025-06-13T06:18:42.000Z',
  '2025-06-13T06:24:18.000Z',
  '2025-06-13T06:24:38.000Z',
  '2025-06-13T06:25:14.000Z',
  '2025-06-13T06:25:54.000Z',
  '2025-06-13T06:26:03.000Z',
  '2025-06-13T06:26:14.000Z',
  '2025-06-13T06:26:31.000Z',
  '2025-06-13T06:26:32.000Z',
  '2025-06-13T06:26:37.000Z',
  '2025-06-13T06:27:01.000Z',
  '2025-06-13T06:27:06.000Z',
  '2025-06-13T06:28:19.000Z',
  '2025-06-13T06:29:18.000Z',
  ... 11739 more items
]
📥 New events fetched: 11839
✅ [Pune] updating lastSeen from 2025-06-13T04:24:56.657Z → 2025-06-14T09:53:28.000Z
🔄 [PUSH] Running at: 2025-06-14T04:25:00.838Z
🔍 Last seen swipe time: 2025-06-14T09:53:28.000Z
🔎 [Pune] fetchNewEvents called with since = 2025-06-14T09:53:28.000Z
PS C:\Users\W0024618\Desktop\swipeData\employee-ai-insights> 
