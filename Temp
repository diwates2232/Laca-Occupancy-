import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107','#E0E0E0','#FFE599','#FFF2CC'],
  height = 300,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime employee data'
}) {
  const total = data.reduce((sum, d) => sum + d.value, 0);

  // No-data
  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4, color: 'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // Zero but forced slice
  const renderData = total === 0 && showZeroSlice
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p: 1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary" gutterBottom>
          {title}
        </Typography>
        <Box sx={{ width: '100%', height }}>
          <ResponsiveContainer>
            <PieChart>
              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={80}
                outerRadius={120}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
              <Tooltip contentStyle={{ backgroundColor: '#FFEE8C', borderColor: colors[0] }} />
              <Legend verticalAlign="bottom" wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }} />
            </PieChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}

const cardStyle = borderColor => ({
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});





Once Review all files carefully Check Formatting background 
// src/components/CompositeChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList,
  Cell
} from 'recharts';



const DARK_TO_LIGHT = [
  '#FFD666', '#FFE599', '#FFF2CC', '#FFE599', '#E0E1DD',
  '#FFD666', '#FFEE8C', '#F8DE7E', ' #FBEC5D', '#F0E68C',
  ' #FFEE8C', '#21325E', '#415A77', '#6A7F9A', '#B0C4DE',
  '#1A1F36', '#2B3353', '#4C6482', '#7B90B2', '#CAD3E9'
];

export default function CompositeChartCard({
  title,
  data,
  lineColor = '#fff',
  height = 300,
  animationDuration = 1500,
  animationEasing = 'ease-in-out'
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card sx={{ border: `1px solid #fff`, bgcolor: 'rgba(0,0,0,0.4)' }}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.secondary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4 }}>
            No realtime employee data
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // Enrich each datum with its usage percentage
  const enriched = data.map((d, i) => ({
    ...d,
    percentage: d.capacity ? Math.round(d.headcount / d.capacity * 100) : 0,
    _color: DARK_TO_LIGHT[i % DARK_TO_LIGHT.length]
  }));

  return (
    <Card
      sx={{
        border: `1px solid ${lineColor}`,
        borderRadius: 2,
        overflow: 'hidden',
        bgcolor: 'rgba(0,0,0,0.4)',
        transition: 'transform 0.3s, box-shadow 0.3s',
        '&:hover': {
          transform: 'scale(1.02)',
          boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
        }
      }}
    >
      <CardContent sx={{ p: 1 }}>
        <Typography
          variant="subtitle1"
          align="center"
          gutterBottom
          color="text.primary"
        >
          {title}
        </Typography>
        <Box sx={{ width: '100%', height }}>
          <ResponsiveContainer>
            <ComposedChart
              data={enriched}
              margin={{ top: 10, right: 20, left: 0, bottom: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />

              {/* <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
              /> */}


              <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                tickFormatter={label => 
                  // strip any leading word(s) and space, e.g. "Building A1" → "A1"
                  label.replace(/^[^\s]*\s*/, '')
                }
              />


              <YAxis
                yAxisId="left"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
              />

              <YAxis
                yAxisId="right"
                orientation="right"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                domain={[0, 100]}
                tickFormatter={val => `${val}%`}
              />

              <Tooltip
                contentStyle={{ backgroundColor: '#FFD666', borderColor: lineColor }}
                formatter={(value, name) => 
                  name === 'percentage' ? `${value}%` : value
                }
              />

              <Legend
                verticalAlign="top"
                wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }}
              />

              {/* Headcount bars with per-bar colors & percentage labels */}
              <Bar
                yAxisId="left"
                dataKey="headcount"
                name="Headcount"
                barSize={700}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              >
                {enriched.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={entry._color} />
                ))}

                {/* <LabelList
                  dataKey="percentage"
                  position="top"
                  formatter={val => `${val}%`}
                  style={{ fill: '#fff', fontSize: 10, fontWeight: 600 }}
                /> */}


                {/* Show % on top of each bar */}
                <LabelList
                  dataKey="headcount"
                 position="top"
                  formatter={val => `${val}`}
                  style={{ fill: '#fff', fontSize: 15, fontWeight: 700 }}
                />




              </Bar>

              {/* Seat Capacity line */}
              <Line
                yAxisId="right"
                type="monotone"
                dataKey="percentage"
                name="Usage %"
                stroke={lineColor}
                strokeWidth={2}
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />

              {/* Optional: draw capacity as second line */}
              <Line
                yAxisId="left"
                type="monotone"
                dataKey="capacity"
                name="Seat Capacity"
                stroke="#81C784"
                strokeDasharray="5 5"
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />
            </ComposedChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}









// src/components/LineChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList
} from 'recharts';

export default function LineChartCard({
  title,
  data,




  // use WU gold for the main line
  lineColor1 = '#FFE599',
  lineColor2 = '#FFF2CC',   // secondary (seat capacity) in black
  height = 300,
  animationDuration = 1500,
  animationEasing = 'ease-in-out'
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card sx={{
        border: `1px solid ${lineColor1}`,
        borderRadius: 2,
        bgcolor: 'rgba(0,0,0,0.4)',
      }}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt: 4, color: 'text.secondary' }}>
            No realtime employee data
          </Typography>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card sx={{
      border: `1px solid ${lineColor1}`,
      borderRadius: 2,
      overflow: 'hidden',
      bgcolor: 'rgba(0,0,0,0.4)',
      transition: 'transform 0.3s, box-shadow 0.3s',
      '&:hover': {
        transform: 'scale(1.02)',
        boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
      }
    }}>
      <CardContent sx={{ p: 1 }}>
        <Typography variant="subtitle1" align="center" gutterBottom color="text.primary">
          {title}
        </Typography>
        <Box sx={{ width: '100%', height }}>
          <ResponsiveContainer>
            <LineChart data={data} margin={{ top: 10, right: 20, left: 0, bottom: 20 }}>

              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />

              <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                stroke="rgba(255,255,255,0.6)"
                tickFormatter={label =>
                  // strip any leading word(s) and space, e.g. "Floor 01" → "01", "2nd Floor" → "2nd"
                  label.replace(/^[^\d]*(\d+)(?:.*)$/, '$1')
                        .replace(/^(.*)\sFloor$/,'$1')
                }

                 label={{
                 value: 'Floor',
                  position: 'insideBottomLeft',
                  offset: -10,
                  fill: '#FFD666',
                  fontWeight: 600
                }}

              />

              <YAxis tickLine={false} axisLine={false} stroke="rgba(255,255,255,0.6)" />

              <Tooltip
                contentStyle={{ backgroundColor: '#222', borderColor: lineColor1 }}
                formatter={(value, name) =>
                  name === 'headcount'
                    ? value
                    : value
                }
                label={{
                  value: 'Count',
                  angle: -90,
                  position: 'insideLeft',
                  fill: '#fff',
                  fontWeight: 600
                }}
              />

              <Legend verticalAlign="top" wrapperStyle={{ color: 'rgba(255,255,255,0.8)' }} />

              {/* Primary: Headcount */}
              <Line
                type="monotone"
                dataKey="headcount"
                name="Headcount"
                stroke={lineColor1}
                strokeWidth={3}
                dot={{ r: 2, stroke: '#FFD666', strokeWidth: 2 }}
                activeDot={{ r: 8 }}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              >
                {/* display headcount above each dot */}
                <LabelList
                  dataKey="headcount"
                  position="top"
                  style={{ fill: '#FFEE8C', fontSize: 15, fontWeight: 600 }}
                />
              </Line>

              {/* Secondary: Seat Capacity */}
              <Line
                type="monotone"
                dataKey="capacity"
                name="Seat Capacity"
                stroke={lineColor2}
                strokeWidth={2}
                strokeDasharray="5 5"
                dot={false}
                isAnimationActive
                animationDuration={animationDuration}
                animationEasing={animationEasing}
              />
            </LineChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}





In Pie Chart in the Redious display ( Count Brazil + MExico +Panama + peru)



// src/components/PieChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107', '#E0E0E0'],
  height = 300,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data'
}) {
  const total = data.reduce((sum, d) => sum + d.value, 0);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt:4, color:'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // If zero, and showZeroSlice==true, show single “Available” slice
  const renderData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p:1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>
        <Box sx={{ width:'100%', height }}>
          <ResponsiveContainer>
            <PieChart>
              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={80}
                outerRadius={140}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
              <Tooltip contentStyle={{ backgroundColor:'#FFEE8C', borderColor:colors[0] }} />
              <Legend verticalAlign="bottom" wrapperStyle={{ color:'rgba(255,255,255,0.8)' }} />
            </PieChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}

const cardStyle = borderColor => ({
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});
