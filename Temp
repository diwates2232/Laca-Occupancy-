import React, { lazy, Suspense } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import LoadingSpinner from '../components/LoadingSpinner';

const Dashboard               = lazy(() => import('../pages/Dashboard'));
const History                 = lazy(() => import('../pages/History'));
const PartitionDetail         = lazy(() => import('../pages/PartitionDetail'));
const PartitionDetailDetails  = lazy(() => import('../pages/PartitionDetailDetails'));

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Suspense fallback={<LoadingSpinner />}>
        <Routes>
          {/* Home dashboard */}
          <Route path="/" element={<Dashboard />} />

          {/* Global history */}
          <Route path="/history" element={<History />} />

          {/* Partition-scoped history */}
          <Route path="/partition/:partition/history" element={<History />} />

          {/* Partition overview (live) */}
          <Route path="/partition/:partition" element={<PartitionDetail />} />

          {/* Partition “see details” sub-page */}
          <Route
            path="/partition/:partition/details"
            element={<PartitionDetailDetails />}
          />
        </Routes>
      </Suspense>
    </BrowserRouter>
  );
}






const BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3005';

// In-memory cache
const cache = {
  liveSummary: null,
  history: new Map(),  // key: partition code or 'global'
};

/**
 * Fetch live summary, caching for session.
 */
export async function fetchLiveSummary() {
  if (cache.liveSummary) {
    return cache.liveSummary;
  }
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
  const json = await res.json();
  cache.liveSummary = json;
  return json;
}

/**
 * Fetch history (global or per-partition), caching for session.
 * @param {string} [location] — partition identifier, e.g. 'LT.Vilnius'
 */
export async function fetchHistory(location) {
  const key = location || 'global';
  if (cache.history.has(key)) {
    return cache.history.get(key);
  }
  const url = location
    ? `${BASE}/api/occupancy/history/${encodeURIComponent(location)}`
    : `${BASE}/api/occupancy/history`;

  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  const json = await res.json();
  cache.history.set(key, json);
  return json;
}

/**
 * Clear all cached data (if you need to force a fresh fetch).
 */
export function clearCache() {
  cache.liveSummary = null;
  cache.history.clear();
}

// --- list of EMEA partitions for Dashboard
export const partitionList = [
  'AUT.Vienna',
  'DU.Abu Dhab',
  'IE.Dublin',
  'IT.Rome',
  'LT.Vilnius',
  'MA.Casablanca',
  'RU.Moscow',
  'UK.London',
  'ES.Madrid'
];









import { useState, useEffect, useRef } from 'react';
import { fetchLiveSummary } from '../api/occupancy.service';

export function useLiveOccupancy(interval = 1000) {
  const [data, setData]       = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError]     = useState(null);
  const timer = useRef(null);

  useEffect(() => {
    let active = true;

    async function load() {
      try {
        // fetchLiveSummary now returns cached data instantly if available
        const json = await fetchLiveSummary();
        if (!active) return;
        setData(json);
        setLoading(false);
      } catch (e) {
        if (!active) return;
        setError(e);
        setLoading(false);
      }
    }

    load();
    timer.current = setInterval(load, interval);

    return () => {
      active = false;
      clearInterval(timer.current);
    };
  }, [interval]);

  return { data, loading, error };
}










// // src/routes/AppRoutes.jsx

import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';

import Dashboard              from '../pages/Dashboard';
import History                from '../pages/History';
import PartitionDetail        from '../pages/PartitionDetail';
import PartitionDetailDetails from '../pages/PartitionDetailDetails';

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Routes>

        {/* Home dashboard */}
        <Route path="/" element={<Dashboard />} />

        {/* Global history */}
        <Route path="/history" element={<History />} />

        {/* Partition-scoped history */}
        <Route path="/partition/:partition/history" element={<History />} />

        {/* Partition overview (live) */}
        <Route path="/partition/:partition" element={<PartitionDetail />} />

        {/* Partition “see details” sub-page */}
        <Route
          path="/partition/:partition/details"
          element={<PartitionDetailDetails />}
        />

      </Routes>
    </BrowserRouter>
  );
}













// C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\api\occupancy.service.js

const BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3005';

export async function fetchLiveSummary() {
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
  return res.json();
}

export async function fetchHistory(location) {
  const url = location
    ? `${BASE}/api/occupancy/history/${encodeURIComponent(location)}`
    : `${BASE}/api/occupancy/history`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  return res.json();
}

// --- NEW: list of EMEA partitions for Dashboard
export const partitionList = [
  'AUT.Vienna',
  'DU.Abu Dhab',
  'IE.Dublin',
  'IT.Rome',
  'LT.Vilnius',
  'MA.Casablanca',
  'RU.Moscow',
  'UK.London',
  'ES.Madrid'
];







C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\hooks\useLiveOccupancy.js


import { useState, useEffect, useRef } from 'react';
import { fetchLiveSummary } from '../api/occupancy.service';

export function useLiveOccupancy(interval = 1000) {
  const [data, setData]         = useState(null);
  const [loading, setLoading]   = useState(true);
  const [error, setError]       = useState(null);
  const timer = useRef(null);

  useEffect(() => {
    let active = true;
    async function load() {
      try {
        const json = await fetchLiveSummary();
        if (!active) return;
        setData(json);
        setLoading(false);
      } catch (e) {
        if (!active) return;
        setError(e);
        setLoading(false);
      }
    }
    load();
    timer.current = setInterval(load, interval);
    return () => {
      active = false;
      clearInterval(timer.current);
    };
  }, [interval]);

  return { data, loading, error };
}
