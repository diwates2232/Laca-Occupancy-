-              <Tooltip
-                contentStyle={{ backgroundColor: '#000', border: `1px solid ${colors.head}` }}
-                cursor={showCrosshair}
-                isAnimationActive={false}
-                onMouseMove={o => setActiveIndex(o && o.activeTooltipIndex)}
-                labelStyle={{ color: colors.head, fontWeight: 600 }}
-                formatter={(value, name) => {
-                  if (name === 'Headcount' && hasCapacity) {
-                    const cap = data.find(d => d.Headcount === value)?.Capacity || 0;
-                    const pct = cap ? ((value / cap) * 100).toFixed(1) : '0.0';
-                    return [`${value} (${pct}%)`, name];
-                  }
-                  return [value, name];
-                }}
-              />
+              <Tooltip
+                contentStyle={{ backgroundColor: '#000', border: `1px solid ${colors.head}`, padding: '1rem' }}
+                cursor={showCrosshair}
+                isAnimationActive={false}
+                onMouseMove={o => setActiveIndex(o && o.activeTooltipIndex)}
+                content={({ active, payload, label }) => {
+                  if (!active || !payload || !payload.length) return null;
+                  // payload[0].payload is the original data object
+                  const { breakdown = {}, name } = payload[0].payload;
+                  return (
+                    <Box sx={{ color: '#FFF' }}>
+                      <Typography variant="subtitle2" sx={{ color: colors.head, mb: 1 }}>
+                        {name}
+                      </Typography>
+                      {Object.entries(breakdown).map(([key, val]) => (
+                        <Typography key={key} variant="body2">
+                          {key}: {val}
+                        </Typography>
+                      ))}
+                    </Box>
+                  );
+                }}
+              />









Read this section  carefulluy ,Currently When move cursor on partation name it display Partation name & Value 
expected is display like 
ex-Costa Rica 
Employee
Contractor
Temp bage 
like 
        {/* Live totals chart */}
        <Box mt={4} sx={{ width: '100vw%' ,p:2, border: '1px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h6" gutterBottom>
              Live Totals by Partition
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>

        {loading ? (
            <Skeleton variant="rectangular" width="100%" height={320} />
          ) : (
  <ChartCard
    chartType="bar"                  // new prop
    chartHeight={360}

     data={partitions.map((p, i) => ({
       name: displayNameMap[p.name] || p.name.replace(' Partition',''),
       value: p.total,
        fill: colorsMap[p.name]?.[0] || (i % 2 === 0 ? '#FFC107' : '#B0BEC5')
     }))}



    dataKey="value"
    colors={{ head: '#FFC107', cap: '#B0BEC5' }}

     // Pass in the live breakdown for Employees / Contractors / TempBadge
     breakdown={{
       Employee: realtimeEmp,
       Contractor: realtimeCont,
       TempBadge: partitions.reduce((sum,p)=>sum+p.TempBadge,0),
     }}



    sx={{ border: '2px solid #FFC107' }}
  />
          )}
        </Box>
      </Container>
