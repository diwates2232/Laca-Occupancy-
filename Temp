Now We got this error

ERROR
Rendered more hooks than during the previous render.
    at updateWorkInProgressHook (http://localhost:3000/static/js/bundle.js:85795:15)
    at updateMemo (http://localhost:3000/static/js/bundle.js:86392:16)
    at Object.useMemo (http://localhost:3000/static/js/bundle.js:94830:16)
    at exports.useMemo (http://localhost:3000/static/js/bundle.js:112289:32)
    at History (http://localhost:3000/static/js/bundle.js:170792:69)
    at react-stack-bottom-frame (http://localhost:3000/static/js/bundle.js:95471:18)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:85681:20)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:87374:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:87960:16)
    at runWithFiberInDEV (http://localhost:3000/static/js/bundle.js:83452:68)



// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import {
  Container,
  Box,
  Button,
  Typography,
  Breadcrumbs,
  Link,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  const [data, setData]             = useState(null);
  const [loading, setLoading]       = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // Fetch all historic data on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory().then(json => {
      setData(json);
      setLoading(false);
    });
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Summary record for the selected date
  const todayRecord = useMemo(() => {
    if (!pickedDate) return null;
    const d = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === d) || null;
  }, [data, pickedDate]);

  // Filtered detail rows for the selected date
  const detailRows = useMemo(() => {
    if (!pickedDate) return [];
    const d = format(pickedDate, 'yyyy-MM-dd');
    return data.details.filter(r => r.SwipeDate.startsWith(d));
  }, [data, pickedDate]);

  // Excel export
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4, px: '20px' }}>
        {/* 1) Date selector */}
        <Box sx={{ mb: 3 }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Select date"
              value={pickedDate}
              onChange={newDate => {
                setPickedDate(newDate);
                setShowDetails(false);
              }}
              renderInput={params => <TextField fullWidth {...params} />}
            />
          </LocalizationProvider>
        </Box>

        {!pickedDate && (
          <Typography variant="body1" color="textSecondary">
            Please pick a date to view region summary.
          </Typography>
        )}

        {/* 2) Region summary */}
        {pickedDate && todayRecord && (
          <Paper
            elevation={3}
            sx={{
              textAlign: 'center',
              py: 4,
              mb: 3,
              border: '2px solid #FFC107',
              bgcolor: '#000'
            }}
          >
            <Typography variant="h5" sx={{ color: '#FFC107' }}>
              {todayRecord.region.name} Total on {todayRecord.date} ({todayRecord.day})
            </Typography>
            <Typography variant="h2" sx={{ mt: 1, color: '#FFF', fontWeight: 700 }}>
              {todayRecord.region.total}
            </Typography>

            <Box sx={{ mt: 3 }}>
              <Button
                variant="contained"
                sx={{ bgcolor: '#FFC107', color: '#000' }}
                onClick={() => setShowDetails(prev => !prev)}
              >
                {showDetails ? 'Hide Details' : 'See Details'}
              </Button>
              {showDetails && (
                <Button
                  variant="outlined"
                  sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                  onClick={handleExport}
                >
                  Export to Excel
                </Button>
              )}
            </Box>
          </Paper>
        )}

        {/* 3) Details table */}
        {showDetails && detailRows.length > 0 && (
          <Paper elevation={1}>
            <Table>
              <TableHead sx={{ bgcolor: '#000' }}>
                <TableRow>
                  {['Sr', 'Date', 'Time', 'Employee ID', 'Name', 'Door', 'Partition'].map(h => (
                    <TableCell key={h} sx={{ color: '#FFC107', fontWeight: 600 }}>
                      {h}
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {detailRows.map((r, i) => (
                  <TableRow key={r.PersonGUID}>
                    <TableCell>{i + 1}</TableCell>
                    <TableCell>{format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd')}</TableCell>
                    <TableCell>{format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}</TableCell>
                    <TableCell>{r.EmployeeID}</TableCell>
                    <TableCell>{r.ObjectName1}</TableCell>
                    <TableCell>{r.Door}</TableCell>
                    <TableCell>{r.PartitionName2}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </Paper>
        )}

        {showDetails && detailRows.length === 0 && (
          <Typography variant="body2" color="textSecondary" sx={{ mt: 2 }}>
            No swipe records found for this date.
          </Typography>
        )}
      </Container>

      <Footer />
    </>
  );
}














