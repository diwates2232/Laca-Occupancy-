// src/components/ChartCard.jsx
import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  LabelList
} from 'recharts';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 250
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card variant="outlined" sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center', p: 1 }}>
          <Typography variant="h6" fontWeight="bold">
            {title}
          </Typography>
          <Typography variant="body2" color="textSecondary">
            No data to display.
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // Detect if data has both Capacity and Headcount
  const hasCapacity = data[0].Capacity != null;

  return (
    <Card variant="outlined" sx={{ mb: 2, background: '#FFFDE7' }}>
      <CardContent sx={{ textAlign: 'center', p: 2 }}>
        <Typography variant="h6" fontWeight="bold" gutterBottom>
          {title}
        </Typography>
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" tick={{ fontSize: 12, fontWeight: 600 }} />
              <YAxis tick={{ fontSize: 12, fontWeight: 600 }} />
              <Tooltip />
              <Legend />
              {hasCapacity && (
                <Bar dataKey="Capacity" fill="#B0BEC5" radius={[6, 6, 0, 0]}>
                  <LabelList
                    dataKey="Capacity"
                    position="top"
                    style={{ fontWeight: 'bold', fill: '#37474F' }}
                  />
                </Bar>
              )}
              <Bar
                dataKey={hasCapacity ? 'Headcount' : dataKey}
                fill="#FFC107"
                radius={[6, 6, 0, 0]}
              >
                <LabelList
                  dataKey={hasCapacity ? 'Headcount' : dataKey}
                  position="top"
                  style={{ fontWeight: 'bold' }}
                />
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}




// src/pages/Dashboard.jsx
import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import seatCapacities from '../data/seatCapacities';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build & sort partitions by headcount descending
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  // Prepare merged chart data for headcount vs capacity
  // Mapping PartitionName2 to your seatCapacities keys:
  const mapKey = {
    'CR.Costa Rica Partition': 'Costa Rica',
    'MX.Mexico City': 'Mexico',
    'AR.Cordoba': 'Argentina',
    'PA.Panama City': 'Panama',
    'PE.Lima': 'Peru',
    'BR.Sao Paulo': 'Brazil'
  };
  const chartData = partitions.map(p => ({
    name: p.name.replace(/Partition$/, '').trim(),
    Headcount: p.total,
    Capacity: seatCapacities[mapKey[p.name]] || 0
  }));

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 2,
          pb: 4,
          px: '20px'
        }}
      >
        {/* Top summary cards */}
        <Box display="flex" alignItems="stretch" sx={{ mb: 4, width: '100%' }}>
          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Todayâ€™s Headcount"
              total={todayTot}
              stats={[
                { label: 'Employees',   value: todayEmp },
                { label: 'Contractors', value: todayCont }
              ]}
              sx={{ height: 150 }}
            />
          </Box>
          <Divider orientation="vertical" flexItem sx={{ mx: 2 }} />
          <Box sx={{ flex: 1 }}>
            <SummaryCard
              title="Realtime Headcount"
              total={realtimeTot}
              stats={[
                { label: 'Employees',   value: realtimeEmp },
                { label: 'Contractors', value: realtimeCont }
              ]}
              sx={{ height: 150 }}
            />
          </Box>
        </Box>

        {/* Partition cards */}
        <Box mt={4} sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {loading ? (
            <Skeleton variant="rectangular" width="100%" height={240} />
          ) : (
            partitions.map(p => (
              <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={p.name.replace(/Partition$/, '').trim()}
                  total={p.total}
                  stats={[
                    { label: 'Employees',   value: p.Employee },
                    { label: 'Contractors', value: p.Contractor },
                    ...(p.name === 'CR.Costa Rica Partition' && p.TempBadge
                      ? [{ label: 'TempBadge', value: p.TempBadge }]
                      : [])
                  ]}
                  sx={{ width: '100%' }}
                />
              </Box>
            ))
          )}
        </Box>

        {/* Live Headcount vs Capacity chart */}
        <Box mt={4}>
          <Typography variant="h6" gutterBottom>
            Live Headcount vs Capacity by Partition
          </Typography>
          {loading ? (
            <Skeleton variant="rectangular" width="100%" height={320} />
          ) : (
            <ChartCard
              title="Occupancy vs Capacity"
              chartHeight={320}
              data={chartData}
            />
          )}
        </Box>

        {/* ...rest of your drill-down UI unchanged... */}
      </Container>

      <Footer />
    </>
  );
}









// src/data/seatCapacities.js
const seatCapacities = {
  "Costa Rica": 1244,
  "Mexico": 100,
  "Argentina": 250,
  "Panama": 20,
  "Peru": 70,
  "Brazil": 80
};

export default seatCapacities;



then Update remenaning  files carefully and give me updated files carefully



// src/components/ChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend, LabelList
} from 'recharts';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 250
}) {
  if (!Array.isArray(data) || data.length === 0) {
    return (
      <Card variant="outlined" sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center', p: 1 }}>
          <Typography variant="h6" fontWeight="bold">
            {title}
          </Typography>
          <Typography variant="body2" color="textSecondary">
            No data to display.
          </Typography>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card variant="outlined" sx={{ mb: 2, background: '#fffde7' }}>
      <CardContent sx={{ textAlign: 'center', p: 2 }}>
        <Typography variant="h6" fontWeight="bold" gutterBottom>
          {title}
        </Typography>
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" tick={{ fontSize: 12, fontWeight: 600 }} />
              <YAxis tick={{ fontSize: 12, fontWeight: 600 }} />
              <Tooltip />
              <Legend />
              <Bar dataKey={dataKey} fill="#FFC107" radius={[6, 6, 0, 0]}>
                <LabelList dataKey={dataKey} position="top" style={{ fontWeight: 'bold' }} />
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}






// src/components/SummaryCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box, Grid } from '@mui/material';

export default function SummaryCard({ title, total, stats, sx = {} }) {
  return (
    <Card variant="outlined" sx={{
      px: 2,
      py: 3,
      background: '#fffde7',
      borderLeft: '5px solid #000000',
      borderRadius: 2,
      transition: 'transform 0.3s ease',
      '&:hover': {
        transform: 'scale(1.02)',
        boxShadow: '0px 4px 20px rgba(0, 0, 0, 0.2)'
      },
      ...sx
    }}>
      <CardContent sx={{ textAlign: 'center', p: 1 }}>
        <Typography variant="subtitle1" gutterBottom fontWeight="bold" color="primary">
          {title}
        </Typography>

        {total != null && (
          <Box display="flex" justifyContent="center" alignItems="baseline" mb={1}>
            <Typography variant="h4" fontWeight="bold" sx={{ mr: 1, color: '#000' }}>
              {total}
            </Typography>
            <Typography variant="caption" color="textSecondary">
              Total
            </Typography>
          </Box>
        )}

        <Grid container spacing={0.5} justifyContent="center">
          {stats.map(({ label, value }) => (
            <Grid item xs={6} key={label}>
              <Typography variant="caption" color="textSecondary" fontWeight="bold">
                {label}
              </Typography>
              <Typography variant="h6" fontWeight="bold" sx={{ color: '#000' }}>
                {value}
              </Typography>
            </Grid>
          ))}
        </Grid>
      </CardContent>
    </Card>
  );
}













