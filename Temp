--- a/src/components/PieChartCard.jsx
+++ b/src/components/PieChartCard.jsx
@@ export default function PieChartCard({
   const total = data.reduce((sum, d) => sum + d.value, 0);
 
   // ... existing no-data logic ...
 
-  return (
+  return (
     <Card sx={cardStyle(colors[0])}>
       <CardContent sx={{ p:1 }}>
         <Typography variant="subtitle1" align="center" color="text.primary">
           {title}
         </Typography>
-        <Box sx={{ width:'100%', height }}>
-          <ResponsiveContainer>
-            <PieChart>
+        {/* wrap in relative container so we can overlay the total */}
+        <Box sx={{ position: 'relative', width: '100%', height }}>
+          <ResponsiveContainer>
+            <PieChart>
               <Pie
                 data={renderData}
                 dataKey="value"
@@
               </Pie>
               <Tooltip contentStyle={{ backgroundColor:'#FFEE8C', borderColor:colors[0] }} />
               <Legend verticalAlign="bottom" wrapperStyle={{ color:'rgba(255,255,255,0.8)' }} />
-            </PieChart>
-          </ResponsiveContainer>
-        </Box>
+            </PieChart>
+          </ResponsiveContainer>
+
+          {/* centered total */}
+          <Box
+            component="div"
+            sx={{
+              position: 'absolute',
+              top: '50%',
+              left: '50%',
+              transform: 'translate(-50%, -50%)',
+              pointerEvents: 'none'
+            }}
+          >
+            <Typography variant="h4" align="center" sx={{ color: colors[0], fontWeight: 'bold' }}>
+              {total}
+            </Typography>
+            <Typography variant="caption" align="center" sx={{ color: 'rgba(255,255,255,0.7)' }}>
+              Total
+            </Typography>
+          </Box>
+        </Box>
       </CardContent>
     </Card>
   );










Dont make any unnecessary changes just Display Total Count in the inner redious of the chart(Total Count = Brazil + Mexoco +Panama + Peru)
// src/components/PieChartCard.jsx

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PieChartCard({
  title,
  data,
  colors = ['#FFC107', '#E0E0E0'],
  height = 300,
  showZeroSlice = false,
  animationDuration = 1500,
  noDataMessage = 'No realtime data'
}) {
  const total = data.reduce((sum, d) => sum + d.value, 0);

  if (total === 0 && !showZeroSlice) {
    return (
      <Card sx={cardStyle(colors[0])}>
        <CardContent>
          <Typography variant="subtitle1" align="center" color="text.primary">
            {title}
          </Typography>
          <Typography variant="body2" align="center" sx={{ mt:4, color:'text.secondary' }}>
            {noDataMessage}
          </Typography>
        </CardContent>
      </Card>
    );
  }

  // If zero, and showZeroSlice==true, show single “Available” slice
  const renderData = (total === 0 && showZeroSlice)
    ? [{ name: 'Available', value: data[1]?.value || 0 }]
    : data;

  return (
    <Card sx={cardStyle(colors[0])}>
      <CardContent sx={{ p:1 }}>
        <Typography variant="subtitle1" align="center" color="text.primary">
          {title}
        </Typography>
        <Box sx={{ width:'100%', height }}>
          <ResponsiveContainer>
            <PieChart>
              <Pie
                data={renderData}
                dataKey="value"
                nameKey="name"
                innerRadius={80}
                outerRadius={140}
                paddingAngle={4}
                isAnimationActive
                animationDuration={animationDuration}
              >
                {renderData.map((_, i) => (
                  <Cell key={i} fill={colors[i % colors.length]} />
                ))}
              </Pie>
              <Tooltip contentStyle={{ backgroundColor:'#FFEE8C', borderColor:colors[0] }} />
              <Legend verticalAlign="bottom" wrapperStyle={{ color:'rgba(255,255,255,0.8)' }} />
            </PieChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}

const cardStyle = borderColor => ({
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  bgcolor: 'rgba(0,0,0,0.4)',
  overflow: 'hidden',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'scale(1.02)',
    boxShadow: '0 4px 12px rgba(0,0,0,0.7)'
  }
});
