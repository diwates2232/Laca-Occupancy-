// src/pages/History.jsx
import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Paper,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Typography,
  Button,
  TextField,
  Skeleton
} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

const codeToCountry = {
  AUT: 'Austria',
  DU:  'UAE',
  IE:  'Ireland',
  IT:  'Italy',
  LT:  'Lithuania',
  MA:  'Morocco',
  RU:  'Russia',
  UK:  'United Kingdom',
  ES:  'Spain'
};

export default function History() {
  const { partition } = useParams();
  const decoded = partition ? decodeURIComponent(partition) : null;
  const filterCode = decoded?.split('.')[0] || null;

  const [data, setData]             = useState(null);
  const [loading, setLoading]       = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  useEffect(() => {
    fetchHistory().then(json => {
      setData(json);
      setLoading(false);
    });
  }, []);

  // Find the summary record for the selected date
  const summary = useMemo(() => {
    if (!data || !pickedDate) return null;
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === dateStr) || null;
  }, [data, pickedDate]);

  // Build rows for the summary table
  const partitionRows = useMemo(() => {
    if (!summary) return [];
    return Object.entries(summary.partitions)
      .filter(([key]) => !filterCode || key.startsWith(filterCode + '.'))
      .map(([key, vals]) => {
        const [code, siteRaw] = key.split('.');
        return {
          country: codeToCountry[code] || code,
          site:    siteRaw,
          employee:   vals.Employee   ?? vals.EmployeeCount   ?? 0,
          contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
          total:      vals.total      ?? 0
        };
      });
  }, [summary, filterCode]);

  // Build rows for the details table
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.details
      .filter(r => r.SwipeDate.slice(0, 10) === dateStr)
      .filter(r =>
        !filterCode
          ? true
          : r.PartitionName2.startsWith(filterCode + '.')
      );
  }, [data, pickedDate, filterCode]);

  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: r.SwipeDate.slice(0, 10),
        Time: r.LocaleMessageTime.slice(11, 19),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        Type: r.PersonnelType,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `EMEA_history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* Date picker */}
        <Box sx={{ px: '20px', mb: 2 }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Select date"
              value={pickedDate}
              onChange={d => {
                setPickedDate(d);
                setShowDetails(false);
              }}
              renderInput={params => <TextField fullWidth {...params} />}
            />
          </LocalizationProvider>
          {!pickedDate && (
            <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
              Please pick a date to view the EMEA summary.
            </Typography>
          )}
        </Box>

        {/* Summary table and controls */}
        {pickedDate && summary && (
          <Box display="flex" flexDirection="column" sx={{ px: '20px', mb: 4 }}>
            <Paper
              elevation={3}
              sx={{
                px: 4, py: 3,
                border: '3px solid #000',
                borderRadius: 2,
                mb: 2
              }}
            >
              <Typography
                variant="h6"
                align="center"
                sx={{
                  bgcolor: '#000',
                  color: '#fff',
                  py: 1,
                  border: '2px solid #000',
                  fontWeight: 'bold',
                  fontSize: 16,
                  mb: 1
                }}
              >
                {format(pickedDate, 'EEEE, d MMMM yyyy')}
              </Typography>

              <Table size="small" sx={{ borderCollapse: 'collapse' }}>
                <TableHead>
                  <TableRow sx={{ bgcolor: '#FFC107' }}>
                    {['Country','Site','Employees','Contractors','Total'].map(col => (
                      <TableCell
                        key={col}
                        align={col === 'Country' || col === 'Site' ? 'left' : 'right'}
                        sx={{
                          color: '#000',
                          fontWeight: 'bold',
                          fontSize: 14,
                          border: '2px solid #000'
                        }}
                      >
                        {col}
                      </TableCell>
                    ))}
                  </TableRow>
                </TableHead>

                <TableBody>
                  {partitionRows.map((row, i) => (
                    <TableRow key={i}>
                      <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                      <TableCell sx={{ border: '2px solid #000' }}>{row.site}</TableCell>
                      <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                      <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                      <TableCell
                        align="right"
                        sx={{
                          backgroundColor: '#FFC107',
                          fontWeight: 'bold',
                          border: '2px solid #000'
                        }}
                      >
                        {row.total}
                      </TableCell>
                    </TableRow>
                  ))}

                  {/* Grand total */}
                  <TableRow sx={{ bgcolor: '#666' }}>
                    <TableCell colSpan={2} align="right"
                      sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}
                    >
                      Total
                    </TableCell>
                    <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                      {partitionRows.reduce((sum, r) => sum + r.employee, 0)}
                    </TableCell>
                    <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                      {partitionRows.reduce((sum, r) => sum + r.contractor, 0)}
                    </TableCell>
                    <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000', bgcolor: '#333' }}>
                      {partitionRows.reduce((sum, r) => sum + r.total, 0)}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>

              {/* See Details / Export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 2 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Paper>

            {/* Details table */}
            {showDetails && (
              <Paper
                elevation={1}
                sx={{
                  px: 4, py: 2,
                  border: '3px solid #000',
                  borderRadius: 2
                }}
              >
                {detailRows.length ? (
                  <Table size="small" sx={{ borderCollapse: 'collapse' }}>
                    <TableHead>
                      <TableRow sx={{ bgcolor: '#000' }}>
                        {['Sr','Date','Time','Emp ID','Name','Type','Door','Partition'].map(h => (
                          <TableCell
                            key={h}
                            align="center"
                            sx={{
                              color: '#FFC107',
                              fontWeight: 'bold',
                              fontSize: 14,
                              border: '2px solid #000'
                            }}
                          >
                            {h}
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {detailRows.map((r, i) => (
                        <TableRow key={`${r.PersonGUID}-${i}`}>
                          <TableCell sx={{ border: '2px solid #000' }}>{i+1}</TableCell>
                          <TableCell sx={{ border: '2px solid #000' }}>{r.SwipeDate.slice(0,10)}</TableCell>
                          <TableCell sx={{ border: '2px solid #000' }}>{r.LocaleMessageTime.slice(11,19)}</TableCell>
                          <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                          <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                          <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                          <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                          <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                ) : (
                  <Typography
                    variant="body2"
                    align="center"
                    sx={{ mt: 2, fontStyle: 'italic', color: '#666' }}
                  >
                    No swipe records found for this date.
                  </Typography>
                )}
              </Paper>
            )}
          </Box>
        )}
      </Container>

      <Footer />
    </>
  );
}








// src/pages/History.jsx
import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Typography,
  Paper,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Button,
  TextField
} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

const codeToCountry = {
  AUT: 'Austria',
  DU:  'UAE',
  IE:  'Ireland',
  IT:  'Italy',
  LT:  'Lithuania',
  MA:  'Morocco',
  RU:  'Russia',
  UK:  'United Kingdom',
  ES:  'Spain'
};

export default function History() {
  const { partition } = useParams();
  const decoded       = partition ? decodeURIComponent(partition) : null;
  const filterCode    = decoded?.split('.')[0] || null;

  const [data, setData]             = useState(null);
  const [loading, setLoading]       = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // fetch history once
  useEffect(() => {
    fetchHistory().then(json => {
      setData(json);
      setLoading(false);
    });
  }, []);

  // find summary row
  const summary = useMemo(() => {
    if (!data || !pickedDate) return null;
    const d = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === d) || null;
  }, [data, pickedDate]);

  // build partition summary rows
  const partitionRows = useMemo(() => {
    if (!summary) return [];
    return Object.entries(summary.partitions)
      .filter(([key]) => !filterCode || key.startsWith(filterCode + '.'))
      .map(([key, vals]) => {
        const [code, siteRaw] = key.split('.');
        return {
          country:    codeToCountry[code] || code,
          site:       siteRaw,
          employee:   vals.Employee  ?? vals.EmployeeCount  ?? 0,
          contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
          total:      vals.total      ?? 0
        };
      });
  }, [summary, filterCode]);

  // build detail rows
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const d = format(pickedDate, 'yyyy-MM-dd');
    return data.details
      .filter(r => r.SwipeDate.slice(0,10) === d)
      .filter(r => !filterCode || r.PartitionName2.startsWith(filterCode + '.'));
  }, [data, pickedDate, filterCode]);

  // excel export
  const handleExport = () => {
    const sheet = XLSX.utils.json_to_sheet(
      detailRows.map((r,i) => ({
        Sr: i+1,
        Date: r.SwipeDate.slice(0,10),
        Time: r.LocaleMessageTime.slice(11,19),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        Type: r.PersonnelType,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, sheet, 'Details');
    const buf = XLSX.write(wb, { bookType:'xlsx', type:'array' });
    saveAs(new Blob([buf]), `emea_history_${format(pickedDate,'yyyyMMdd')}.xlsx`);
  };

  if (loading) return <LoadingSpinner />;
  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ px: 2, py: 2 }}>
        {/* Date picker */}
        <Box mb={2} sx={{ px: '20px' }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Select date"
              value={pickedDate}
              onChange={d => { setPickedDate(d); setShowDetails(false); }}
              renderInput={params => <TextField fullWidth {...params} />}
            />
          </LocalizationProvider>
        </Box>

        {pickedDate && summary ? (
          <>
            {/* Summary table */}
            <Paper elevation={3} sx={{ mb:2, mx:'20px', p:2, border:'3px solid #000', borderRadius:2 }}>
              <Table sx={{ border:'2px solid #000' }}>
                <TableHead>
                  <TableRow>
                    <TableCell
                      colSpan={5}
                      align="center"
                      sx={{
                        fontWeight:'bold',
                        fontSize:16,
                        bgcolor:'#000',
                        color:'#fff',
                        border:'2px solid #000'
                      }}
                    >
                      {format(pickedDate,'EEEE, d MMMM, yyyy')}
                    </TableCell>
                  </TableRow>
                  <TableRow sx={{ bgcolor:'#FFC107' }}>
                    {['Country','Site','Employees','Contractors','Total'].map(h => (
                      <TableCell
                        key={h}
                        align={['Employees','Contractors','Total'].includes(h)?'right':'left'}
                        sx={{ color:'#000', fontWeight:'bold', fontSize:14, border:'2px solid #000' }}
                      >
                        {h}
                      </TableCell>
                    ))}
                  </TableRow>
                </TableHead>
                <TableBody>
                  {partitionRows.map((r,i) => (
                    <TableRow key={i}>
                      <TableCell sx={{ border:'2px solid #000' }}>{r.country}</TableCell>
                      <TableCell sx={{ border:'2px solid #000' }}>{r.site}</TableCell>
                      <TableCell align="right" sx={{ border:'2px solid #000' }}>{r.employee}</TableCell>
                      <TableCell align="right" sx={{ border:'2px solid #000' }}>{r.contractor}</TableCell>
                      <TableCell align="right" sx={{
                        border:'2px solid #000',
                        backgroundColor:'#FFC107',
                        fontWeight:'bold'
                      }}>
                        {r.total}
                      </TableCell>
                    </TableRow>
                  ))}
                  {/* Total row */}
                  <TableRow sx={{ bgcolor:'#666' }}>
                    <TableCell colSpan={2} align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                      Total
                    </TableCell>
                    <TableCell align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                      {partitionRows.reduce((s,r)=>s+r.employee,0)}
                    </TableCell>
                    <TableCell align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                      {partitionRows.reduce((s,r)=>s+r.contractor,0)}
                    </TableCell>
                    <TableCell align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                      {partitionRows.reduce((s,r)=>s+r.total,0)}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>

              {/* Toggle & Export */}
              <Box textAlign="center" mt={1}>
                <Button
                  variant="contained"
                  sx={{ bgcolor:'#FFC107', color:'#000' }}
                  onClick={() => setShowDetails(v=>!v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml:2, borderColor:'#FFC107', color:'#FFC107' }}
                    onClick={handleExport}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Paper>

            {/* Details table */}
            {showDetails && (
              <Paper elevation={1} sx={{ mx:'20px', p:2, border:'3px solid #000', borderRadius:2 }}>
                <Table sx={{ border:'2px solid #000', borderCollapse:'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor:'#000' }}>
                      {['Sr','Time','ID','Name','Type','Door','Partition'].map(h => (
                        <TableCell
                          key={h}
                          align="center"
                          sx={{ color:'#FFC107', fontWeight:'bold', fontSize:14, border:'2px solid #000' }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {detailRows.map((r,i) => (
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{ border:'2px solid #000' }}>{i+1}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.LocaleMessageTime.slice(11,19)}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.Door}</TableCell>
                        <TableCell sx={{ border:'2px solid #000' }}>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </Paper>
            )}
          </>
        ) : (
          // no date picked
          <Typography color="textSecondary" align="center" sx={{ mt:2 }}>
            Please select a date to view history.
          </Typography>
        )}
      </Container>
      <Footer />
    </>
  );
}











Now Update same structure for History page refer history page of laca and update same for emea


C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\History.jsx

// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  // Grab optional partition from URL
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  // e.g. "CR" from "CR.Costa Rica Partition"
  const filterCode = decodedPartition?.split('.')[0] || null;

  const [data, setData]               = useState(null);
  const [loading, setLoading]         = useState(true);
  const [pickedDate, setPickedDate]   = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // 1) Summary entry for the selected date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === dateStr) || null;
  }, [data, pickedDate]);

  // 2) Build & filter partitionRows
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };

    return Object.entries(summaryEntry.partitions)
      .filter(([key]) =>
        !filterCode ? true : key.startsWith(filterCode + '.')
      )
      .map(([key, vals]) => {
        const [code, cityRaw] = key.split('.');
        return {
          country: codeToCountry[code] || code,
          city: cityRaw.replace('Partition','').trim(),
          employee: vals.Employee  ?? vals.EmployeeCount  ?? 0,
          contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
          // only CR gets tempBadge
          tempBadge: vals.TempBadge ?? 0,
          total: vals.total ?? 0,
        };
      });
  }, [summaryEntry, filterCode]);

  // 3) Build & filter detailRows
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.details
      .filter(r =>
        format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd') === dateStr
      )
      .filter(r =>
        !filterCode
          ? true
          : r.PartitionName2.startsWith(filterCode + '.')
      );
  }, [data, pickedDate, filterCode]);

  // Fetch all on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Export to Excel
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  const isCostaRica = filterCode === 'CR';

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* DatePicker + Summary */}
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 2, gap: '10px' }}>
            {/* Date picker */}
            <Box sx={{ flex: '0 0 200px' }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>

            {/* Summary & Toggle */}
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              {/* Summary table */}
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell
                        colSpan={isCostaRica ? 6 : 5}
                        align="center"
                        sx={{
                          fontWeight: 'bold',
                          fontSize: 16,
                          bgcolor: '#000',
                          color: '#fff',
                          border: '2px solid #000'
                        }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {/* Column headers */}
                      {[
                        'Country','City','Employee','Contractors',
                        ...(isCostaRica ? ['Temp Badge'] : []),
                        'Total'
                      ].map(h => (
                        <TableCell
                          key={h}
                          align={['Country','City'].includes(h) ? 'left' : 'right'}
                          sx={{
                            color: '#000',
                            fontWeight: 'bold',
                            fontSize: 14,
                            border: '2px solid #000'
                          }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>

                  <TableBody>
                    {partitionRows.map((row,i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                        {isCostaRica && (
                          <TableCell align="right" sx={{ border: '2px solid #000' }}>
                            {row.tempBadge}
                          </TableCell>
                        )}
                        <TableCell
                          align="right"
                          sx={{
                            backgroundColor: '#FFC107',
                            fontWeight: 'bold',
                            border: '2px solid #000'
                          }}
                        >
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}

                    {/* Grand total row */}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      {isCostaRica && (
                        <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                          {partitionRows.reduce((s, r) => s + r.tempBadge, 0)}
                        </TableCell>
                      )}
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* See/Hide Details & Export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          // Only date picker
          <Box sx={{ px: '20px', mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => { setPickedDate(d); setShowDetails(false); }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}


   {/* Details table */}
{showDetails && (
  <Box display="flex" justifyContent="center" mb={2} sx={{width:'100%'}}>
    <Paper
      elevation={1}
      sx={{
        px: '40px',
        py: 1,
        width: '100%',
        // maxWidth: 1000,
        border: '3px solid #000',       // outer black border
        borderRadius: 2,
      }}
    >
      {detailRows.length > 0 ? (
        <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
          <TableHead>
            <TableRow sx={{ bgcolor: '#000' }}>
              {['Sr','Date','Time','Employee ID','Name','Personnel Type','Door','Partition'].map(h => (
                <TableCell
                  key={h}
                  align="center"
                  sx={{
                    color: '#FFC107',
                    fontWeight: 'bold',
                    fontSize: 14,
                    border: '2px solid #000',
                  }}
                >
                  {h}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {detailRows.map((r, i) => (
              <TableRow key={r.PersonGUID}>
                <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>
                  {format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd')}
                </TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>
                  {format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}
                </TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                <TableCell sx={{border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      ) : (
        <Typography
          variant="body2"
          sx={{
            color: '#666',
            textAlign: 'center',
            mt: 2,
            fontStyle: 'italic',
          }}
        >
          No swipe records found for this date.
        </Typography>
      )}
    </Paper>
  </Box>


        )}
      </Container>

      <Footer />
    </>
  );
}






C:\Users\W0024618\Desktop\emea-occupancy-frontend\src\pages\History.jsx


// src/pages/History.jsx
import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container, Box,
  Typography, Paper,
  Table, TableHead, TableBody, TableRow, TableCell,
  Button, TextField

} from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header         from '../components/Header';
import Footer         from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';

import { fetchHistory } from '../api/occupancy.service';

const codeToCountry = {
  AUT: 'Austria',
  DU:  'UAE',
  IE:  'Ireland',
  IT:  'Italy',
  LT:  'Lithuania',
  MA:  'Morocco',
  RU:  'Russia',
  UK:  'United Kingdom',
  ES:  'Spain'
};

export default function History() {
  const { partition } = useParams();
  const decoded     = partition ? decodeURIComponent(partition) : null;
  const filterCode  = decoded?.split('.')[0] || null;

  const [data, setData]             = useState(null);
  const [loading, setLoading]       = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  useEffect(() => {
    fetchHistory().then(json => {
      setData(json);
      setLoading(false);
    });
  }, []);

  const summary = useMemo(() => {
    if (!data || !pickedDate) return null;
    const dateStr = format(pickedDate,'yyyy-MM-dd');
    return data.summaryByDate.find(r=>r.date===dateStr) || null;
  }, [data,pickedDate]);

  const partitionRows = useMemo(() => {
    if (!summary) return [];
    return Object.entries(summary.partitions)
      .filter(([key]) => !filterCode || key.startsWith(filterCode+'.'))
      .map(([key,vals]) => {
        const [code,site] = key.split('.');
        return {
          country: codeToCountry[code]||code,
          site:    site,
          employee:   vals.Employee,
          contractor: vals.Contractor,
          total:      vals.total
        };
      });
  }, [summary, filterCode]);

  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const dateStr = format(pickedDate,'yyyy-MM-dd');
    return data.details
      .filter(r=>r.SwipeDate.slice(0,10)===dateStr)
      .filter(r=>!filterCode||r.PartitionName2.startsWith(filterCode+'.'));
  }, [data,pickedDate,filterCode]);

  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(detailRows.map((r,i)=>({
      Sr: i+1,
      Date: r.SwipeDate.slice(0,10),
      Time: r.LocaleMessageTime.slice(11,19),
      EmployeeID: r.EmployeeID,
      Name: r.ObjectName1,
      PersonnelType: r.PersonnelType,
      Door: r.Door,
      Partition: r.PartitionName2
    })));
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb,ws,'Details');
    const buf = XLSX.write(wb,{bookType:'xlsx',type:'array'});
    saveAs(new Blob([buf]), `history_${pickedDate.toISOString().slice(0,10)}.xlsx`);
  };

  if (loading) return <LoadingSpinner/>;
  return (
    <>
      <Header/>
      <Container maxWidth={false} disableGutters sx={{ p:2 }}>
        <Box mb={2}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Select date"
              value={pickedDate}
              onChange={d=>{ setPickedDate(d); setShowDetails(false); }}
              renderInput={params=><TextField {...params} fullWidth/>}
            />
          </LocalizationProvider>
        </Box>

        {pickedDate && summary && (
          <>
            <Paper elevation={3} sx={{ mb:2, p:2 }}>
              <Typography variant="h6" gutterBottom>
                {format(pickedDate,'EEEE, MMM d, yyyy')}
              </Typography>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Country</TableCell>
                    <TableCell>Site</TableCell>
                    <TableCell align="right">Employees</TableCell>
                    <TableCell align="right">Contractors</TableCell>
                    <TableCell align="right">Total</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {partitionRows.map((r,i)=>(
                    <TableRow key={i}>
                      <TableCell>{r.country}</TableCell>
                      <TableCell>{r.site}</TableCell>
                      <TableCell align="right">{r.employee}</TableCell>
                      <TableCell align="right">{r.contractor}</TableCell>
                      <TableCell align="right">{r.total}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              <Box textAlign="center" mt={2}>
                <Button variant="contained" onClick={()=>setShowDetails(v=>!v)}>
                  {showDetails?'Hide Details':'See Details'}
                </Button>
                {showDetails && (
                  <Button sx={{ ml:1 }} variant="outlined" onClick={exportExcel}>
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Paper>

            {showDetails && (
              <Paper elevation={1} sx={{ p:2 }}>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      {['Sr','Time','ID','Name','Type','Door','Partition'].map(h=>(
                        <TableCell key={h}>{h}</TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {detailRows.map((r,i)=>(
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell>{i+1}</TableCell>
                        <TableCell>{r.LocaleMessageTime.slice(11,19)}</TableCell>
                        <TableCell>{r.EmployeeID}</TableCell>
                        <TableCell>{r.ObjectName1}</TableCell>
                        <TableCell>{r.PersonnelType}</TableCell>
                        <TableCell>{r.Door}</TableCell>
                        <TableCell>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </Paper>
            )}
          </>
        )}
      </Container>
      <Footer/>
    </>
  );
}







