// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Grid,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Skeleton
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition]   = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) {
      setLastUpdate(new Date().toLocaleTimeString());
    }
  }, [data]);

  if (error) {
    return (
      <Container sx={{ mt: 4 }}>
        <Typography color="error">Error loading live data</Typography>
      </Container>
    );
  }

  // Shortcuts when data is ready
  const regions = !loading ? data.realtime : {};
  const names   = Object.keys(regions);

  return (
    <>
      <Header />

      <Container sx={{ mt: 3 }}>
        {/* Top row: Today vs Realtime LACA */}
        <Grid container spacing={2}>
          {loading ? (
            [0,1].map(i => (
              <Grid item xs={12} md={6} key={i}>
                <Skeleton variant="rectangular" height={120} />
              </Grid>
            ))
          ) : (
            <>
              <Grid item xs={12} md={6}>
                <SummaryCard
                  title="LACA Headcount (Today)"
                  stats={[
                    { label: 'Employees',   value: data.today.Employee },
                    { label: 'Contractors', value: data.today.Contractor }
                  ]}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <SummaryCard
                  title="LACA Headcount (Realtime)"
                  stats={[
                    { label: 'Employees',   value: data.today.Employee },   // API uses same breakdown
                    { label: 'Contractors', value: data.today.Contractor }
                  ]}
                />
              </Grid>
            </>
          )}
        </Grid>

        {/* Partition summary */}
        <Box mt={4}>
          <Typography variant="h6" gutterBottom>
            Partitions
            { !loading && (
              <Typography variant="body2" color="textSecondary" component="span" sx={{ ml:2 }}>
                (Updated: {lastUpdate})
              </Typography>
            )}
          </Typography>

          {loading ? (
            <Skeleton variant="rectangular" height={200} />
          ) : (
            <Grid container spacing={2}>
              {names.map(name => {
                const p = regions[name];
                return (
                  <Grid item xs={12} sm={6} md={3} key={name}>
                    <SummaryCard
                      title={name.replace(/^.*\./, '')}
                      stats={[
                        { label: 'Today Emp',     value: p.Employee },
                        { label: 'Today Cont',    value: p.Contractor },
                        { label: 'Realtime Emp',  value: p.Employee },
                        { label: 'Realtime Cont', value: p.Contractor }
                      ]}
                    />
                  </Grid>
                );
              })}
            </Grid>
          )}
        </Box>

        {/* Region-wide chart */}
        <Box mt={4}>
          <Typography variant="h6" gutterBottom>Live Totals by Partition</Typography>
          {loading ? (
            <Skeleton variant="rectangular" height={300} />
          ) : (
            <ChartCard
              title="Partition Totals"
              data={names.map(name => ({
                name: name.replace(/^.*\./, ''),
                value: regions[name].total
              }))}
            />
          )}
        </Box>

        {/* Partition drill-down */}
        <Box mt={4}>
          <FormControl fullWidth>
            <InputLabel>Select Partition</InputLabel>
            <Select
              value={partition}
              label="Select Partition"
              onChange={e => setPartition(e.target.value)}
            >
              <MenuItem value="">— All —</MenuItem>
              {names.map(name => (
                <MenuItem key={name} value={name}>
                  {name.replace(/^.*\./, '')}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {partition && !loading && (
            <Box mt={3}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="h6">
                  {partition.replace(/^.*\./, '')} – Floor Breakdown
                </Typography>
                <Button variant="outlined" onClick={() => navigate(`/realtime/${encodeURIComponent(partition)}`)}>
                  See Swipe Details
                </Button>
              </Box>
              <ChartCard
                title="Live Floor Counts"
                data={Object.entries(regions[partition].floors || {}).map(([floor, cnt]) => ({
                  name: floor,
                  value: cnt
                }))}
              />
            </Box>
          )}
        </Box>
      </Container>

      <Footer />
    </>
  );
}








I want result like 
On Top 
Laca HeadCount(Today)   |  Laca HeadCount RealTime ( Same Employe , Contractor ) on top
Employee 
Contractor 


Below '
Partation 
Costa Rica (Today) | Costa Rica (Realtime same Employee Contractor Count) | Cordoba | Mexixo .....
Employee
Contractor 

same for all partation 
then below Display 1 graph for All Region (Laca only Live data)
then add dropdown to select partation  if i select Costa Rica then Populate Costa Rica Breakdown for Live Only 
also add buttons for see details in detail display only Live swipe Which is present on specific floor ,
Remenaning deatils are already stored on history

and add Footer section carefully 
and Give me updated files carefully

