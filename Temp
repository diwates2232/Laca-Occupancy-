npx create-react-app emea-occupancy-frontend
cd emea-occupancy-frontend
npm install @mui/material @emotion/react @emotion/styled recharts dayjs date-fns xlsx file-saver react-router-dom









Read below all laca frontend project Structure and help me to Build emea frontend step by step.

C:\Users\W0024618\Desktop\laca-occupancy-frontend\public
C:\Users\W0024618\Desktop\laca-occupancy-frontend\public\assets
C:\Users\W0024618\Desktop\laca-occupancy-frontend\public\assets\fonts

C:\Users\W0024618\Desktop\laca-occupancy-frontend\public\index.html

<!-- //C:\Users\W0024618\Desktop\laca-occupancy-frontend\public\index.html -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width,initial-scale=1,shrink-to-fit=no"
    />
    <meta name="theme-color" content="#000000" />
    <title>Western Union • LACA Occupancy Dashboard</title>
    <!-- Favicon (optional) -->
    <link rel="icon" href="%PUBLIC_URL%/assets/logo.png" />
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      If you ever need to insert a script before React mounts,
      you can do it here.
    -->
  </body>
</html>




C:\Users\W0024618\Desktop\laca-occupancy-frontend\src


C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\api\occupancy.service.js


//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\api\occupancy.service.js
const BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3001';

export async function fetchLiveSummary() {
  const res = await fetch(`${BASE}/api/occupancy/live-summary`);
  if (!res.ok) throw new Error(`Live summary fetch failed: ${res.status}`);
  return res.json();
}

export async function fetchHistory(location) {
  const url = location
    ? `${BASE}/api/occupancy/history/${encodeURIComponent(location)}`
    : `${BASE}/api/occupancy/history`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`History fetch failed: ${res.status}`);
  return res.json();
}





C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\assets

C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\assets\flags
C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\assets\images
C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\assets\styles

C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components



// src/components/ChartCard.jsx
// import React, { useState } from 'react';
import React, { Fragment, useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import {
  AreaChart,
  Area,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Brush,
  LabelList,
  ReferenceLine,
} from 'recharts';
import dayjs from 'dayjs';

export default function ChartCard({
  title,
  data = [],
  dataKey = 'value',
  chartHeight = 350,
  colors = { head: '#FFC107', cap: '#B0BEC5' },
  animateDuration = 800,
  showCrosshair = true,
  timeFormat = 'HH:mm:ss',
    axisProps = {},               // NEW
  tooltipFormatter = null,      // NEW
}) {
  const [hidden, setHidden] = useState({});
  const [activeIndex, setActiveIndex] = useState(null);

  if (!Array.isArray(data) || !data.length) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h6">{title}</Typography>
          <Typography variant="body2">No data to display.</Typography>
        </CardContent>
      </Card>
    );
  }

  const hasCapacity = data[0].Capacity != null;
  const handleLegendClick = o => {
    const { dataKey } = o;
    setHidden(prev => ({ ...prev, [dataKey]: !prev[dataKey] }));
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardContent>
        {/* Chart title */}
        <Typography variant="h6" gutterBottom sx={{ color: colors.head }}>
          {title}
        </Typography>

        {/* Chart container */}
        <Box sx={{ width: '100%', height: chartHeight }}>
          <ResponsiveContainer>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 20 }}>
              <defs>
                <linearGradient id="colorHead" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="50%" stopColor={colors.head} stopOpacity={0.4} />
                  <stop offset="95%" stopColor={colors.head} stopOpacity={0} />
                </linearGradient>
              </defs>

              {/* Grid */}
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />

              {/* Crosshair vertical line */}
              {showCrosshair && activeIndex != null && data[activeIndex] && (
                <ReferenceLine
                  x={data[activeIndex].name}
                  stroke={colors.head}
                  strokeOpacity={0.5}
                />
              )}

              <XAxis
                dataKey="name"
                tick={{ fill: '#FFF', fontWeight: 600 }}
                tickFormatter={t => {
                  // if timestamp-like, format; else just return
                  return typeof t === 'number'
                    ? dayjs(t).format(timeFormat)
                    : t;
                    
                }}
                label={{
                  value: 'Time',
                  position: 'insideBottomRight',
                  offset: -10,
                  fill: '#FFF',
                  fontWeight: 600
                }}
                {...axisProps.xAxis}
              />

              <YAxis
                tick={{ fill: '#FFF', fontWeight: 600 }}
                label={{
                  value: 'Count',
                  angle: -90,
                  position: 'insideLeft',
                  fill: '#FFF',
                  fontWeight: 600
                }}
                 {...axisProps.yAxis}
              />

              {/* Tooltip & Legend */}
               <Tooltip
                contentStyle={{ backgroundColor: '#000', border: `1px solid ${colors.head}`, padding: '1rem' }}
                cursor={showCrosshair}
                isAnimationActive={false}
                onMouseMove={o => setActiveIndex(o && o.activeTooltipIndex)}
             
             
                content={({ active, payload }) => {
   if (!active || !payload || !payload.length) return null;
   const { breakdown = {}, name } = payload[0].payload;
   return (
     <Box
       sx={{
         backgroundColor: '#000',     // ensure black background
         border: `1px solid ${colors.head}`,
        padding: 1,
         borderRadius: 1,
       }}
     >
       <Typography variant="subtitle2" sx={{ color: colors.head, mb: 1 }}>
         {name}
       </Typography>
       {Object.entries(breakdown).map(([key, val]) => (
         <Typography key={key} variant="body2" sx={{ color: '#FFF' }}>
           {key}: {val}
         </Typography>
       ))}
     </Box>
   );
 }}





              
              />

              <Legend wrapperStyle={{ color: '#FFF' }} onClick={handleLegendClick} />

              {/* Brush for zooming/panning */}
              <Brush
                dataKey="name"
                height={30}
                stroke={colors.head}
                travellerWidth={10}
                updateId={data.length} // reset on data change
              />

              {/* Capacity area */}
              {hasCapacity && !hidden.Capacity && (
                <Area
                  type="monotone"
                  dataKey="Capacity"
                  name="Capacity"
                  stroke={colors.cap}
                  fill={`${colors.cap}33`}
                  dot={false}
                >
                  <LabelList
                    dataKey="Capacity"
                    position="top"
                    style={{ fill: colors.cap, fontSize: 10, fontWeight: 600 }}
                  />
                </Area>
              )}

              {/* Headcount area */}
              {!hidden.Headcount && (
                <Area
                  type="monotone"
                  dataKey={hasCapacity ? 'Headcount' : dataKey}
                  name={hasCapacity ? 'Headcount' : dataKey}
                  stroke={colors.head}
                  fill="url(#colorHead)"
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                >
                  <LabelList
                    dataKey={hasCapacity ? 'Headcount' : dataKey}
                    position="top"
                    style={{ fill: '#FFF', fontSize: 12, fontWeight: 600 }}
                  />
                </Area>
              )}

              {/* Overlay line for crisp “spark” */}
              {!hidden.Headcount && (
                <Line
                  type="monotone"
                  dataKey={hasCapacity ? 'Headcount' : dataKey}
                  stroke={colors.head}
                  strokeWidth={2}
                  dot={false}
                  isAnimationActive
                  animationDuration={animateDuration}
                  activeDot={{ r: 6, stroke: '#FFF', strokeWidth: 2 }}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
}







//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\DataTable.jsx

import React from 'react';
import {
  Table, TableHead, TableBody, TableRow, TableCell, Paper, TableContainer
} from '@mui/material';

export default function DataTable({ columns, rows }) {
  return (
    <TableContainer component={Paper} sx={{ mt: 2, width: '100%' }}>
      <Table size="small">
        <TableHead>
          <TableRow>
            {columns.map(c => (
              <TableCell key={c.field} sx={{ fontWeight: 'bold' }}>
                {c.headerName}
              </TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((row, i) => (
            <TableRow key={i}>
              {columns.map(c => (
                <TableCell key={c.field}>
                  {row[c.field]}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}






// src/components/Footer.jsx

import React from 'react';
import { Box, Typography } from '@mui/material';

export default function Footer() {


     return (
     <Box component="footer" className="footer">
       <Typography variant="body2" className="credit" align="center">
         © {new Date().getFullYear()} Western Union. All rights reserved.
       </Typography>
     </Box>

  );
}





// src/components/Header.jsx

import React from 'react';
import {
  AppBar,
  Toolbar,
  Box,
  Typography,
  Select,
  MenuItem,
  IconButton
} from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';

import HomeIcon    from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import ListAltIcon from '@mui/icons-material/ListAlt';

import WuLogo from '../assets/wu-logo.png';
import CostaRicaFlag from '../assets/flags/costa-rica.png';
import ArgentinaFlag  from '../assets/flags/argentina.png';
import MexicoFlag     from '../assets/flags/mexico.png';
import PeruFlag       from '../assets/flags/peru.png';
import BrazilFlag     from '../assets/flags/brazil.png';
import PanamaFlag     from '../assets/flags/panama.png';
import LacaFlag       from '../assets/laca-flag.png';
import { partitionList } from '../services/occupancy.service';

export default function Header() {
  const navigate = useNavigate();
  const loc = useLocation();

  const parts = loc.pathname.split('/').filter(Boolean);
  const isPartitionPath = parts[0] === 'partition' && Boolean(parts[1]);
  const currentPartition = isPartitionPath ? decodeURIComponent(parts[1]) : '';
  const suffixSegments = isPartitionPath
    ? parts.slice(2)
    : parts[0] === 'history'
      ? ['history']
      : [];

  const flagMap = {
    'CR.Costa Rica Partition': CostaRicaFlag,
    'AR.Cordoba':               ArgentinaFlag,
    'MX.Mexico City':           MexicoFlag,
    'PE.Lima':                  PeruFlag,
    'BR.Sao Paulo':             BrazilFlag,
    'PA.Panama City':           PanamaFlag,
  };
  const selectedFlag = flagMap[currentPartition] || LacaFlag;

  const makePartitionPath = (suffix) => {
    const base = `/partition/${encodeURIComponent(currentPartition)}`;
    return suffix ? `${base}/${suffix}` : base;
  };

  const handlePartitionChange = (newPartition) => {
    if (!newPartition) return navigate('/');
    const base = `/partition/${encodeURIComponent(newPartition)}`;
    const full = suffixSegments.length
      ? `${base}/${suffixSegments.join('/')}`
      : base;
    navigate(full);
  };

  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>

        {/* Left side: Logo, Title, Navigation Icons */}
        <Box display="flex" alignItems="center" sx={{ flexGrow: 1 }}>
          <Box component="img" src={WuLogo} alt="WU Logo" sx={{ height: 36, mr: 2 }} />

          <Typography variant="h6" sx={{ fontWeight: 600, mr: 3 }}>
            Western Union – LACA
            {currentPartition && (
              <> • {currentPartition.replace('CR.Costa Rica Partition','Costa Rica')}</>
            )}
          </Typography>

          {/* Dashboard Icon (green) */}
          <IconButton
            size="large"
            color="inherit"
            onClick={() => {
              const target = currentPartition
                ? `/partition/${encodeURIComponent(currentPartition)}`
                : '/';
              navigate(target);
            }}
          >
            <HomeIcon sx={{ color: '#4caf50' }} />
          </IconButton>

          {/* History Icon (orange) */}
          <IconButton
            size="large"
            color="inherit"
            onClick={() => {
              const target = currentPartition
                ? makePartitionPath('history')
                : '/history';
              navigate(target);
            }}
          >
            <HistoryIcon sx={{ color: '#F88379' }} />
          </IconButton>

          {/* Details Icon (blue) */}
          {currentPartition && (
            <IconButton
              size="large"
              color="inherit"
              onClick={() => navigate(makePartitionPath('details'))}
            >
              <ListAltIcon sx={{ color: '#2196f3' }} />
            </IconButton>
          )}
        </Box>

        {/* Right side: Partition selector + Flag */}
        <Box display="flex" alignItems="center">
          <Select
            size="small"
            value={currentPartition}
            displayEmpty
            onChange={e => handlePartitionChange(e.target.value)}
            sx={{ bgcolor: 'background.paper', mr: 2 }}
          >
            <MenuItem value="">— Select Partition —</MenuItem>
            {partitionList.map(p => (
              <MenuItem key={p} value={p}>
                {p.replace('Partition', '')}
              </MenuItem>
            ))}
          </Select>
          <Box component="img" src={selectedFlag} alt="Flag" sx={{ height: 50 }} />
        </Box>
      </Toolbar>
    </AppBar>
  );
}



//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\LoadingSpinner.jsx

import React from 'react';
import { CircularProgress, Box } from '@mui/material';

export default function LoadingSpinner() {
  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      height="60vh"
    >
      <CircularProgress />
    </Box>
  );
}





//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\SummaryCard.jsx
import React from 'react';
import { Card, CardContent, Typography, Box, Grid } from '@mui/material';

// export default function SummaryCard({ title, total, stats, icon, titleColor,totalColor,statColors,idx,sx = {} }) {
export default function SummaryCard({
  title,
  total,
  stats,
  icon,
  titleColor,
  totalColor,
  statColors,
  sx,idx = {}
}) {

  return (
    <Card variant="outlined" sx={{ px: 2, py: 1, ...sx }}>
      <CardContent sx={{ textAlign: 'center' }}>
     
             {/* Icon + Title */}
        <Box display="flex" justifyContent="center" alignItems="center" mb={1}>
          {icon && (
            <Box component="span" sx={{ mr: 1, fontSize: 34, color: 'primary.main' }}>
              {icon}
            </Box>
          )}

          
          {/* <Typography variant="subtitle1" gutterBottom> */}

          <Typography
            variant="subtitle1"
            gutterBottom
            sx={ titleColor ? { color: titleColor } : {} }
          >

            {title}
          </Typography>
        </Box>

     
     
        {total != null && (
          <Box display="flex" justifyContent="center" alignItems="baseline" mb={1}>
            {/* <Typography variant="h4" sx={{ mr: 1 }}> */}

            <Typography
              variant="h4"
              sx={{
                mr: 1,
                ...(totalColor ? { color: totalColor } : {})
              }}
            >

              {total}
            </Typography>
            {/* <Typography variant="caption">Total</Typography> */}
          
          </Box>
        )}
  

        <Grid container spacing={1} justifyContent="center">
          {stats.map(({ label, value }, idx) => (
            <Grid key={label} item xs={6}>



              <Typography
                variant="caption"
          

                sx={ statColors && statColors[idx]
                  ? { color: statColors[idx] }
                  : {} }
  >
                {label}
              </Typography>
              <Typography
                variant="h6"


                sx={ statColors && statColors[idx]
                  ? { color: statColors[idx] }
                  : {} }

              >
                {value}
              </Typography>

            </Grid>
          ))}
        </Grid>
      </CardContent>
    </Card>
  );
}








//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\ZoneDetailsTable.jsx
import React, { useState, useMemo } from 'react';
// import './ZoneDetailsTable.css'; // copy over your CSS from Pune

export default function ZoneDetailsTable({ data = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) sort floors by descending count
  const sortedFloors = useMemo(() => {
    return Object.entries(data).sort(([, listA], [, listB]) => listB.length - listA.length);
  }, [data]);

  // 2) filter predicate
  const matches = emp =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  if (sortedFloors.length === 0) {
    return <p>No floor details available.</p>;
  }

  return (
    <div className="zone-cards">
      <div style={{ marginBottom: 16, textAlign: 'right' }}>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          style={{
            padding: '6px 12px',
            fontSize: '0.9rem',
            borderRadius: 4,
            border: '1px solid #ccc'
          }}
        />
      </div>

      {sortedFloors.map(([floor, emps]) => {
        const filtered = emps.filter(matches);
        if (!filtered.length) return null;

        return (
          <div key={floor} className="zone-card">
            <div className="zone-header">
              <h3>{floor.trim()}</h3>
              <span className="zone-badge">Total: {filtered.length}</span>
            </div>
            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Emp ID</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Card</th>
                  <th>Door</th>
                </tr>
              </thead>
              <tbody>
                {filtered.map((r, i) => (
                  <tr key={`${r.PersonGUID}-${i}`}>
                    <td>{r.ObjectName1}</td>
                    <td>{r.EmployeeID}</td>
                    <td>{new Date(r.LocaleMessageTime).toLocaleTimeString()}</td>
                    <td>{r.PersonnelType}</td>
                    <td>{r.CardNumber}</td>
                    <td>{r.Door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}





C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\data\seatCapacities.js

C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\hooks


// src/hooks/useLiveOccupancy.js

import { useState, useEffect, useRef } from 'react';
import { fetchLiveSummary } from '../api/occupancy.service';

export function useLiveOccupancy(interval = 1000) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const timer = useRef(null);

  useEffect(() => {
    let active = true;

    async function load() {
      try {
        const json = await fetchLiveSummary();
        if (!active) return;
        setData(json);
        setLoading(false);
      } catch (e) {
        if (!active) return;
        setError(e);
        setLoading(false);
      }
    }

    load();
    timer.current = setInterval(load, interval);

    return () => {
      active = false;
      clearInterval(timer.current);
    };
  }, [interval]);

  return { data, loading, error };
}



C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\pages\Dashboard.jsx



// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Skeleton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Divider
} from '@mui/material';


import GroupIcon from '@mui/icons-material/Group';         // Replaces TodayIcon
import TrackChangesIcon from '@mui/icons-material/TrackChanges'; // Replaces SyncIcon


import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';

// Flags
import CostaRicaFlag  from '../assets/flags/costa-rica.png';
import ArgentinaFlag  from '../assets/flags/argentina.png';
import MexicoFlag     from '../assets/flags/mexico.png';
import PeruFlag       from '../assets/flags/peru.png';
import BrazilFlag     from '../assets/flags/brazil.png';
import PanamaFlag     from '../assets/flags/panama.png';


import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
 


const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba':               'Argentina',
  'MX.Mexico City':           'Mexico',
  'PE.Lima':                  'Peru',
  'BR.Sao Paulo':             'Brazil',
  'PA.Panama City':           'Panama'
};

const colorsMap = {
  'CR.Costa Rica Partition': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063', '#ec7063'],
  'AR.Cordoba':               ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MX.Mexico City':           ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PE.Lima':                  ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'BR.Sao Paulo':             ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PA.Panama City':           ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
};


export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  // Build and sort partitions
  const regions = data?.realtime || {};
  const partitions = partitionList
    .map(name => {
      const key = Object.keys(regions).find(k => k.includes(name));
      const p = key ? regions[key] : {};
      return {
        name,
        total: p.total || 0,
        Employee: p.Employee || 0,
        Contractor: p.Contractor || 0,
        TempBadge: p.TempBadge || 0,
        floors: p.floors || {}
      };
    })
    .sort((a, b) => b.total - a.total);

  // Totals
  const todayTot   = data?.today?.total    ?? 0;
  const todayEmp   = data?.today?.Employee ?? 0;
  const todayCont  = data?.today?.Contractor ?? 0;
  const realtimeTot  = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp  = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  return (
    <>
      <Header />

      <Container
        maxWidth={false}
        disableGutters
        sx={{
          pt: 1,
          pb: 2,
          px: '20px',        // ← exactly 20px padding both sides
        }}
      >


        {/* Top six summary cards */}
     <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
  {[
    {
      title: "Today's Total Headcount",
      value: todayTot,
      icon: <GroupIcon sx={{ color: '#E57373', fontSize: 36 }} />,
      borderColor: '#FFD666',
    },
    {
      title: "Today's Employees Count",
      value: todayEmp,
      icon: <PeopleIcon sx={{ color: '#81C784', fontSize: 36 }} />,
      borderColor: '#81C784', 
    },
    {
      title: "Today's Contractors Count",
      value: todayCont,
      icon: <BusinessCenterIcon sx={{ color: '#64B5F6', fontSize: 36 }} />,
      borderColor: '#FFE599',
      
    },
    {
      title: "Realtime Headcount",
      value: realtimeTot,
      icon: <TrackChangesIcon sx={{ color: '#BA68C8', fontSize: 36 }} />,
      borderColor: '#FFF2CC',
    },
    {
      title: "Realtime Employees Count",
      value: realtimeEmp,
      icon: <PeopleIcon sx={{ color: '#FFB74D', fontSize: 36 }} />,
      borderColor: '#FFD666',
    },
    {
      title: "Realtime Contractors Count",
      value: realtimeCont,
      icon: <BusinessCenterIcon sx={{ color:  '#4DB6AC', fontSize: 36 }} />,
      borderColor: '#FFE599'
    }
 

    ].map(card => (
     <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
       <SummaryCard
         title={card.title}
         total={card.value}
         stats={[]}
         icon={card.icon}
         sx={{
           height: 140,
           border: `1px solid ${card.borderColor}`
         }}
       />
     </Box>
   ))}
 </Box> 



        {/* Partition cards */}
        <Box mt={4} sx={{ width: '100vw%', display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {loading ? (
            <Skeleton variant="rectangular" width="100vw%" height={200} />
          ) : (
                        (() => {
              // map of flags and primary colors for each partition
              const flagMap = {
                'CR.Costa Rica Partition': CostaRicaFlag,
                'AR.Cordoba':               ArgentinaFlag,
                'MX.Mexico City':           MexicoFlag,
                'PE.Lima':                  PeruFlag,
                'BR.Sao Paulo':             BrazilFlag,
                'PA.Panama City':           PanamaFlag,
              };


              // full palette arrays per flag: [title, total, stat1, stat2, stat3?]
              const colorsMap = {
                'CR.Costa Rica Partition': [
                  '#FFD666', // title (red)
                  '#fcf3cf', // total (blue)
                  '#2ecc71', // Employees (white)
                  '#ec7063', // Contractors (blue)
                  '#ec7063'  // TempBadge (white)
                ],
               'AR.Cordoba': [
                   '#FFE599', // title (light blue)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (sun yellow)
                  '#ec7063',  // Contractors (white)
                ],
                'MX.Mexico City': [
                   '#FFD666', // title (green)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (red)
                  '#ec7063',  // Contractors (white)
                ],
                'PE.Lima': [
                  '#FFF2CC', // title (red)
                  '#fcf3cf', // total (white)
                  '#2ecc71',// Employees (red)
                  '#ec7063',  // Contractors (white)
                ],
                'BR.Sao Paulo': [
                  '#FFD666', // title (green)
                  '#fcf3cf', // total (yellow)
                  '#2ecc71', // Employees (blue)
                  '#ec7063', // Contractors (yellow)
                ],
                'PA.Panama City': [
                  '#FFE599', // title (blue)
                  '#fcf3cf', // total (white)
                  '#2ecc71', // Employees (red)
                  '#ec7063', // Contractors (white)
                ]
              };

              return partitions.map(p => {
  

                const flagSrc = flagMap[p.name] || '';
                const colors = colorsMap[p.name] || ['#FFC107', '#FFC107'];
                const [ titleC, totalC, ...statCs ] = colors;


                return (
                  <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                    <SummaryCard
                      // title={p.name}
                      title={displayNameMap[p.name] || p.name.replace(' Partition','')}
                    
                      icon={
                        flagSrc && (
                          <Box
                            component="img"
                            src={flagSrc}
                            alt={`${p.name} flag`}
                            sx={{
                              width: 50,
                              height: 30,
                              border: '1px solid #fff'  // 1px border
                            }}
                          />
                        )
                      }


                      total={p.total}
                      stats={[
                        { label: 'Employees',   value: p.Employee },
                        { label: 'Contractors', value: p.Contractor },
                        ...(p.name === 'CR.Costa Rica Partition'
                          ? [{ label: 'Temp Badge', value: p.TempBadge }]
                          : [])
                      ]}

                      // pass our new color props
                      titleColor={titleC}
                      totalColor={totalC}
                      statColors={statCs}


                    sx={{
                        width: '100vw%',
                    
                           border: `1px solid ${titleC}`,

       // typography overrides:
       '& .MuiTypography-subtitle1': {
         fontSize: '1.3rem'          // partition title
       },
       '& .MuiTypography-h4': {
         fontSize: '1.7rem'        // partition total
       },
       '& .MuiTypography-caption': {
         fontSize: '0.875rem'      // partition stats labels/values
       }

                      }}
                    />
                  </Box>
                );
              });
            })()
           )}
         </Box>

          


        {/* Live totals chart */}
        <Box mt={4} sx={{ width: '100vw%' ,p:2, border: '1px solid #FFC107' }}>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h6" gutterBottom>
              Live Totals by Partition
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
          </Box>

        {loading ? (
            <Skeleton variant="rectangular" width="100%" height={320} />
          ) : (
  <ChartCard
    chartType="bar"                  // new prop
    chartHeight={360}

 
      data={partitions.map((p, i) => ({
    name: displayNameMap[p.name] || p.name.replace(' Partition',''),
    value: p.total,
    breakdown: {
      Employees: p.Employee,
      Contractors: p.Contractor,
      ...(p.TempBadge ? { 'Temp Badge': p.TempBadge } : {})
    },
    fill: colorsMap[p.name]?.[0] || (i % 2 === 0 ? '#FFC107' : '#B0BEC5')
  }))}




    dataKey="value"
    colors={{ head: '#FFC107', cap: '#B0BEC5' }}

     // Pass in the live breakdown for Employees / Contractors / TempBadge
     breakdown={{
       Employee: realtimeEmp,
       Contractor: realtimeCont,
       TempBadge: partitions.reduce((sum,p)=>sum+p.TempBadge,0),
     }}



    sx={{ border: '2px solid #FFC107' }}
  />
          )}
        </Box>
      </Container>

      <footer style={{
        backgroundColor: '#000000',
        color: '#FFC107',
        padding: '1.5rem 0',
        textAlign: 'center',
        marginTop: 0,
        borderTop: '2px solid #FFC107',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div><strong>Global Security Operations Center</strong><br/>
          Live HeadCount against Occupancy dashboard for Western Union — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
             style={{ color: '#FFC107', textDecoration: 'underline' }}>
            GSOC Mail
          </a>&nbsp;|&nbsp;
          Landline:&nbsp;<span style={{ color: '#FFC107' }}>+91-020-67632394</span>
        </div>
      </footer>
    </>
  );
}


// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  // Grab optional partition from URL
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  // e.g. "CR" from "CR.Costa Rica Partition"
  const filterCode = decodedPartition?.split('.')[0] || null;

  const [data, setData]               = useState(null);
  const [loading, setLoading]         = useState(true);
  const [pickedDate, setPickedDate]   = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // 1) Summary entry for the selected date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === dateStr) || null;
  }, [data, pickedDate]);

  // 2) Build & filter partitionRows
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };

    return Object.entries(summaryEntry.partitions)
      .filter(([key]) =>
        !filterCode ? true : key.startsWith(filterCode + '.')
      )
      .map(([key, vals]) => {
        const [code, cityRaw] = key.split('.');
        return {
          country: codeToCountry[code] || code,
          city: cityRaw.replace('Partition','').trim(),
          employee: vals.Employee  ?? vals.EmployeeCount  ?? 0,
          contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
          // only CR gets tempBadge
          tempBadge: vals.TempBadge ?? 0,
          total: vals.total ?? 0,
        };
      });
  }, [summaryEntry, filterCode]);

  // 3) Build & filter detailRows
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.details
      .filter(r =>
        format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd') === dateStr
      )
      .filter(r =>
        !filterCode
          ? true
          : r.PartitionName2.startsWith(filterCode + '.')
      );
  }, [data, pickedDate, filterCode]);

  // Fetch all on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Export to Excel
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  const isCostaRica = filterCode === 'CR';

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* DatePicker + Summary */}
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 2, gap: '10px' }}>
            {/* Date picker */}
            <Box sx={{ flex: '0 0 200px' }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>

            {/* Summary & Toggle */}
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              {/* Summary table */}
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell
                        colSpan={isCostaRica ? 6 : 5}
                        align="center"
                        sx={{
                          fontWeight: 'bold',
                          fontSize: 16,
                          bgcolor: '#000',
                          color: '#fff',
                          border: '2px solid #000'
                        }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {/* Column headers */}
                      {[
                        'Country','City','Employee','Contractors',
                        ...(isCostaRica ? ['Temp Badge'] : []),
                        'Total'
                      ].map(h => (
                        <TableCell
                          key={h}
                          align={['Country','City'].includes(h) ? 'left' : 'right'}
                          sx={{
                            color: '#000',
                            fontWeight: 'bold',
                            fontSize: 14,
                            border: '2px solid #000'
                          }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>

                  <TableBody>
                    {partitionRows.map((row,i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                        {isCostaRica && (
                          <TableCell align="right" sx={{ border: '2px solid #000' }}>
                            {row.tempBadge}
                          </TableCell>
                        )}
                        <TableCell
                          align="right"
                          sx={{
                            backgroundColor: '#FFC107',
                            fontWeight: 'bold',
                            border: '2px solid #000'
                          }}
                        >
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}

                    {/* Grand total row */}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      {isCostaRica && (
                        <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                          {partitionRows.reduce((s, r) => s + r.tempBadge, 0)}
                        </TableCell>
                      )}
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* See/Hide Details & Export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          // Only date picker
          <Box sx={{ px: '20px', mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => { setPickedDate(d); setShowDetails(false); }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}


   {/* Details table */}
{showDetails && (
  <Box display="flex" justifyContent="center" mb={2} sx={{width:'100%'}}>
    <Paper
      elevation={1}
      sx={{
        px: '40px',
        py: 1,
        width: '100%',
        // maxWidth: 1000,
        border: '3px solid #000',       // outer black border
        borderRadius: 2,
      }}
    >
      {detailRows.length > 0 ? (
        <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
          <TableHead>
            <TableRow sx={{ bgcolor: '#000' }}>
              {['Sr','Date','Time','Employee ID','Name','Personnel Type','Door','Partition'].map(h => (
                <TableCell
                  key={h}
                  align="center"
                  sx={{
                    color: '#FFC107',
                    fontWeight: 'bold',
                    fontSize: 14,
                    border: '2px solid #000',
                  }}
                >
                  {h}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {detailRows.map((r, i) => (
              <TableRow key={r.PersonGUID}>
                <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>
                  {format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd')}
                </TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>
                  {format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}
                </TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                <TableCell sx={{border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      ) : (
        <Typography
          variant="body2"
          sx={{
            color: '#666',
            textAlign: 'center',
            mt: 2,
            fontStyle: 'italic',
          }}
        >
          No swipe records found for this date.
        </Typography>
      )}
    </Paper>
  </Box>


        )}
      </Container>

      <Footer />
    </>
  );
}











// src/pages/PartitionDetail.jsx
import React, { useEffect, useState, useMemo } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";

import { useParams, useNavigate } from "react-router-dom";
import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

import GroupIcon from '@mui/icons-material/Group';         // Replaces TodayIcon
import TrackChangesIcon from '@mui/icons-material/TrackChanges'; // Replaces SyncIcon


import PeopleIcon from '@mui/icons-material/People';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';



export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [details, setDetails] = useState([]);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto-refresh live
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      // we'll still fetch details so partition/details page has data ready
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction)
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // Load history
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then(json => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  // Totals
  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0, Employee: 0, Contractor: 0, TempBadge: 0, floors: {}
  };

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>← Back</Button>
          </Box>


          {/* Six‐card partition summary */}
          <Box display="flex" flexWrap="wrap" gap={1} mb={2} sx={{ px: "20px" }}>
            {[
              {
                title: `Todays Total Headcount`,
                value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
                icon: <GroupIcon sx={{ color: '#E57373', fontSize: 36 }} />,
                border: '#FFD666'
              },
              {
                title: `Todays Employees Count`,
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
                icon: <PeopleIcon sx={{ color: '#81C784', fontSize: 36 }} />,
                border: '#81C784'
              },
              {
                title: `Todays Contractors Count`,
                value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
                icon: <BusinessCenterIcon sx={{ color: '#64B5F6', fontSize: 36 }} />,
                border: '#FFE599'
              },
              {
                title: `Realtime Headcount`,
                value: live.total,
                icon: <TrackChangesIcon sx={{ color: '#BA68C8', fontSize: 36 }} />,
                border: '#FFF2CC'
              },
              {
                title: `Realtime Employees Count`,
                value: live.Employee,
                icon: <PeopleIcon sx={{ color: '#FFB74D', fontSize: 36 }} />,
                border: '#FFD666'
              },
              {
                title: `Realtime Contractors Count`,
                value: live.Contractor,
                icon: <BusinessCenterIcon sx={{ color: '#4DB6AC', fontSize: 36 }} />,
                border: '#FFE599'
              }
            ].map(card => (
              <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
                <SummaryCard
                  title={card.title}
                  total={card.value}
                  stats={[]}
                  icon={card.icon}
                  sx={{
                    height: 140,
                    border: `1px solid ${card.border}`
                  }}
                />
              </Box>
            ))}
          </Box>




          {/* Chart + See Details */}
          <Box mb={4} sx={{ px: "20px",p:2, border: '2px solid #FFC107'  }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6">Live Floor Counts</Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>
            <ChartCard
              title=""
              data={Object.entries(live.floors).map(([floor, cnt]) => ({ name: floor.trim(), value: cnt }))}
              chartHeight={320}
            />
            <Box display="flex" justifyContent="flex-end" mt={1}>  
  <Button
  variant="contained"
  size="small"
  onClick={() =>
    navigate(`/partition/${encodeURIComponent(partition)}/details`)
  }
>
  See Details
</Button>

            </Box>
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}
















// src/pages/PartitionDetailDetails.jsx
import React, { useEffect, useState, useMemo } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  TextField,
  TableContainer,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import DataTable from "../components/DataTable";
import { fetchLiveSummary } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [details, setDetails] = useState([]);
  const [loading, setLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedFloor, setExpandedFloor] = useState(null);

  // Initial load on partition change: show spinner
  useEffect(() => {
    let isMounted = true;
    setLoading(true);
    fetchLiveSummary().then(json => {
      if (!isMounted) return;
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction),
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    });
    return () => {
      isMounted = false;
    };
  }, [partition]);

  // Subsequent refresh every second, without spinner
  useEffect(() => {
    const interval = setInterval(async () => {
      const json = await fetchLiveSummary();
      const det = json.details
        .filter(r => r.PartitionName2 === partition && r.Direction === "InDirection")
        .map(r => ({
          ...r,
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction),
        }));
      setDetails(det);
      setLastUpdate(new Date().toLocaleTimeString());
    }, 1000);
    return () => clearInterval(interval);
  }, [partition]);

  // Group by floor
  const floorMap = useMemo(() => {
    const m = {};
    details.forEach(r => {
      m[r.floor] = m[r.floor] || [];
      m[r.floor].push(r);
    });
    return m;
  }, [details]);

  // Filter + sort
  const displayed = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return Object.entries(floorMap)
      .filter(([floor, emps]) => {
        if (!term) return true;
        if (floor.toLowerCase().includes(term)) return true;
        return emps.some(r =>
          r.ObjectName1.toLowerCase().includes(term) ||
          r.EmployeeID.toLowerCase().includes(term)
        );
      })
      .sort((a, b) => b[1].length - a[1].length);
  }, [floorMap, searchTerm]);

  const columns = [
    { field: "EmployeeID", headerName: "Emp ID" },
    { field: "ObjectName1", headerName: "Name" },
    { field: "LocaleMessageTime", headerName: "Swipe Time" },
    { field: "PersonnelType", headerName: "Type" },
    { field: "CardNumber", headerName: "Card" },
    { field: "Door", headerName: "Door" },
  ];

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back */}
          <Box display="flex" alignItems="center" mb={2} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back to Overview
            </Button>
          </Box>

          {/* Floor Details + Search */}
          <Box display="flex" alignItems="center" gap={2} mb={2} sx={{ px: "20px" }}>
            <Typography variant="h6">Floor Details</Typography>
            <Typography variant="body2" color="textSecondary">
              Last updated: {lastUpdate}
            </Typography>
            <TextField
              size="small"
              placeholder="Search floor / emp…"
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
            />
          </Box>

          {/* Show spinner only during initial load */}
          {loading ? (
            <Box sx={{ px: "20px", py: 8 }}>
              <LoadingSpinner />
            </Box>
          ) : (
            <>
              {/* Edge-to-edge cards */}
              <Box
                component="section"
                sx={{
                  display: "flex",
                  flexWrap: "wrap",
                  width: "100%",
                  margin: 0,
                  padding: 0,
                }}
              >
                {displayed.map(([floor, emps]) => (
                  <Box
                    key={floor}
                    sx={{
                      width: "50%",
                      boxSizing: "border-box",
                      p: "20px",
                    }}
                  >
                    <Box
                      sx={{
                        border: "1px solid #FFC107",
                        borderRadius: 2,
                        height: "100%",
                      }}
                    >
                      <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                        {floor} (Total {emps.length})
                      </Typography>
                      <TableContainer component={Paper} variant="outlined" sx={{ mb: 1 }}>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              {["Emp ID", "Name", "Swipe Time", "Type", "Card", "Door"].map(h => (
                                <TableCell key={h} sx={{ fontWeight: "bold" }}>
                                  {h}
                                </TableCell>
                              ))}
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {emps.slice(0, 10).map((r, i) => {
                              const term = searchTerm.trim().toLowerCase();
                              const isMatch =
                                term &&
                                (r.ObjectName1.toLowerCase().includes(term) ||
                                  r.EmployeeID.toLowerCase().includes(term));
                              return (
                                <TableRow
                                  key={`${r.PersonGUID}-${i}`}
                                  sx={isMatch ? { backgroundColor: "rgba(255, 235, 59, 0.3)" } : {}}
                                >
                                  <TableCell>{r.EmployeeID}</TableCell>
                                  <TableCell>{r.ObjectName1}</TableCell>
                                  <TableCell>
                                    {new Date(r.LocaleMessageTime).toLocaleTimeString()}
                                  </TableCell>
                                  <TableCell>{r.PersonnelType}</TableCell>
                                  <TableCell>{r.CardNumber}</TableCell>
                                  <TableCell>{r.Door}</TableCell>
                                </TableRow>
                              );
                            })}
                          </TableBody>
                        </Table>
                      </TableContainer>
                      <Button
                        size="small"
                        onClick={() =>
                          setExpandedFloor(expandedFloor === floor ? null : floor)
                        }
                      >
                        {expandedFloor === floor ? "Hide" : "See more…"}
                      </Button>
                    </Box>
                  </Box>
                ))}
              </Box>

              {/* Expanded full-width table */}
              {expandedFloor && (
                <Box sx={{ px: "20px", mt: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    {expandedFloor} — All Entries
                  </Typography>
                  <DataTable
                    columns={columns}
                    rows={floorMap[expandedFloor].map(r => ({
                      ...r,
                      LocaleMessageTime: new Date(r.LocaleMessageTime).toLocaleTimeString(),
                    }))}
                  />
                </Box>
              )}
            </>
          )}
        </Container>
      </Box>

      <Footer />
    </>
  );
}



// src/routes/AppRoutes.jsx

import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Dashboard                from '../pages/Dashboard';
import RealtimeDetails          from '../pages/RealtimeDetails';
import History                  from '../pages/History';
import PartitionDetail          from '../pages/PartitionDetail';
import PartitionDetailDetails   from '../pages/PartitionDetailDetails';

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Routes>
        {/* Home dashboard */}
        <Route path="/" element={<Dashboard />} />

        {/* History (global) */}
        <Route path="/history" element={<History />} />

        {/* Partition‐scoped history */}
        <Route path="/partition/:partition/history" element={<History />} />

        {/* Real-time details */}
        <Route path="/realtime/:partition" element={<RealtimeDetails />} />

        {/* Partition overview */}
        <Route path="/partition/:partition" element={<PartitionDetail />} />

        {/* Partition details sub-page */}
        <Route path="/partition/:partition/details" element={<PartitionDetailDetails />} />
      </Routes>
    </BrowserRouter>
  );
}



    // src/services/occupancy.service.js

    export const partitionList = [
    'CR.Costa Rica Partition',
    'MX.Mexico City',
    'AR.Cordoba',
    'PA.Panama City',
    'PE.Lima',
    'BR.Sao Paulo'
    ];







// src/theme/westernUnionTheme.js
import { createTheme } from '@mui/material/styles';

const westernUnionTheme = createTheme({
  palette: {
    mode: 'dark',
    background: {
      default: '#000000',
      paper:   '#1c1c1c'
    },
    primary: {
      main: '#FFC72C',
      contrastText: '#000000'
    },
    secondary: {
      main: '#FFFFFF',
      contrastText: '#000000'
    },
    text: {
      primary:   '#FFFFFF',
      secondary: 'rgba(255,255,255,0.7)'
    },
    divider: 'rgba(255,255,255,0.2)'
  },

  typography: {
    fontFamily: '"Roboto","Helvetica","Arial",sans-serif',
    // Card titles
    subtitle1: { fontWeight: 900, color: '#FFE599' },
    // Totals (variant h4 in SummaryCard)
    h4: { color: '#fcf3cf', fontWeight: 'bold' },
    // Stat values (variant h6)
    h6: { color: '#FFC107', fontWeight: 900 },
    // Stat labels (variant caption)
    caption: { color: '#FFC107', fontWeight: 900 },

    // You can leave other variants untouched
    body1:   { color: '#FFFFFF' },
    body2:   { color: 'rgba(255,255,255,0.7)' }
  },

  components: {
    MuiCssBaseline: {
      styleOverrides: {
        html: {
          height: '100%'
        },
        body: {
          margin: 0,
          padding: 0,
          height: '100%',
          background: 'linear-gradient(135deg, #000000 30%, #2c0000 60%, #000000 100%)',
          backgroundAttachment: 'fixed',
          backgroundRepeat: 'no-repeat',
          backgroundSize: 'cover',
          animation: 'gradientSpin 20s ease infinite',
          overflowX: 'hidden'
        },
        '@keyframes gradientSpin': {
          '0%':   { backgroundPosition: '0% 50%' },
          '50%':  { backgroundPosition: '100% 50%' },
          '100%': { backgroundPosition: '0% 50%' }
        }
      }
    },

    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          borderRadius: 4
        },
        contained: {
          backgroundColor: '#FFC107',
          color: '#000000',
          '&:hover': {
            backgroundColor: '#e6ac00'
          }
        }
      }
    },

    MuiDivider: {
      styleOverrides: {
        root: {
          backgroundColor: 'rgba(255,255,255,0.2)'
        }
      }
    },

    MuiTooltip: {
      styleOverrides: {
        tooltip: {
          backgroundColor: '#333',
          color: '#FFF'
        }
      }
    }

    // Note: We no longer override MuiCard so your SummaryCard and ChartCard
    // backgrounds, borders and hover effects come from their own `sx` props.
  }
});

export default westernUnionTheme;






// src/utils/dateHelpers.js

export function formatDate(dateStr) {
  const d = new Date(dateStr);
  return d.toLocaleDateString(undefined, { year:'numeric', month:'short', day:'numeric' });
}




// src/utils/floorLookup.js
import doorMap from './doorMap'; // relative to this file

/**
 * Given a partition, door and direction, return the mapped floor string.
 * Falls back to 'Unmapped' only if there's no matching entry.
 */
export function lookupFloor(partition, door, direction) {
  const entry = doorMap.find(d =>
    d.partition === partition && d.door === door
  );
  if (!entry) return 'Unmapped';
  return direction === 'InDirection'
    ? entry.inDirectionFloor
    : entry.outDirectionFloor;
}


C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\utils\doorMap.js




C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\App.jsx


import React from 'react';
import AppRoutes from './routes/AppRoutes';

export default function App() {
  return <AppRoutes />;
}



// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import { ThemeProvider, CssBaseline } from '@mui/material';
import App from './App';
import reportWebVitals from './reportWebVitals';
import westernUnionTheme from './theme/westernUnionTheme';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <ThemeProvider theme={westernUnionTheme}>
    <CssBaseline />
    <App />
  </ThemeProvider>
);

reportWebVitals();







// src/reportWebVitals.js

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;





