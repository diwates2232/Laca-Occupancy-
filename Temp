Read this dashboard first and 
yor are displying 2 cards for Costa Rica display only only one cards in partation 

Costa Rica (Live Only)  Remove this strickly 

Costa Rica Partition -- this is necessary 


2) for a Today headcount and Realtime Headcount you are using samr result 
this is our laca today headcount 
 "success": true,
  "today": {
    "total": 64,
    "Employee": 19,
    "Contractor": 45

and for realtime 
you need to check all partation realtime headcount AND ADDING ALL THEN calculate realtime headcount strickly 

and cards strickly use are display only Employee and Contractors , i need first total Employee  Contractor like this strikly
first make this changes and give me updated files carefully 



// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import {
  Container,
  Box,
  Grid,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Skeleton
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import Header from '../components/Header';
import Footer from '../components/Footer';
import SummaryCard from '../components/SummaryCard';
import ChartCard from '../components/ChartCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [partition, setPartition]   = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (error) {
    return (
      <Container maxWidth="xl" sx={{ mt: 1 }}>
        <Typography color="error">Error loading live data</Typography>
      </Container>
    );
  }

  const regions = !loading ? data.realtime : {};
  const names   = Object.keys(regions);
  // Shortcut for Costa Rica partition
  const costaKey = names.find(n => n.startsWith('CR.Costa'));
  const costa    = costaKey ? regions[costaKey] : null;

  return (
    <>
      <Header />
      <Container maxWidth="xl" sx={{ mt: 3, mb: 4 }}>

        {/* 1) Today's Total & Realtime Headcount */}
        <Grid container spacing={3}>
          {loading
            ? [0,1].map(i => (
                <Grid item xs={12} sm={6} key={i}>
                  <Skeleton variant="rectangular" height={160} />
                </Grid>
              ))
            : (
              <>
                <Grid item xs={12} sm={6}>
                  <SummaryCard
                    title="Today’s Total Headcount"
                    total={data.today.total}
                    stats={[
                      { label: 'Employees',   value: data.today.Employee },
                      { label: 'Contractors', value: data.today.Contractor }
                    ]}
                    showIcons={false}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <SummaryCard
                    title="Realtime Headcount"
                    total={data.today.total}
                    stats={[
                      { label: 'Employees',   value: data.today.Employee },
                      { label: 'Contractors', value: data.today.Contractor }
                    ]}
                    showIcons={false}
                  />
                </Grid>
              </>
            )
          }
        </Grid>

        {/* 2) Costa Rica quick card */}
        <Box mt={5}>
          {loading || !costa ? (
            <Skeleton variant="rectangular" height={160} />
          ) : (
            <SummaryCard
              title="Costa Rica (Live Only)"
              total={costa.total}
              stats={[
                { label: 'Employees',   value: costa.Employee },
                { label: 'Contractors', value: costa.Contractor },
                { label: 'TempBadge',   value: costa.TempBadge || 0 }
              ]}
              // use icons for each row
              showIcons={true}
            />
          )}
        </Box>

        {/* 3) Partition summary as icons-only rows */}
        <Box mt={5}>
          <Typography variant="h6" gutterBottom>
            Partitions
            {!loading && (
              <Typography variant="body2" color="textSecondary" component="span" sx={{ ml: 2 }}>
                (Updated: {lastUpdate})
              </Typography>
            )}
          </Typography>

          {loading ? (
            <Skeleton variant="rectangular" height={220} />
          ) : (
            <Grid container spacing={3}>
              {names.map(name => {
                const p = regions[name];
                return (
                  <Grid item xs={12} sm={6} md={4} lg={3} key={name}>
                    <SummaryCard
                      title={name.split('.').pop()}
                      total={p.total}
                      stats={[
                        { label: 'Employees',   value: p.Employee },
                        { label: 'Contractors', value: p.Contractor },
                        // include temp badge only for CR
                        ...(name === costaKey ? [{ label: 'TempBadge', value: p.TempBadge || 0 }] : [])
                      ]}
                      showIcons={true}
                    />
                  </Grid>
                );
              })}
            </Grid>
          )}
        </Box>

  {/* Live totals chart */}
         <Box mt={5}>
           <Typography variant="h6" gutterBottom>Live Totals by Partition</Typography>
           {loading ? (
            <Skeleton variant="rectangular" height={350} />
          ) : (
            <ChartCard
              title="Partition Totals"
              chartHeight={350}
              data={names.map(name => ({
                name: name.split('.').pop(),
                value: regions[name].total
              }))}
            />
          )}
        </Box>

        {/* Partition drill-down */}
        <Box mt={5}>
          <FormControl fullWidth>
            <InputLabel>Select Partition</InputLabel>
            <Select
              value={partition}
              label="Select Partition"
              onChange={e => setPartition(e.target.value)}
            >
              <MenuItem value="">— All —</MenuItem>
              {names.map(name => (
                <MenuItem key={name} value={name}>
                  {name.split('.').pop()}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {partition && !loading && (
            <Box mt={4}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">
                  {partition.split('.').pop()} – Floor Breakdown
                </Typography>
                <Button
                  variant="outlined"
                  onClick={() => navigate(`/realtime/${encodeURIComponent(partition)}`)}
                >
                  See Swipe Details
                </Button>
              </Box>
              <ChartCard
                title="Live Floor Counts"
                chartHeight={300}
                data={Object.entries(regions[partition].floors || {}).map(([floor, cnt]) => ({
                  name: floor,
                  value: cnt
                }))}
              />
            </Box>
          )}
        </Box>
      </Container>

      <Footer />
    </>
  );
}

