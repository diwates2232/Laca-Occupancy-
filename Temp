// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  // Grab optional partition from URL
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  // e.g. "CR" from "CR.Costa Rica Partition"
  const filterCode = decodedPartition?.split('.')[0] || null;

  const [data, setData]               = useState(null);
  const [loading, setLoading]         = useState(true);
  const [pickedDate, setPickedDate]   = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // 1) Summary entry for the selected date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === dateStr) || null;
  }, [data, pickedDate]);

  // 2) Build & filter partitionRows
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };

    return Object.entries(summaryEntry.partitions)
      .filter(([key]) =>
        !filterCode ? true : key.startsWith(filterCode + '.')
      )
      .map(([key, vals]) => {
        const [code, cityRaw] = key.split('.');
        return {
          country: codeToCountry[code] || code,
          city: cityRaw.replace('Partition','').trim(),
          employee: vals.Employee  ?? vals.EmployeeCount  ?? 0,
          contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
          // only CR gets tempBadge
          tempBadge: vals.TempBadge ?? 0,
          total: vals.total ?? 0,
        };
      });
  }, [summaryEntry, filterCode]);

  // 3) Build & filter detailRows
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.details
      .filter(r =>
        format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd') === dateStr
      )
      .filter(r =>
        !filterCode
          ? true
          : r.PartitionName2.startsWith(filterCode + '.')
      );
  }, [data, pickedDate, filterCode]);

  // Fetch all on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Export to Excel
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  const isCostaRica = filterCode === 'CR';

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* DatePicker + Summary */}
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 2, gap: '10px' }}>
            {/* Date picker */}
            <Box sx={{ flex: '0 0 200px' }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>

            {/* Summary & Toggle */}
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              {/* Summary table */}
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell
                        colSpan={isCostaRica ? 6 : 5}
                        align="center"
                        sx={{
                          fontWeight: 'bold',
                          fontSize: 16,
                          bgcolor: '#000',
                          color: '#fff',
                          border: '2px solid #000'
                        }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {/* Column headers */}
                      {[
                        'Country','City','Employee','Contractors',
                        ...(isCostaRica ? ['Temp Badge'] : []),
                        'Total'
                      ].map(h => (
                        <TableCell
                          key={h}
                          align={['Country','City'].includes(h) ? 'left' : 'right'}
                          sx={{
                            color: '#000',
                            fontWeight: 'bold',
                            fontSize: 14,
                            border: '2px solid #000'
                          }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>

                  <TableBody>
                    {partitionRows.map((row,i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                        {isCostaRica && (
                          <TableCell align="right" sx={{ border: '2px solid #000' }}>
                            {row.tempBadge}
                          </TableCell>
                        )}
                        <TableCell
                          align="right"
                          sx={{
                            backgroundColor: '#FFC107',
                            fontWeight: 'bold',
                            border: '2px solid #000'
                          }}
                        >
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}

                    {/* Grand total row */}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      {isCostaRica && (
                        <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                          {partitionRows.reduce((s, r) => s + r.tempBadge, 0)}
                        </TableCell>
                      )}
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* See/Hide Details & Export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}
                >
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button
                    variant="outlined"
                    sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}
                  >
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          // Only date picker
          <Box sx={{ px: '20px', mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => { setPickedDate(d); setShowDetails(false); }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}

        {/* Details table */}
        {showDetails && (
          /* your existing details-table code here (no change) */
        )}
      </Container>

      <Footer />
    </>
  );
}






// inside your pickedDate && summaryEntry render-block:

// 1) Determine which columns to show:
const isFiltered = Boolean(filterCode);
const isCostaRica = filterCode === 'CR';

// 2) Build headers array:
const baseMetrics = ['Employee', 'Contractor'];
const extraMetrics = isCostaRica ? ['Temp Badge'] : [];
const metricColumns = [...baseMetrics, ...extraMetrics, 'Total'];

const summaryHeaders = isFiltered
  ? metricColumns
  : ['Country', 'City', ...metricColumns];

// 3) Render the Paper/Table:
<Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
  <Table sx={{ border: '2px solid #000' }}>
    <TableHead>
      <TableRow>
        {/* Title spans all visible columns */}
        <TableCell
          colSpan={summaryHeaders.length}
          align="center"
          sx={{
            fontWeight: 'bold',
            fontSize: 16,
            bgcolor: '#000',
            color: '#fff',
            border: '2px solid #000',
          }}
        >
          {format(pickedDate, 'EEEE, d MMMM, yyyy')}
        </TableCell>
      </TableRow>
      <TableRow sx={{ bgcolor: '#FFC107' }}>
        {summaryHeaders.map(h => (
          <TableCell
            key={h}
            align={['Country','City'].includes(h) ? 'left' : 'right'}
            sx={{
              color: '#000',
              fontWeight: 'bold',
              fontSize: 14,
              border: '2px solid #000',
            }}
          >
            {h}
          </TableCell>
        ))}
      </TableRow>
    </TableHead>

    <TableBody>
      {/* summaryEntry.partitions is an object; when filtered, there's only one key */}
      {Object.entries(summaryEntry.partitions)
        // if filtered, keep only that one partition
        .filter(([key]) => !filterCode || key.startsWith(filterCode + '.'))
        .map(([key, vals]) => {
          // extract just the numbers you need
          const rowValues = summaryHeaders.map(col => {
            switch (col) {
              case 'Country':
                return key.split('.')[0];    // or map via codeToCountry if you prefer
              case 'City':
                return key.split('.')[1].replace('Partition','').trim();
              case 'Employee':
                return vals.Employee ?? vals.EmployeeCount ?? 0;
              case 'Contractor':
                return vals.Contractor ?? vals.ContractorCount ?? 0;
              case 'Temp Badge':
                return vals.TempBadge ?? 0;
              case 'Total':
                return vals.total ?? 0;
              default:
                return '';
            }
          });

          return (
            <TableRow key={key}>
              {rowValues.map((value, i) => (
                <TableCell
                  key={i}
                  align={i < summaryHeaders.indexOf('Total') ? 'right' : 'right'}
                  sx={{
                    backgroundColor: summaryHeaders[i] === 'Total' ? '#FFC107' : undefined,
                    fontWeight: summaryHeaders[i] === 'Total' ? 'bold' : undefined,
                    border: '2px solid #000',
                  }}
                >
                  {value}
                </TableCell>
              ))}
            </TableRow>
          );
        })
      }

      {/* Grand total row */}
      <TableRow sx={{ bgcolor: '#666' }}>
        <TableCell
          colSpan={isFiltered ? summaryHeaders.length - 1 : 2}
          align="right"
          sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}
        >
          Total
        </TableCell>
        {/* sum up each metric column */}
        {metricColumns.map((col, idx) => {
          const sum = Object.entries(summaryEntry.partitions)
            .filter(([key]) => !filterCode || key.startsWith(filterCode + '.'))
            .reduce((acc, [, vals]) => {
              switch (col) {
                case 'Employee':     return acc + (vals.Employee ?? vals.EmployeeCount ?? 0);
                case 'Contractor':   return acc + (vals.Contractor ?? vals.ContractorCount ?? 0);
                case 'Temp Badge':   return acc + (vals.TempBadge ?? 0);
                case 'Total':        return acc + (vals.total ?? 0);
                default:             return acc;
              }
            }, 0);

          return (
            <TableCell
              key={col}
              align="right"
              sx={{
                color: '#fff',
                fontWeight: 'bold',
                bgcolor: col === 'Total' ? '#333' : undefined,
                border: '2px solid #000',
              }}
            >
              {sum}
            </TableCell>
          );
        })}
      </TableRow>
    </TableBody>
  </Table>
</Paper>






//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\Header.jsx


import React from 'react';
import { AppBar, Toolbar, Box, Typography, Select, MenuItem } from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';

import WuLogo from '../assets/wu-logo.png';

// Flag images
import CostaRicaFlag from '../assets/flags/costa-rica.png';
import ArgentinaFlag from '../assets/flags/argentina.png';
import MexicoFlag from '../assets/flags/mexico.png';
import PeruFlag from '../assets/flags/peru.png';
import BrazilFlag from '../assets/flags/brazil.png';
import LacaFlag from '../assets/laca-flag.png'; // default fallback
import PanamaFlag from '../assets/flags/panama.png';


import { partitionList } from '../services/occupancy.service';

export default function Header() {
  const navigate = useNavigate();
  const loc = useLocation();

  const pathParts = loc.pathname.split('/');
  let currentPartition = '';
  let suffix = '';
  if (pathParts[1] === 'partition' && pathParts[2]) {
    currentPartition = decodeURIComponent(pathParts[2]);
    suffix = pathParts.slice(3).join('/');
  }

  // Map partition keywords to flags
  const flagMap = {
    'CR.Costa Rica Partition': CostaRicaFlag,
    'AR.Cordoba': ArgentinaFlag,
    'MX.Mexico City': MexicoFlag,
    'PE.Lima': PeruFlag,
    'BR.Sao Paulo': BrazilFlag,
    'PA.Panama City':PanamaFlag,
  };




  const selectedFlag = flagMap[currentPartition] || LacaFlag;

  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        <Box display="flex" alignItems="center">
          <Box component="img" src={WuLogo} alt="WU Logo" sx={{ height: 36, mr: 2 }} />
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            Western Union – LACA
            {currentPartition && <> • {currentPartition.replace('CR.Costa Rica Partition','Costa Rica')}</>}
          </Typography>
        </Box>
        <Box display="flex" alignItems="center">
          <Select
            size="small"
            value={currentPartition}
            displayEmpty
            onChange={e => {
              const p = e.target.value;
              if (!p) return navigate('/');
              const newBase = `/partition/${encodeURIComponent(p)}`;
              const newPath = suffix ? `${newBase}/${suffix}` : newBase;
              navigate(newPath);
            }}
            sx={{ bgcolor: 'background.paper', mr: 2 }}
          >
            <MenuItem value="">— Select Partition —</MenuItem>
            {partitionList.map(p => (
              <MenuItem key={p} value={p}>
                {p.replace('Partition', '')}
              </MenuItem>
            ))}
          </Select>
          <Box component="img" src={selectedFlag} alt="Flag" sx={{ height: 50 }} />
        </Box>
      </Toolbar>
    </AppBar>
  );
}














// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';            // ← new
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  // If the URL is /partition/:partition/history, this hook picks it up
  const { partition } = useParams();                           
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  // e.g. "CR" out of "CR.Costa Rica Partition"
  const filterCode = decodedPartition?.split('.')[0] || null;  

  const [data, setData]               = useState(null);
  const [loading, setLoading]         = useState(true);
  const [pickedDate, setPickedDate]   = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // 1) Find summary entry for the picked date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === dateStr) || null;
  }, [data, pickedDate]);

  // 2) Build and filter partitionRows
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };

    return Object.entries(summaryEntry.partitions)
      // if a partition filter is active, only keep matching code
      .filter(([key]) =>
        !filterCode ? true : key.startsWith(filterCode + '.')
      )
      .map(([key, vals]) => {
        const [code, cityRaw] = key.split('.');
        const city = cityRaw.replace('Partition','').trim();
        return {
          country: codeToCountry[code] || code,
          city,
          employee: vals.Employee ?? vals.EmployeeCount ?? 0,
          contractor: vals.Contractor ?? vals.ContractorCount ?? 0,
          // only CR has these
          tempBadge: vals.TempBadge ?? 0,
          remaining: vals.Remaining ?? 0,
          total: vals.total ?? 0,
        };
      });
  }, [summaryEntry, filterCode]);

  // 3) Build and filter detailRows
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const dateStr = format(pickedDate, 'yyyy-MM-dd');
    return data.details
      .filter(r =>
        format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd') === dateStr
      )
      .filter(r =>
        !filterCode
          ? true
          : r.PartitionName2.startsWith(filterCode + '.')
      );
  }, [data, pickedDate, filterCode]);

  // Fetch on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Excel export for detailRows
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType:r.PersonnelType,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  const isCostaRica = filterCode === 'CR';

  return (
    <>
      <Header />

      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* Controls row */}
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: '20px', mb: 2, gap: '10px' }}>
            {/* Date picker */}
            <Box sx={{ flex: '0 0 200px' }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={newDate => {
                    setPickedDate(newDate);
                    setShowDetails(false);
                  }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>

            {/* Summary + toggle */}
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              {/* Summary table */}
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell
                        colSpan={isCostaRica ? 7 : 5}
                        align="center"
                        sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {['Country','City','Employee','Contractors']
                        .concat(isCostaRica ? ['Temp Badge','Remaining'] : [])
                        .concat('Total')
                        .map(h => (
                          <TableCell
                            key={h}
                            align={['Country','City'].includes(h) ? 'left' : 'right'}
                            sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}
                          >
                            {h}
                          </TableCell>
                        ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {partitionRows.map((row, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                        {isCostaRica && (
                          <>
                            <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.tempBadge}</TableCell>
                            <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.remaining}</TableCell>
                          </>
                        )}
                        <TableCell align="right" sx={{ backgroundColor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}
                    {/* Grand Total */}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>Total</TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((sum, r) => sum + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((sum, r) => sum + r.contractor, 0)}
                      </TableCell>
                      {isCostaRica && (
                        <>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            {partitionRows.reduce((sum, r) => sum + r.tempBadge, 0)}
                          </TableCell>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            {partitionRows.reduce((sum, r) => sum + r.remaining, 0)}
                          </TableCell>
                        </>
                      )}
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((sum, r) => sum + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>

              {/* Toggle & Export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button variant="contained" sx={{ bgcolor: '#FFC107', color: '#000' }} onClick={() => setShowDetails(s => !s)}>
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button variant="outlined" sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }} onClick={handleExport}>
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          // initial date-picker only
          <Box sx={{ px: '20px', mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={newDate => {
                  setPickedDate(newDate);
                  setShowDetails(false);
                }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}


   {/* Details table */}
{showDetails && (
  <Box display="flex" justifyContent="center" mb={2} sx={{width:'100%'}}>
    <Paper
      elevation={1}
      sx={{
        px: '40px',
        py: 1,
        width: '100%',
        // maxWidth: 1000,
        border: '3px solid #000',       // outer black border
        borderRadius: 2,
      }}
    >
      {detailRows.length > 0 ? (
        <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
          <TableHead>
            <TableRow sx={{ bgcolor: '#000' }}>
              {['Sr','Date','Time','Employee ID','Name','Personnel Type','Door','Partition'].map(h => (
                <TableCell
                  key={h}
                  align="center"
                  sx={{
                    color: '#FFC107',
                    fontWeight: 'bold',
                    fontSize: 14,
                    border: '2px solid #000',
                  }}
                >
                  {h}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {detailRows.map((r, i) => (
              <TableRow key={r.PersonGUID}>
                <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>
                  {format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd')}
                </TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>
                  {format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}
                </TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                <TableCell sx={{border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      ) : (
        <Typography
          variant="body2"
          sx={{
            color: '#666',
            textAlign: 'center',
            mt: 2,
            fontStyle: 'italic',
          }}
        >
          No swipe records found for this date.
        </Typography>
      )}
    </Paper>
  </Box>


        )}
      </Container>

      <Footer />
    </>
  );
}




//C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\routes\AppRoutes.jsx
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import Dashboard from '../pages/Dashboard';
import RealtimeDetails from '../pages/RealtimeDetails';
import History from '../pages/History';
import PartitionDetail from '../pages/PartitionDetail';
import PartitionDetailDetails from '../pages/PartitionDetailDetails';

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Routes>

       {/* Overview page */}
        <Route
          path="/partition/:partition"
          element={<PartitionDetail />}
        />

       {/* NEW: Details page */}
       <Route
         path="/partition/:partition/details"
         element={<PartitionDetailDetails />}
       />



        <Route path="/" element={<Dashboard />} />
        
          <Route path="/partition/:partition" element={<PartitionDetail/>}/>
     <Route path="/realtime/:partition" element={<RealtimeDetails />} />

     
<Route path="/history" element={<History />} />
<Route path="/partition/:partition/history" element={<History />} />



      </Routes>
    </BrowserRouter>
  );
}





